<?xml version="1.0"?>
<doc>
    <assembly>
        "ManagedITK.Common"
    </assembly>
    <members>
        <member name="M:itk.itkImage_CVSS22.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVSS22.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVSS22.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVSS22.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVSS22.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS22.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_CVSS22.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_CVSS22.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_CVSS22.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS22.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS22.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS22.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS22.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS22.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS22.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS22.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS22.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS22.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS22.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS22.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_CVSS22.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_CVSS22.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_CVSS22.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_CVSS22.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_CVSS22.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_CVSS22.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_CVSS22.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_CVSS22.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_CVSS22.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_CVSS22.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_CVSS22.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_CVSS22.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS22.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVSS22.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVSS22.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_CVSS22">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="P:itk.itkNoSmartPointerObject.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkNoSmartPointerObject.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"2", "3", "UC".</example>
        </member>
        <member name="P:itk.itkNoSmartPointerObject.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="P:itk.itkNoSmartPointerObject.IsDisposed">
            <summary>Gets if the object has been disposed.</summary>
        </member>
        <member name="M:itk.itkNoSmartPointerObject.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkNoSmartPointerObject">
            <summary>
This class is a managed replacement for ITK objects which are not SmartPointers.
</summary>
        </member>
        <member name="M:itk.itkImage_VD33.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VD33.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VD33.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VD33.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VD33.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VD33.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VD33.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VD33.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VD33.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VD33.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VD33.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VD33.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VD33.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VD33.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VD33.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VD33.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VD33.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VD33.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VD33.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VD33.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VD33.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VD33.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VD33.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VD33.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VD33.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VD33.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VD33.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VD33.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VD33.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VD33.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VD33.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VD33.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VD33.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VD33.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VD33.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VD33">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_UC3.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_UC3.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_UC3.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_UC3.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_UC3.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_UC3.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_UC3.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_UC3.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_UC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_UC3.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_UC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_UC3.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_UC3.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_UC3.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_UC3.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_UC3.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_UC3.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_UC3.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_UC3.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_UC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_UC3.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_UC3">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImageToPathFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkImageToPathFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkImageToPathFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkImageToPathFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkImageToPathFilter.#ctor(System.String)">
            <summary>Default constructor.</summary>
            <param name="name">A string representing the name of the ProcessObject.</param>
        </member>
        <member name="T:itk.itkImageToPathFilter">
            <summary>
This class is a managed replacement for itk::ImageToPathFilter.
</summary>
            <remarks>
ImageToPathFilter is the base class for all process objects that output
path data and require image data as input. Specifically, this class
defines the SetInput() method for defining the input to a filter.
</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VF33.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VF33.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VF33.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VF33.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VF33.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VF33.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VF33.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VF33.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VF33.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VF33.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VF33.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VF33.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VF33.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VF33.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VF33.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VF33.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VF33.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VF33.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VF33.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VF33.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VF33.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VF33.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VF33">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VIF3.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VIF3.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VIF3.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VIF3.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VIF3.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VIF3.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VIF3.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VIF3.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VIF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VIF3.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VIF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VIF3.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VIF3.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VIF3.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VIF3.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VIF3.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VIF3.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VIF3.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VIF3.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VIF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VIF3.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VIF3">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="P:itk.itkFlatStructuringElement_2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkFlatStructuringElement_2.Annulus(itk.itkSize,System.UInt32,System.Boolean)">
            <summary>
Create an annulus (ring) structuring element of the given outer radius.
The thickness is as specified, and the center pixel is included or excluded as specified.
</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_2.Annulus(itk.itkSize,System.UInt32)">
            <summary>
Create an annulus (ring) structuring element of the given outer radius.
The thickness is as specified, and the center pixel is excluded.
</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_2.Annulus(itk.itkSize)">
            <summary>
Create an annulus (ring) structuring element of the given outer radius.
The thickness defaults to 1, and the center pixel is excluded.
</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_2.Cross(itk.itkSize)">
            <summary>Create a cross shaped structuring element of the given radius.</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_2.Ball(itk.itkSize)">
            <summary>Create a ball shaped structuring element of the given radius.</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_2.Box(itk.itkSize)">
            <summary>Create a box shaped structuring element of the given radius.</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="T:itk.itkFlatStructuringElement_2">
            <summary>
This class is a managed wrapper around itk::FlatStructuringElement.
</summary>
        </member>
        <member name="M:itk.itkImageIteratorWithIndex.Set(itk.itkPixel)">
            <summary>Set the pixel value at the current iterator location.</summary>
        </member>
        <member name="M:itk.itkImageIteratorWithIndex.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:itk.itkImageIteratorWithIndex">
            <summary>
This class is a managed wrapper for itk::ImageIterator.
</summary>
        </member>
        <member name="P:itk.itkFlatStructuringElement_3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkFlatStructuringElement_3.Annulus(itk.itkSize,System.UInt32,System.Boolean)">
            <summary>
Create an annulus (ring) structuring element of the given outer radius.
The thickness is as specified, and the center pixel is included or excluded as specified.
</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_3.Annulus(itk.itkSize,System.UInt32)">
            <summary>
Create an annulus (ring) structuring element of the given outer radius.
The thickness is as specified, and the center pixel is excluded.
</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_3.Annulus(itk.itkSize)">
            <summary>
Create an annulus (ring) structuring element of the given outer radius.
The thickness defaults to 1, and the center pixel is excluded.
</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_3.Cross(itk.itkSize)">
            <summary>Create a cross shaped structuring element of the given radius.</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_3.Ball(itk.itkSize)">
            <summary>Create a ball shaped structuring element of the given radius.</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_3.Box(itk.itkSize)">
            <summary>Create a box shaped structuring element of the given radius.</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement_3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="T:itk.itkFlatStructuringElement_3">
            <summary>
This class is a managed wrapper around itk::FlatStructuringElement.
</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement.CreateInstance(System.String,System.Object[])">
            <summary>Creates the correct type instance of the underlying native itk::FlatStructuringElement.</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement.ToString">
            <summary>
Converts the structuring to a string representation in the following format:
  Type[radius]
Example: Ball[2,2,2]
</summary>
            <returns>A string representation of the structuring element.</returns>
        </member>
        <member name="P:itk.itkFlatStructuringElement.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkFlatStructuringElement.MangledTypeString">
            <summary>Get a string representing the type instance of the structuring element.</summary>
            <example>"FSE2", "FSE3".</example>
            <remarks>
This object can be passed to the New() methods to specify the type of
native itk object to create.
</remarks>
        </member>
        <member name="M:itk.itkFlatStructuringElement.Annulus(itk.itkSize,System.UInt32,System.Boolean)">
            <summary>
Create an annulus (ring) structuring element of the given outer radius.
The thickness is as specified, and the center pixel is included or excluded as specified.
</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement.Annulus(itk.itkSize,System.UInt32)">
            <summary>
Create an annulus (ring) structuring element of the given outer radius.
The thickness is as specified, and the center pixel is excluded.
</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement.Annulus(itk.itkSize)">
            <summary>
Create an annulus (ring) structuring element of the given outer radius.
The thickness defaults to 1, and the center pixel is excluded.
</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement.Cross(itk.itkSize)">
            <summary>Create a cross shaped structuring element of the given radius.</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement.Ball(itk.itkSize)">
            <summary>Create a ball shaped structuring element of the given radius.</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement.Box(itk.itkSize)">
            <summary>Create a box shaped structuring element of the given radius.</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkFlatStructuringElement.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="T:itk.itkFlatStructuringElement">
            <summary>
This class is a managed wrapper around itk::FlatStructuringElement.
</summary>
        </member>
        <member name="T:itk.ImageToImageFilterDetail.DispatchBase">
\struct  DispatchBase
 * \brief Base class for a class used to dispatch to dimension specific implementations.
 *
 * DispatchBase is base class used as the default case when implementations
 * are dispatched to overloaded routines based on dimension.
 *
 * \sa Dispatch

</member>
        <member name="M:itk.itkImageIOBase.SupportsDimension(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
The different types of ImageIO's can support data of varying dimensionality. For example, some file formats are strictly 2D while others can support 2D, 3D, or even n-D. This method returns true/false as to whether the ImageIO can support the dimension indicated.
</summary>
        </member>
        <member name="M:itk.itkImageIOBase.CanStreamWrite">
            <summary>
Determine if the ImageIO can stream writing to this file. Default is false.
</summary>
        </member>
        <member name="M:itk.itkImageIOBase.CanWriteFile(System.String)">
            <summary>
Determine the file type. Returns true if this ImageIO can write the file specified.
</summary>
        </member>
        <member name="M:itk.itkImageIOBase.CanStreamRead">
            <summary>
Determine if the ImageIO can stream reading from this file. Default is false.
</summary>
        </member>
        <member name="M:itk.itkImageIOBase.CanReadFile(System.String)">
            <summary>
Determine the file type. Returns true if this ImageIO can read the file specified.
</summary>
        </member>
        <member name="M:itk.itkImageIOBase.SetDimensions(System.UInt32,System.UInt32)">
            <summary>
Set the image dimensions in the x, y, z, etc. directions. SetDimensions() is used prior to writing the data.
</summary>
        </member>
        <member name="M:itk.itkImageIOBase.GetDimensions(System.UInt32)">
            <summary>
Get the image dimensions in the x, y, z, etc. directions. GetDimensions() is typically used after reading the data.
</summary>
        </member>
        <member name="P:itk.itkImageIOBase.UseStreamedWriting">
            <summary>
Get/set a boolean to use streaming while writing or not.
</summary>
        </member>
        <member name="P:itk.itkImageIOBase.UseStreamedReading">
            <summary>
Get/set a boolean to use streaming while reading or not.
</summary>
        </member>
        <member name="P:itk.itkImageIOBase.UseCompression">
            <summary>
Get/set a boolean to use the compression or not.
</summary>
        </member>
        <member name="P:itk.itkImageIOBase.NumberOfDimensions">
            <summary>
Get/set the number of independent variables (dimensions) in the image being read or written. Note this is not necessarily what is written, rather the IORegion controls that.
</summary>
        </member>
        <member name="M:itk.itkImageIOBase.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImageIOBase">
            <summary>
This abstract class is a managed replacement for itk::ImageIOBase.
</summary>
            <remarks>
ImageIOBase is a class that reads and/or writes image data
of a particular format (such as PNG or raw binary). The
ImageIOBase encapsulates both the reading and writing of data. The
ImageIOBase is used by the ImageFileReader class (to read data)
and the ImageFileWriter (to write data) into a single file. The
ImageSeriesReader and ImageSeriesWriter classes are used to read
and write data (in conjunction with ImageIOBase) when the data is
represented by a series of files. Normally the user does not directly
manipulate this class other than to instantiate it, set the FileName,
and assign it to a ImageFileReader/ImageFileWriter or
ImageSeriesReader/ImageSeriesWriter.
</remarks>
        </member>
        <member name="M:itk.itkImageConstIteratorWithIndex.GetEnumerator">
            <summary>Implement the IEnumerable interface.</summary>
        </member>
        <member name="M:itk.itkImageConstIteratorWithIndex.op_Decrement">
            <summary>Decrement the iterator.</summary>
        </member>
        <member name="M:itk.itkImageConstIteratorWithIndex.op_Increment">
            <summary>Increment the iterator.</summary>
        </member>
        <member name="M:itk.itkImageConstIteratorWithIndex.GoToReverseBegin">
            <summary>Move the iterator to the ending location.</summary>
        </member>
        <member name="M:itk.itkImageConstIteratorWithIndex.GoToBegin">
            <summary>Move the iterator to the beginning location.</summary>
        </member>
        <member name="P:itk.itkImageConstIteratorWithIndex.IsAtEnd">
            <summary>Gets if the iterator is at the end of the region to iterate.</summary>
        </member>
        <member name="P:itk.itkImageConstIteratorWithIndex.IsAtReverseEnd">
            <summary>Gets if the iterator is at the beginning of the region to iterate.</summary>
        </member>
        <member name="M:itk.itkImageConstIteratorWithIndex.Get">
            <summary>Get the pixel value at the current iterator location.</summary>
        </member>
        <member name="P:itk.itkImageConstIteratorWithIndex.Image">
            <summary>Get the image this iterator walks.</summary>
        </member>
        <member name="P:itk.itkImageConstIteratorWithIndex.Region">
            <summary>Get the image region this iterator walks.</summary>
        </member>
        <member name="P:itk.itkImageConstIteratorWithIndex.Index">
            <summary>
Get/set the index at the current iterator location.
Iterators NOT in the "WithIndex" family calculate the index on demand (expensive call).
Iterators in the "WithIndex" family maintain the index during operation (inexpensive call).
</summary>
        </member>
        <member name="P:itk.itkImageConstIteratorWithIndex.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IUC2IUC2".</example>
        </member>
        <member name="P:itk.itkImageConstIteratorWithIndex.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkImageConstIteratorWithIndex.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:itk.itkImageConstIteratorWithIndex">
            <summary>
This class is a managed wrapper for itk::ImageIterator.
</summary>
        </member>
        <member name="M:itk.itkImage_CVUC33.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVUC33.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVUC33.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVUC33.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVUC33.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC33.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_CVUC33.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_CVUC33.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_CVUC33.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC33.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC33.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC33.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC33.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC33.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC33.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC33.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC33.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC33.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC33.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC33.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_CVUC33.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_CVUC33.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_CVUC33.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_CVUC33.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_CVUC33.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_CVUC33.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_CVUC33.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_CVUC33.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_CVUC33.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_CVUC33.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_CVUC33.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_CVUC33.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC33.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVUC33.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVUC33.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_CVUC33">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VIF2.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VIF2.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VIF2.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VIF2.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VIF2.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VIF2.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VIF2.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VIF2.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VIF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VIF2.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VIF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VIF2.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VIF2.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VIF2.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VIF2.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VIF2.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VIF2.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VIF2.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VIF2.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VIF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VIF2.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VIF2">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVD33.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVD33.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVD33.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVD33.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_CVD33.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_CVD33.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_CVD33.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_CVD33.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_CVD33.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_CVD33.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_CVD33.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_CVD33.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_CVD33.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_CVD33.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_CVD33.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_CVD33.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_CVD33.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_CVD33.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_CVD33.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD33.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVD33.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVD33.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_CVD33">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VD22.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VD22.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VD22.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VD22.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VD22.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VD22.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VD22.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VD22.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VD22.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VD22.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VD22.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VD22.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VD22.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VD22.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VD22.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VD22.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VD22.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VD22.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VD22.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VD22.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VD22.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VD22.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VD22">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkMeshToMeshFilter.GetInput(itk.itkMeshBase)">
            <summary>Get the first input of the filter object.</summary>
            <param name="input">The itkMeshBase to populate with the first input.</param>
        </member>
        <member name="M:itk.itkMeshToMeshFilter.GetInput">
            <summary>Get the first input of the filter object.</summary>
            <returns>The input as an IntPtr.</returns>
        </member>
        <member name="M:itk.itkMeshToMeshFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkMeshPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMeshToMeshFilter.SetInput(itk.itkMeshBase)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkMeshBase.</param>
        </member>
        <member name="M:itk.itkMeshToMeshFilter.#ctor(System.String)">
            <summary>Protected constructor.</summary>
            <param name="name">A string representing the name of the ProcessObject.</param>
        </member>
        <member name="T:itk.itkMeshToMeshFilter">
            <summary>
This class is a managed replacement for itk::MeshToMeshFilter.
</summary>
            <remarks>
MeshToMeshFilter is the base class for all process objects that output
mesh data, and require mesh data as input. Specifically, this class   
defines the SetInput() method for defining the input to a filter.
</remarks>
        </member>
        <member name="P:itk.itkDimension.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
            <remarks>
This property is not applicable for itkDimension and will always get/set 0.
</remarks>
        </member>
        <member name="P:itk.itkDimension.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"2", "3".</example>
            <remarks>
This object can be passed to the New() methods to specify the type of
native itk object to create.
</remarks>
        </member>
        <member name="P:itk.itkDimension.Dimension">
            <summary>Get the number of dimensions.</summary>
        </member>
        <member name="M:itk.itkDimension.#ctor(System.UInt32)">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:itk.itkDimension">
            <summary>
This class is used to specify an instance type using the number of dimensions.
</summary>
            <remarks>
It can be used to specify the instance type of itkTransform to create.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VIUC3.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VIUC3.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VIUC3.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VIUC3.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VIUC3.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VIUC3.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VIUC3.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VIUC3.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VIUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VIUC3.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VIUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VIUC3.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VIUC3.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VIUC3.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VIUC3.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VIUC3.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VIUC3.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VIUC3.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VIUC3.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VIUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VIUC3.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VIUC3">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VF22.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VF22.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VF22.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VF22.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VF22.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VF22.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VF22.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VF22.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VF22.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VF22.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VF22.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VF22.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VF22.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VF22.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VF22.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VF22.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VF22.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VF22.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VF22.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VF22.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VF22.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VF22.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VF22">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VIUC2.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VIUC2.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VIUC2.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VIUC2.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VIUC2.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VIUC2.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VIUC2.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VIUC2.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VIUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VIUC2.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VIUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VIUC2.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VIUC2.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VIUC2.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VIUC2.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VIUC2.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VIUC2.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VIUC2.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VIUC2.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VIUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VIUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VIUC2.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VIUC2">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkPipeline.ToString">
            <summary>
Converts the itkPipeline to a string representation.
Eg. "itkTest1ImageFilter -&gt; itkTest2ImageFilter".
</summary>
            <returns>A string represetnation of the itkPipeline.</returns>
        </member>
        <member name="M:itk.itkPipeline.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the pipeline object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
            <remarks>All filters must be added to the pipeline before calling this method.</remarks>
        </member>
        <member name="M:itk.itkPipeline.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the pipeline object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
            <remarks>All filters must be added to the pipeline before calling this method.</remarks>
        </member>
        <member name="M:itk.itkPipeline.Update">
            <summary>
Call Update() on the last filter in the pipeline.
</summary>
            <remarks>
The user must have already connected the internal filter inputs and outputs by
calling or ConnectInternalFiltersInputsAndOutputs or by explicitly setting them.
</remarks>
        </member>
        <member name="M:itk.itkPipeline.ConnectInternalFiltersInputsAndOutputs">
            <summary>
Connects the output of each internal filter to the input of the next filter.
</summary>
            <remarks>
This method has no effect if the number of internal filters is one.
</remarks>
        </member>
        <member name="M:itk.itkPipeline.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the pipeline object.</summary>
            <param name="input">The input as an itkDataObject.</param>
            <remarks>The first filter must be added to the pipeline before calling this method.</remarks>
        </member>
        <member name="M:itk.itkPipeline.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the pipeline object.</summary>
            <param name="input">The input as an itkDataObject.</param>
            <remarks>The first filter must be added to the pipeline before calling this method.</remarks>
        </member>
        <member name="M:itk.itkPipeline.SetFilter(System.UInt32,itk.itkImageToImageFilter)">
            <summary>
Set the filter at the specified position in the pipeline.
The index must be less than Filters.Length, otherwise an IndexOutOfRangeException
will be thrown.
</summary>
            <param name="index">The index of the filter to set.</param>
            <param name="filter">The filter object to set.</param>
        </member>
        <member name="M:itk.itkPipeline.AddFilter(itk.itkImageToImageFilter)">
            <summary>Add a filter to the end of the pipeline.</summary>
            <param name="filter">The filter to add to the end of the pipeline.</param>
            <remarks>Filters can be added to this pipeline using Filters.Add() or AddFilters().</remarks>
        </member>
        <member name="P:itk.itkPipeline.Filters">
            <summary>Get the list of filters comprising this pipeline.</summary>
            <remarks>Filters can be added to this pipeline using Filters.Add() or AddFilters().</remarks>
        </member>
        <member name="M:itk.itkPipeline.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkPipeline.#ctor(itk.itkImageToImageFilter[])">
            <summary>Constructor taking the list of filters.</summary>
            <param name="filters">The list of filter instance objects in this pipline.</param>
        </member>
        <member name="M:itk.itkPipeline.#ctor">
            <summary>Default constructor which creates an empty list of filters.</summary>
        </member>
        <member name="M:itk.itkPipeline.Initialise">
            <summary>Initialise the pipeline.</summary>
        </member>
        <member name="T:itk.itkPipeline">
            <summary>
A class for grouping filters into a simple itkPipeline object.
Add filters using the AddFilter() or SetFilter() methods, add inputs using
the SetInput() method, get outputs using the GetOutput() method, 
and update the Pipeline using the Update() method. Filters must be added BEFORE
the Input/Output/Update methods can be called.
</summary>
            <remarks>
The pipeline can work for internal filters which expect multiple inputs by
explicitly setting the inputs instead of or after calling 
ConnectInternalFiltersInputsAndOutputs().
</remarks>
        </member>
        <member name="M:itk.itkMatrixOffsetTransform.Compose(itk.itkMatrixOffsetTransform,System.Boolean)">
            <summary>Compose with another MatrixOffsetTransformBase.</summary>
            <remarks>This method composes self with another MatrixOffsetTransformBase of the same dimension, modifying self to be the composition of self and other. If the argument pre is true, then other is precomposed with self; that is, the resulting transformation consists of first applying other to the source, followed by self. If pre is false or omitted, then other is post-composed with self; that is the resulting transformation consists of first applying self to the source, followed by other. This updates the Translation based on current center.</remarks>
        </member>
        <member name="M:itk.itkMatrixOffsetTransform.SetIdentity">
            <summary>Set the matrix to identity and the offset to zeros.</summary>
        </member>
        <member name="P:itk.itkMatrixOffsetTransform.Translation">
            <summary>Get/set the translation.</summary>
            <remarks>To define an affine transform, you must set the matrix, center, and translation OR the matrix and offset.</remarks>
        </member>
        <member name="P:itk.itkMatrixOffsetTransform.Center">
            <summary>Get/set the center of rotation.</summary>
            <remarks>To define an affine transform, you must set the matrix, center, and translation OR the matrix and offset.</remarks>
        </member>
        <member name="P:itk.itkMatrixOffsetTransform.Offset">
            <summary>Get/set the offset.</summary>
            <remarks>To define an affine transform, you must set the matrix, center, and translation OR the matrix and offset.</remarks>
        </member>
        <member name="P:itk.itkMatrixOffsetTransform.Matrix">
            <summary>Get/set the matrix.</summary>
            <remarks>To define an affine transform, you must set the matrix, center, and translation OR the matrix and offset.</remarks>
        </member>
        <member name="T:itk.itkMatrixOffsetTransform">
            <summary>
This abstract class is a managed replacement for itk::MatrixOffsetTransform.
</summary>
            <remarks>
This class serves as a base class for transforms that can be expressed
as a linear transformation plus a constant offset (e.g., affine, similarity
and rigid transforms). This base class also provides the concept of
using a center of rotation and a translation instead of an offset.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_RGBAUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_RGBAUC2.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_RGBAUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC2.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC2.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC2.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC2.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC2.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC2.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC2.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC2.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_RGBAUC2.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_RGBAUC2">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVF22.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVF22.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVF22.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVF22.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_CVF22.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_CVF22.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_CVF22.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_CVF22.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_CVF22.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_CVF22.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_CVF22.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_CVF22.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_CVF22.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_CVF22.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_CVF22.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_CVF22.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_CVF22.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_CVF22.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_CVF22.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF22.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVF22.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVF22.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_CVF22">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImageToImageMetric.Initialize">
            <summary>
Initialize the Metric by making sure that all the components are present
and plugged together correctly.
</summary>
        </member>
        <member name="M:itk.itkImageToImageMetric.SetTransformParameters(itk.itkArray`1{System.Double})">
            <summary>Set the parameters defining the Transform.</summary>
        </member>
        <member name="M:itk.itkImageToImageMetric.GetGradientImage(itk.itkImageBase)">
            <summary>Get the gradient image.</summary>
            <param name="image">The itkImageBase to become the gradient image.</param>
        </member>
        <member name="P:itk.itkImageToImageMetric.ComputeGradient">
            <summary>Get/set whether the gradient should be computed or not.</summary>
        </member>
        <member name="P:itk.itkImageToImageMetric.NumberOfPixelsCounted">
            <summary>Get the number of pixels considered in the computation.</summary>
        </member>
        <member name="P:itk.itkImageToImageMetric.FixedImageRegion">
            <summary>Get/set the region over which the metric will be computed.</summary>
        </member>
        <member name="M:itk.itkImageToImageMetric.GetInterpolator(itk.itkImageFunction)">
            <summary>Get the interpolator.</summary>
            <param name="interpolator">The itkImageFuction to become the interpolator.</param>
        </member>
        <member name="M:itk.itkImageToImageMetric.SetInterpolator(itk.itkImageFunction)">
            <summary>Set the interpolator.</summary>
        </member>
        <member name="M:itk.itkImageToImageMetric.GetTransform(itk.itkTransform)">
            <summary>Get the transform.</summary>
            <param name="transform">The itkTransform to become the transform.</param>
        </member>
        <member name="M:itk.itkImageToImageMetric.SetTransform(itk.itkTransform)">
            <summary>Set the transform.</summary>
        </member>
        <member name="M:itk.itkImageToImageMetric.GetMovingImageMask(itk.itkImageBase)">
            <summary>Get the moving image mask.</summary>
            <param name="mask">The itkImageBase to become the moving image mask.</param>
        </member>
        <member name="M:itk.itkImageToImageMetric.SetMovingImageMask(System.IntPtr)">
            <summary>Set the moving image mask.</summary>
        </member>
        <member name="M:itk.itkImageToImageMetric.SetMovingImageMask(itk.itkImageBase)">
            <summary>Set the moving image mask.</summary>
        </member>
        <member name="M:itk.itkImageToImageMetric.GetFixedImageMask(itk.itkImageBase)">
            <summary>Get the fixed image mask.</summary>
            <param name="mask">The itkImageBase to become the fixed image mask.</param>
        </member>
        <member name="M:itk.itkImageToImageMetric.SetFixedImageMask(System.IntPtr)">
            <summary>Set the fixed image mask.</summary>
        </member>
        <member name="M:itk.itkImageToImageMetric.SetFixedImageMask(itk.itkImageBase)">
            <summary>Set the fixed image mask.</summary>
        </member>
        <member name="M:itk.itkImageToImageMetric.GetMovingImage(itk.itkImageBase)">
            <summary>Get the moving image.</summary>
            <param name="image">The itkImageBase to become the moving image.</param>
        </member>
        <member name="M:itk.itkImageToImageMetric.SetMovingImage(System.IntPtr)">
            <summary>Set the moving image.</summary>
        </member>
        <member name="M:itk.itkImageToImageMetric.SetMovingImage(itk.itkImageBase)">
            <summary>Set the moving image.</summary>
        </member>
        <member name="M:itk.itkImageToImageMetric.GetFixedImage(itk.itkImageBase)">
            <summary>Get the fixed image.</summary>
            <param name="image">The itkImageBase to become the fixed image.</param>
        </member>
        <member name="M:itk.itkImageToImageMetric.SetFixedImage(System.IntPtr)">
            <summary>Set the fixed image.</summary>
        </member>
        <member name="M:itk.itkImageToImageMetric.SetFixedImage(itk.itkImageBase)">
            <summary>Set the fixed image.</summary>
        </member>
        <member name="T:itk.itkImageToImageMetric">
            <summary>
This class is a managed replacement for itk::ImageToImageMetric.
</summary>
            <remarks>
ImageToImageMetric computes the similarity between regions of two images.
It expects a Transform and an Interpolator to be plugged in.

This class computes a value that measures the similarity between the Fixed
image and the transformed Moving image. The Interpolator is used to compute
intensity values on non-grid positions resulting from mapping points through 
the Transform.
</remarks>
        </member>
        <member name="M:itk.itkImageFunction.EvaluateAtContinuousIndex(itk.itkContinuousIndex)">
            <summary>Evaluate the function at specified continuous location.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <returns>The pixel value at the given continuous location.</returns>
        </member>
        <member name="M:itk.itkImageFunction.EvaluateAtIndex(itk.itkIndex)">
            <summary>Evaluate the function at specified discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImageFunction.Evaluate(itk.itkPoint)">
Get the input image to the function object. 
<summary>Evaluate the function at specified physical location.</summary><param name="point">The geometric location in physical space.</param><returns>The pixel value at the given physical location.</returns></member>
        <member name="M:itk.itkImageFunction.SetInputImage(System.IntPtr)">
            <summary>Set the input image to the function object.</summary>
            <param name="itkInputImagePtr">The input image as an IntPtr.</param>
        </member>
        <member name="M:itk.itkImageFunction.SetInputImage(itk.itkImageBase)">
            <summary>Set the input image to the function object.</summary>
            <param name="inputImage">The input image as an itkImage.</param>
        </member>
        <member name="T:itk.itkImageFunction">
            <summary>
This class is a managed replacement for itk::ImageFunction.
</summary>
            <remarks>
ImageFunction is a baseclass for all objects that evaluates
a function of an image at index, continuous index or point.
</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_UL2.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_UL2.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_UL2.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_UL2.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_UL2.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_UL2.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_UL2.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_UL2.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_UL2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_UL2.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_UL2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_UL2.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_UL2.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_UL2.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_UL2.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_UL2.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_UL2.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_UL2.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_UL2.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UL2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_UL2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_UL2.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_UL2">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_US3.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_US3.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_US3.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_US3.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_US3.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_US3.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_US3.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_US3.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_US3.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_US3.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_US3.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_US3.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_US3.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_US3.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_US3.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_US3.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_US3.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_US3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_US3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_US3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_US3.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_US3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_US3.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_US3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_US3.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_US3.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_US3.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_US3.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_US3.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_US3.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_US3.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_US3.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_US3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_US3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_US3.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_US3">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_SS2.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_SS2.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_SS2.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_SS2.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_SS2.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_SS2.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_SS2.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_SS2.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_SS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_SS2.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_SS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_SS2.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_SS2.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_SS2.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_SS2.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_SS2.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_SS2.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_SS2.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_SS2.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_SS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_SS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_SS2.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_SS2">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVUC22.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVUC22.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVUC22.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVUC22.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_CVUC22.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_CVUC22.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_CVUC22.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_CVUC22.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_CVUC22.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_CVUC22.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_CVUC22.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_CVUC22.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_CVUC22.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_CVUC22.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_CVUC22.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_CVUC22.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_CVUC22.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_CVUC22.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_CVUC22.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVUC22.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVUC22.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVUC22.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_CVUC22">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VISS2.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VISS2.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VISS2.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VISS2.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VISS2.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VISS2.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VISS2.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VISS2.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VISS2.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VISS2.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VISS2.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VISS2.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VISS2.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VISS2.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VISS2.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VISS2.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VISS2.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VISS2.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VISS2">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_SS3.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_SS3.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_SS3.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_SS3.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_SS3.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_SS3.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_SS3.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_SS3.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_SS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_SS3.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_SS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_SS3.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_SS3.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_SS3.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_SS3.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_SS3.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_SS3.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_SS3.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_SS3.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_SS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_SS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_SS3.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_SS3">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkPathSource.GetOutput(System.UInt32,itk.itkParametricPath)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkParametricPath to make as the output.</param>
        </member>
        <member name="M:itk.itkPathSource.GetOutput(itk.itkParametricPath)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkParametricPath to make as the output.</param>
        </member>
        <member name="M:itk.itkPathSource.#ctor(System.String)">
            <summary>Protected constructor.</summary>
            <param name="name">A string representing the name of the ProcessObject.</param>
        </member>
        <member name="T:itk.itkPathSource">
            <summary>
This class is a managed replacement for itk::PathSource.
</summary>
            <remarks>
PathSource is the base class for all process objects that output
path data. Specifically, this class defines the GetOutput() method
that returns a pointer to the output path. The class also defines
some internal private data members that are used to manage streaming
of data.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_RGBUC3.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_RGBUC3.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_RGBUC3.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_RGBUC3.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_RGBUC3.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_RGBUC3.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_RGBUC3.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_RGBUC3.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_RGBUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_RGBUC3.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_RGBUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC3.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC3.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC3.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC3.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC3.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC3.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC3.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC3.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_RGBUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_RGBUC3.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_RGBUC3">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VISS3.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VISS3.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VISS3.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VISS3.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VISS3.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VISS3.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VISS3.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VISS3.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VISS3.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VISS3.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VISS3.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VISS3.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VISS3.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VISS3.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VISS3.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VISS3.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VISS3.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VISS3.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VISS3">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_F3.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_F3.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_F3.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_F3.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_F3.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_F3.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_F3.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_F3.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_F3.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_F3.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_F3.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_F3.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_F3.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_F3.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_F3.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_F3.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_F3.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_F3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_F3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_F3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_F3.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_F3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_F3.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_F3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_F3.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_F3.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_F3.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_F3.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_F3.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_F3.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_F3.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_F3.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_F3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_F3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_F3.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_F3">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VSS22.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VSS22.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VSS22.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VSS22.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VSS22.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VSS22.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VSS22.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VSS22.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VSS22.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VSS22.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VSS22.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VSS22.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VSS22.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VSS22.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VSS22.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VSS22.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VSS22.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VSS22.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VSS22.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS22.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VSS22.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VSS22.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VSS22">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkParametricPath.EvaluateToIndex(System.Double)">
            <summary>Evaluate the path at specified location along the path.</summary>
        </member>
        <member name="M:itk.itkParametricPath.Evaluate(System.Double)">
            <summary>Evaluate the path at specified location along the path.</summary>
        </member>
        <member name="P:itk.itkParametricPath.EndOfInput">
            <summary>
Get/set the end of the path.
This value is sometimes used by IncrementInput() to go to the end of a path.
</summary>
        </member>
        <member name="P:itk.itkParametricPath.StartOfInput">
            <summary>
Get/set the start of the path.
For most types of paths, the path will begin at zero.
This value can be overridden in children, and is necessary for
iterators to know how to go to the beginning of a path.
</summary>
        </member>
        <member name="P:itk.itkParametricPath.Dimension">
            <summary>Get the number of dimensions this path contains.</summary>
        </member>
        <member name="T:itk.itkParametricPath">
            <summary>
This abstract class is a managed replacement for itk::ParametricPath.
</summary>
            <remarks>
Represent a path through ND image space.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVF33.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVF33.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVF33.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVF33.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_CVF33.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_CVF33.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_CVF33.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_CVF33.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_CVF33.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_CVF33.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_CVF33.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_CVF33.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_CVF33.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_CVF33.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_CVF33.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_CVF33.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_CVF33.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_CVF33.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_CVF33.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVF33.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVF33.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVF33.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_CVF33">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_RGBUC2.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_RGBUC2.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_RGBUC2.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_RGBUC2.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_RGBUC2.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_RGBUC2.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_RGBUC2.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_RGBUC2.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_RGBUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_RGBUC2.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_RGBUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC2.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC2.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC2.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC2.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC2.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC2.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC2.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_RGBUC2.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_RGBUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_RGBUC2.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_RGBUC2">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_UC2.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_UC2.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_UC2.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_UC2.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_UC2.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_UC2.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_UC2.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_UC2.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_UC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_UC2.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_UC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_UC2.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_UC2.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_UC2.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_UC2.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_UC2.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_UC2.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_UC2.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_UC2.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_UC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_UC2.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_UC2">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkImage.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkImage.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkImage.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkImage.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkImage.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="M:itk.itkImage.CreateInstance">
            <summary>Creates the correct type instance of the underlying native itk::Image.</summary>
        </member>
        <member name="M:itk.itkImage.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage.ReadSeries(System.String,System.String)">
            <summary>Read an image series from the files matching the given pattern.</summary>
            <param name="path">An absolute path to search for the files comprising the series.</param>
            <param name="pattern">A pattern with wildcard character '*'.</param>
            <example>path="C:/temp/", pattern="test_*.png".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
        </member>
        <member name="M:itk.itkImage.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage.New(System.String)">
            <summary>Create an instance of an underlying native itk::Image.</summary>
            <param name="mangledType">A string representing the pixel type and dimension the underlying native itk::Image is templated over. Eg. "UC2", "F3", etc.</param>
        </member>
        <member name="M:itk.itkImage.New(System.String,System.UInt32)">
            <summary>Create an instance of an underlying native itk::Image.</summary>
            <param name="mangledPixelType">A string representing the pixel type the underlying native itk::Image is templated over.</param>
            <param name="dim">The number of dimensions the underlying native itk::Image is templated over.</param>
        </member>
        <member name="M:itk.itkImage.New(itk.itkImageBase)">
            <summary>Create an instance of the same underlying native itk::Image type as the given image.</summary>
            <param name="image">The type of the underlying native itk::Image to create.</param>
        </member>
        <member name="M:itk.itkImage.New(itk.itkPixelType,System.UInt32)">
            <summary>Create an instance of an underlying native itk::Image.</summary>
            <param name="pixelType">The pixel type the underlying native itk::Image is templated over.</param>
            <param name="dim">The number of dimensions the underlying native itk::Image is templated over.</param>
        </member>
        <member name="P:itk.itkImage.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="P:itk.itkImage.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="P:itk.itkImage.Name">
            <summary>Get/set a string describing the data object (typically an abosolute file name).</summary>
        </member>
        <member name="M:itk.itkImage.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage">
            <summary>
This class is a managed wrapper for itk::Image. A specific image type
(eg. unsigned char, float, etc.) can be instantiated using the 
New(pixeltype, dim) method.
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables), 
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="T:itk.itkInvalidWrappedTypeException">
            <summary>
The exception is thrown when the given parameters specify an invalid wrapped
type to instantiate.
</summary>
        </member>
        <member name="M:itk.itkImageToMeshFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkImageToMeshFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkImageToMeshFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkImageToMeshFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkImageToMeshFilter.#ctor(System.String)">
            <summary>Protected constructor.</summary>
            <param name="name">A string representing the name of the ProcessObject.</param>
        </member>
        <member name="T:itk.itkImageToMeshFilter">
            <summary>
This class is a managed replacement for itk::ImageToMeshFilter.
</summary>
            <remarks>
ImageToMeshFilter is the base class for all process objects that output
Mesh data and require image data as input. Specifically, this class
defines the SetInput() method for defining the input to a filter.
</remarks>
        </member>
        <member name="M:itk.itkMeshSource.GetOutput(System.UInt32,itk.itkMeshBase)">
            <summary>Get the specified output.</summary>
            <param name="output">The itkMeshBase to make as the output.</param>
        </member>
        <member name="M:itk.itkMeshSource.GetOutput(itk.itkMeshBase)">
            <summary>Get the first output.</summary>
            <param name="output">The itkMeshBase to make as the output.</param>
        </member>
        <member name="M:itk.itkMeshSource.#ctor(System.String)">
            <summary>Protected constructor.</summary>
            <param name="name">A string representing the name of the ProcessObject.</param>
        </member>
        <member name="T:itk.itkMeshSource">
            <summary>
This class is a managed replacement for itk::MeshSource.
</summary>
            <remarks>
MeshSource is the base class for all process objects that output
mesh data. Specifically, this class defines the GetOutput() method
that returns a pointer to the output mesh. The class also defines
some internal private data members that are used to manage streaming
of data.
</remarks>
        </member>
        <member name="M:itk.itkMeshBase.SetCellIndicesAsArray(System.UInt32,itk.itkCellTypeEnum,System.IntPtr)">
            <summary>Set the cells from the given memory location. This method only creates meshes with homogenuous cells (ie. all cells are the same).</summary>
            <param name="numberOfCells">The number of cells in the array. The array will have (numberOfCells * NumberOfPoints in cell) values.</param>
            <param name="cellType">The type of cells contained in the array. All cells must be of the same type.</param>
            <param name="arrayptr">The memory location to read the cells. It is the caller's responsiblity to ensure the array has the correct number of values.</param>
        </member>
        <member name="M:itk.itkMeshBase.GetCellIndicesAsArray(System.UInt32,System.IntPtr)">
            <summary>Copy the array of cell indicies to the given memory location. If the cell is not of the given type, it is broken up into cells of the given type (or at least attempted, the cell is totally skipped if not possible).</summary>
            <param name="numberOfPointsPerCell">The number of points for each cell. Typical values will be 2 (for a line list), or 3 (for a triangle list).</param>
            <param name="arrayptr">The memory location to write the cell indices. It is the caller's responsiblity to ensure enough memory has been allocated.</param>
        </member>
        <member name="M:itk.itkMeshBase.GetCellIndicesAsArray(System.IntPtr)">
            <summary>Copy the array of cell indicies to the given memory location. For this method to be useful, all cells must have the same number of points (ie. all LINE_CELL, all TRIANGLE_CELL, etc).</summary>
            <param name="arrayptr">The memory location to write the cell indices. It is the caller's responsiblity to ensure enough memory has been allocated.</param>
        </member>
        <member name="M:itk.itkMeshBase.GetCellsAsArray">
            <summary>Return a managed array of cells.</summary>
            <remarks>This method steps through the cell array and duplicates each index in to managed memory. It operates irrespective of the mesh traits.</remarks>
        </member>
        <member name="M:itk.itkMeshBase.GetCells">
            <summary>Return the pointer to the native CellsContainerPointer.</summary>
        </member>
        <member name="M:itk.itkMeshBase.ComputeNumberOfIndices(System.UInt32)">
            <summary>Compute the number of indices for cells with the given number of points per cell.</summary>
            <remarks>This method is intended for use with GetCellIndicesAsArray(uint, IntPtr) to determine the space to allocate.</remarks>
        </member>
        <member name="M:itk.itkMeshBase.CellsHaveSameTypeAndNumberOfPoints">
            <summary>Return whether the cells are of the same type and have the same number of points.</summary>
        </member>
        <member name="P:itk.itkMeshBase.NumberOfCells">
            <summary>Get the number of cells comprising this mesh.</summary>
        </member>
        <member name="T:itk.itkMeshBase">
            <summary>
This abstract class is a managed replacement for itk::Mesh.
</summary>
            <remarks>
An N-dimensional mesh structure.
</remarks>
        </member>
        <member name="M:itk.itkImage_F2.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_F2.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_F2.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_F2.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_F2.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_F2.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_F2.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_F2.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_F2.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_F2.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_F2.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_F2.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_F2.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_F2.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_F2.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_F2.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_F2.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_F2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_F2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_F2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_F2.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_F2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_F2.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_F2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_F2.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_F2.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_F2.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_F2.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_F2.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_F2.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_F2.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_F2.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_F2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_F2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_F2.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_F2">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_UL3.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_UL3.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_UL3.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_UL3.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_UL3.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_UL3.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_UL3.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_UL3.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_UL3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_UL3.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_UL3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_UL3.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_UL3.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_UL3.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_UL3.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_UL3.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_UL3.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_UL3.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_UL3.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_UL3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_UL3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_UL3.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_UL3">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVSS33.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVSS33.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVSS33.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVSS33.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_CVSS33.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_CVSS33.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_CVSS33.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_CVSS33.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_CVSS33.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_CVSS33.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_CVSS33.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_CVSS33.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_CVSS33.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_CVSS33.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_CVSS33.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_CVSS33.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_CVSS33.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_CVSS33.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_CVSS33.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVSS33.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVSS33.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVSS33.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_CVSS33">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkSingleValuedNonLinearOptimizer.GetCostFunction(itk.itkSingleValuedCostFunction)">
            <summary>Get the cost function.</summary>
            <param name="function">The itkSingleValuedCostFunction to become the cost function.</param>
        </member>
        <member name="M:itk.itkSingleValuedNonLinearOptimizer.SetCostFunction(itk.itkSingleValuedCostFunction)">
            <summary>Set the cost function.</summary>
        </member>
        <member name="M:itk.itkSingleValuedNonLinearOptimizer.GetValue(itk.itkArray`1{System.Double})">
            <summary>Return the cost function value at the given parameters.</summary>
        </member>
        <member name="T:itk.itkSingleValuedNonLinearOptimizer">
            <summary>
This class is a managed replacement for itk::SingleValuedNonLinearOptimizer.
</summary>
        </member>
        <member name="M:itk.itkSingleValuedCostFunction.GetDerivative(itk.itkArray`1{System.Double})">
            <summary>Return the derivative of the cost function corresponding to the specified parameters.</summary>
        </member>
        <member name="M:itk.itkSingleValuedCostFunction.GetValue(itk.itkArray`1{System.Double})">
            <summary>Return the value of the cost function corresponding to the specified parameters.</summary>
        </member>
        <member name="T:itk.itkSingleValuedCostFunction">
            <summary>
This class is a managed replacement for itk::SingleValuedCostFunction.
</summary>
            <remarks>
ImageFunction is a baseclass for all cost functions returning a
single value.
</remarks>
        </member>
        <member name="P:itk.itkCostFunction.NumberOfParameters">
            <summary>Get the number of parameters required to compute the cost function.</summary>
        </member>
        <member name="T:itk.itkCostFunction">
            <summary>
This class is a managed replacement for itk::CostFunction.
</summary>
            <remarks>
ImageFunction is a baseclass for all cost functions intended
to be used with Optimizers.
</remarks>
        </member>
        <member name="T:itk.itkNonLinearOptimizer">
            <summary>
This class is a managed replacement for itk::NonLinearOptimizer.
</summary>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_RGBAUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_RGBAUC3.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_RGBAUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC3.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC3.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC3.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC3.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC3.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC3.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC3.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_RGBAUC3.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_RGBAUC3.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_RGBAUC3">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="T:itk.itkMultiThreader">
            <summary>
This class is a managed type instance for itk::MultiThreader.
</summary>
        </member>
        <member name="M:itk.itkImage_D3.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_D3.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_D3.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_D3.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_D3.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_D3.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_D3.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_D3.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_D3.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_D3.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_D3.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_D3.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_D3.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_D3.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_D3.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_D3.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_D3.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_D3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_D3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_D3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_D3.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_D3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_D3.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_D3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_D3.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_D3.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_D3.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_D3.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_D3.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_D3.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_D3.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_D3.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_D3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_D3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_D3.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_D3">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkSpatialObjectBase.GetChildren(System.UInt32)">
            <summary>
Returns a list of pointer to the children affiliated to this object.
A depth of 0 returns the immediate childred. A depth of 1 returns the
children and those children's children.
</summary>
        </member>
        <member name="M:itk.itkSpatialObjectBase.GetNumberOfChildren(System.UInt32)">
            <summary>
Return the number of children under this SpatialObject to the given depth.
</summary>
        </member>
        <member name="M:itk.itkSpatialObjectBase.GetNumberOfChildren">
            <summary>
Return the number of children directly under this SpatialObject.
</summary>
        </member>
        <member name="M:itk.itkSpatialObjectBase.Clear">
            <summary>
Clear the spatial object by deleting all lists of children and subchildren.
</summary>
        </member>
        <member name="M:itk.itkSpatialObjectBase.GetParent(itk.itkSpatialObjectBase)">
            <summary>
Set the native pointer of the given object to the parent object in the hierarchy tree.
</summary>
        </member>
        <member name="M:itk.itkSpatialObjectBase.RemoveSpatialObject(itk.itkSpatialObjectBase)">
            <summary>
Remove the object passed as arguments from the list of children.
</summary>
        </member>
        <member name="M:itk.itkSpatialObjectBase.AddSpatialObject(itk.itkSpatialObjectBase)">
            <summary>
Add an object to the list of children.
</summary>
        </member>
        <member name="M:itk.itkSpatialObjectBase.IsInside(itk.itkPoint)">
            <summary>
Returns true if a point is inside the object.
</summary>
        </member>
        <member name="M:itk.itkSpatialObjectBase.IsEvaluableAt(itk.itkPoint)">
            <summary>
Returns true if the object can provide a "meaningful" value at
a point. Often defaults to returning same answer as IsInside, but
certain objects influence space beyond their spatial extent.
</summary>
        </member>
        <member name="M:itk.itkSpatialObjectBase.ValueAt(itk.itkPoint,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the value at a point.
</summary>
        </member>
        <member name="M:itk.itkSpatialObjectBase.ComputeObjectToParentTransform">
            <summary>
Compute the Local transform when the global transform is set.
</summary>
        </member>
        <member name="M:itk.itkSpatialObjectBase.ComputeObjectToWorldTransform">
            <summary>
Compute the World transform when the local transform is set
This function should be called each time the local transform
has been modified.
</summary>
        </member>
        <member name="P:itk.itkSpatialObjectBase.Spacing">
            <summary>Get/set the spacing.</summary>
        </member>
        <member name="P:itk.itkSpatialObjectBase.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the SpatialObject currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkSpatialObjectBase.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the SpatialObject requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkSpatialObjectBase.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this SpatialObject could represent.
</summary>
        </member>
        <member name="P:itk.itkSpatialObjectBase.ObjectToParentTransform">
            <summary>Get/set the ObjectToParentTransform (a ScalableAffineTransform).</summary>
        </member>
        <member name="P:itk.itkSpatialObjectBase.ObjectToWorldTransform">
            <summary>Get/set the ObjectToWorldTransform (a ScalableAffineTransform).</summary>
        </member>
        <member name="P:itk.itkSpatialObjectBase.SpatialObjectTypeAsString">
            <summary>Get the SpatialObject type string.</summary>
        </member>
        <member name="P:itk.itkSpatialObjectBase.TypeName">
            <summary>Get the SpatialObject type string.</summary>
        </member>
        <member name="P:itk.itkSpatialObjectBase.ObjectDimension">
            <summary>Get the object dimensions.</summary>
        </member>
        <member name="T:itk.itkSpatialObjectBase">
            <summary>
This abstract class is a managed replacement for itk::SpatialObject.
</summary>
        </member>
        <member name="M:itk.itkTransform.TransformVector(itk.itkVector)">
            <summary>Apply the transform to a vector, mapping it from the input to the output space.</summary>
            <param name="vector">The vector to transform.</param>
            <returns>A new instance of the transformed point.</returns>
        </member>
        <member name="M:itk.itkTransform.TransformPoint(itk.itkPoint)">
            <summary>Apply the transform to a point, mapping it from the input to the output space.</summary>
            <param name="point">The point to transform.</param>
            <returns>A new instance of the transformed point.</returns>
        </member>
        <member name="M:itk.itkTransform.GetInverse(itk.itkTransform)">
            <summary>Return the inverse of the transform.</summary>
            <param name="inverse">The managed instance to become the inverse transform.</param>
            <returns>True if the inverse exists, false otherwise.</returns>
        </member>
        <member name="P:itk.itkTransform.Parameters">
            <summary>Get/set the transformation parameters.</summary>
        </member>
        <member name="P:itk.itkTransform.NumberOfParameters">
            <summary>Get the number of parameters that completely define the Transfom.</summary>
        </member>
        <member name="T:itk.itkTransform">
            <summary>
This abstract class is a managed replacement for itk::Transform.
</summary>
            <remarks>
Transform points and vector from an input space to an output space.
                                                                         
This abstract class define the generic interface for a geometrical
transformation from one space to another. The class provides methods
for mapping points, vectors and covariant vectors from the input space
to the output space.
                                                                         
Given that transformation are not necesarily invertible, this basic class
does not provide the methods for back transfromation. Back transform
methods are implemented in derived classes where appropriate.
</remarks>
        </member>
        <member name="P:itk.itkRadius.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
            <remarks>
This property is not applicable for itkRadius and will always get/set 0.
</remarks>
        </member>
        <member name="P:itk.itkRadius.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"R4", "R5".</example>
            <remarks>
This object can be passed to the New() methods to specify the type of
native itk object to create.
</remarks>
        </member>
        <member name="M:itk.itkRadius.#ctor(System.UInt32)">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:itk.itkRadius">
            <summary>
This class is used to specify an instance type using a radius.
</summary>
            <remarks>
It can be used to specify the instance type of itkWindowedSincInterpolateImageFunction.
</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VUC33.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VUC33.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VUC33.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VUC33.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VUC33.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VUC33.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VUC33.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VUC33.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VUC33.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VUC33.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VUC33.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VUC33.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VUC33.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VUC33.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VUC33.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VUC33.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VUC33.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VUC33.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VUC33.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC33.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VUC33.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VUC33.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VUC33">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VUC22.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VUC22.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VUC22.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VUC22.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VUC22.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VUC22.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VUC22.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VUC22.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VUC22.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VUC22.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VUC22.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VUC22.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VUC22.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VUC22.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VUC22.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VUC22.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VUC22.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VUC22.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VUC22.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VUC22.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VUC22.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VUC22.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VUC22">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkSegmentationLevelSetImageFilter.GenerateAdvectionImage">
            <summary>
Allocate and calculate the advection term image in the SegmentationFunction object.
This method is called automatically on filter execution unless 
AutoGenerateSpeedAdvection is set to Off.
</summary>
        </member>
        <member name="M:itk.itkSegmentationLevelSetImageFilter.GenerateSpeedImage">
            <summary>
Allocate and calculate the speed term image in the SegmentationFunction object.
This method is called automatically on filter execution unless 
AutoGenerateSpeedAdvection is set to Off.
</summary>
        </member>
        <member name="M:itk.itkSegmentationLevelSetImageFilter.GetAdvectionImage(itk.itkDataObject)">
            <summary>Return the image sampled as the advection term of the segmentation algorithm.</summary>
        </member>
        <member name="M:itk.itkSegmentationLevelSetImageFilter.SetAdvectionImage(itk.itkDataObject)">
            <summary>
This function is for advanced applications.
Set the image sampled as the advection term of this segmentation method.
In general, the advection image is generated automatically by a subclass of this filter.
</summary>
        </member>
        <member name="M:itk.itkSegmentationLevelSetImageFilter.GetSpeedImage(itk.itkDataObject)">
            <summary>Return the image sampled as the speed term of the segmentation algorithm.</summary>
        </member>
        <member name="M:itk.itkSegmentationLevelSetImageFilter.SetSpeedImage(itk.itkDataObject)">
            <summary>
This function is for advanced applications.
Set the image sampled as the speed term of this segmentation method.
In general, the speed image is generated automatically by a subclass of this filter.
</summary>
        </member>
        <member name="M:itk.itkSegmentationLevelSetImageFilter.GetFeatureImage(itk.itkDataObject)">
            <summary>
Get the feature image to be used for speed function of the level set equation.
Equivalent to calling GetInput(1, ..).
</summary>
        </member>
        <member name="M:itk.itkSegmentationLevelSetImageFilter.SetFeatureImage(itk.itkDataObject)">
            <summary>
Set the feature image to be used for speed function of the level set equation.
Equivalent to calling SetInput(1, ..).
</summary>
        </member>
        <member name="M:itk.itkSegmentationLevelSetImageFilter.SetInitialImage(itk.itkDataObject)">
            <summary>Set the initial level set model. Equivalent to calling SetInput(..).</summary>
        </member>
        <member name="P:itk.itkSegmentationLevelSetImageFilter.MaximumPropagationTimeStep">
            <summary>
Get/set the maximum constraint for the scalar/vector term factor of the time step calculation.
Changing this value from the default is not recommended or necessary but could be used to 
speed up the surface evolution at the risk of creating an unstable solution.
</summary>
        </member>
        <member name="P:itk.itkSegmentationLevelSetImageFilter.MaximumCurvatureTimeStep">
            <summary>
Get/set the maximum constraint for the curvature term factor in the time step calculation.
Changing this value from the default is not recommended or necessary but could be used 
to speed up the surface evolution at the risk of creating an unstable solution.
</summary>
        </member>
        <member name="P:itk.itkSegmentationLevelSetImageFilter.UseMinimalCurvature">
            <summary>
No documentation provided in Code/Algorithms/itkSegmentationLevelSetImageFilter.h
</summary>
        </member>
        <member name="P:itk.itkSegmentationLevelSetImageFilter.CurvatureScaling">
            <summary>
Get/set the scaling of the curvature. 
Use this parameter to increase the influence of curvature on the movement of the surface.
Higher values relative to Advection and Propagation values will give smoother surfaces.
</summary>
        </member>
        <member name="P:itk.itkSegmentationLevelSetImageFilter.AdvectionScaling">
            <summary>
Get/set the scaling of the advection field.
Setting the FeatureScaling parameter will override any existing value for AdvectionScaling.
</summary>
        </member>
        <member name="P:itk.itkSegmentationLevelSetImageFilter.PropagationScaling">
            <summary>
Get/set the scaling of the propagation speed.
Setting the FeatureScaling parameter overrides any previous values set for PropagationScaling.
</summary>
        </member>
        <member name="P:itk.itkSegmentationLevelSetImageFilter.FeatureScaling">
            <summary>
Set the combined scaling of the propagation and advection speed terms.
You should use either this -or- Get/SetPropagationScaling and
Get/SetAdvectionScaling (if appropriate).  See subclasses for details
on when and whether to set these parameters.
</summary>
        </member>
        <member name="P:itk.itkSegmentationLevelSetImageFilter.AutoGenerateSpeedAdvection">
            <summary>
Turn On/Off automatic generation of Speed and Advection terms when Update
is called. If set to Off, the Speed and Advection images must be set
explicitly using SetSpeedImage, SetAdvectionImage OR the methods
GenerateSpeedImage() and GenerateAdvectionImage() should be called prior
to updating the filter.
</summary>
        </member>
        <member name="P:itk.itkSegmentationLevelSetImageFilter.ReverseExpansionDirection">
            <summary>
Turn On/Off the flag which determines whether Positive or Negative speed
terms will cause surface expansion. If set to TRUE then negative speed
terms will cause the surface to expand and positive speed terms will cause
the surface to contract. If set to FALSE (default) then positive speed terms
will cause the surface to expand and negative speed terms will cause the
surface to contract. This method can be safely used to reverse the
expansion/contraction as appropriate to a particular application or data set/
</summary>
        </member>
        <member name="M:itk.itkSegmentationLevelSetImageFilter.#ctor(System.String)">
            <summary>Protected constructor.</summary>
            <param name="name">A string representing the name of the ProcessObject.</param>
        </member>
        <member name="T:itk.itkSegmentationLevelSetImageFilter">
            <summary>
This class is a managed replacement for itk::SegmentationLevelSetImageFilter.
</summary>
            <remarks>
This object defines the framework for a class of segmentation filters which
use level set methods.  These filters work by constructing a "feature image"
onto which the evolving level set locks as it moves.  In the feature image,
values that are close to zero are associated with object boundaries.  An
original (or preprocessed) image is given to the filter as the feature image
and a seed for the level set is given as the input of the filter.  The seed is
converted into a level set embedding which propagates according to the features
calculated from the original image.
</remarks>
        </member>
        <member name="M:itk.itkOptimizer.StartOptimization">
            <summary>Start the optimization algorithm.</summary>
        </member>
        <member name="P:itk.itkOptimizer.CurrentPosition">
            <summary>Get the current position of the optimization.</summary>
        </member>
        <member name="P:itk.itkOptimizer.Scales">
            <summary>Get/set the parameter scaling.</summary>
        </member>
        <member name="P:itk.itkOptimizer.InitialPosition">
            <summary>Get/set the position to initialize the optimization.</summary>
        </member>
        <member name="T:itk.itkOptimizer">
            <summary>
This class is a managed replacement for itk::Optimizer.
</summary>
            <remarks>
Optimizer is a generic representation for an optimization method.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVD22.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_CVD22.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVD22.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_CVD22.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_CVD22.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_CVD22.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_CVD22.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_CVD22.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_CVD22.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_CVD22.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_CVD22.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_CVD22.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_CVD22.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_CVD22.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_CVD22.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_CVD22.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_CVD22.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_CVD22.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_CVD22.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_CVD22.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVD22.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_CVD22.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_CVD22">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkNeighborhoodOperator.CreateDirectional">
            <summary>
Creates the operator with length only in the specified direction. 
The radius of the operator will be 0 except along the axis on which
the operator will work.
</summary>
        </member>
        <member name="P:itk.itkNeighborhoodOperator.Direction">
            <summary>Get/set the dimensional direction (dimension number) of a directional operator.</summary>
        </member>
        <member name="M:itk.itkNeighborhoodOperator.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:itk.itkNeighborhoodOperator">
            <summary>
This class is a managed wrapper for itk::Neighborhood.
</summary>
        </member>
        <member name="M:itk.itkNeighborhood.GetEnumerator">
            <summary>Implement the IEnumerable interface.</summary>
        </member>
        <member name="M:itk.itkNeighborhood.op_Subscript(System.UInt32)">
            <summary>Allow index access to the buffer.</summary>
        </member>
        <member name="M:itk.itkNeighborhood.GetElement(System.UInt32)">
            <summary>Returns pixel value in the buffer at the given index.</summary>
        </member>
        <member name="M:itk.itkNeighborhood.GetCenterNeighborhoodIndex">
            <summary>Returns the array index of the center element.</summary>
        </member>
        <member name="M:itk.itkNeighborhood.GetNeighborhoodIndex(itk.itkOffset)">
            <summary>Returns the array index of the element at the given offset.</summary>
        </member>
        <member name="M:itk.itkNeighborhood.GetCenterValue">
            <summary>Returns the element at the center of the neighborhood.</summary>
        </member>
        <member name="M:itk.itkNeighborhood.GetSize(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary>Returns the size (total length) of the neighborhood along a specified dimension.</summary>
        </member>
        <member name="M:itk.itkNeighborhood.GetRadius(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
            <summary>Returns the radius of the neighborhood along a specified dimension.</summary>
        </member>
        <member name="P:itk.itkNeighborhood.Radius">
            <summary>Get/set the radius of the neighborhood.</summary>
        </member>
        <member name="P:itk.itkNeighborhood.Size">
            <summary>Get the size (the total length of the sides) of the neighborhood.</summary>
        </member>
        <member name="P:itk.itkNeighborhood.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IUC2IUC2".</example>
        </member>
        <member name="P:itk.itkNeighborhood.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkNeighborhood.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:itk.itkNeighborhood">
            <summary>
This class is a managed wrapper for itk::Neighborhood.
</summary>
        </member>
        <member name="M:itk.itkImageIterator.Set(itk.itkPixel)">
            <summary>Set the pixel value at the current iterator location.</summary>
        </member>
        <member name="M:itk.itkImageIterator.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:itk.itkImageIterator">
            <summary>
This class is a managed wrapper for itk::ImageIterator.
</summary>
        </member>
        <member name="M:itk.itkImageConstIterator.GetEnumerator">
            <summary>Implement the IEnumerable interface.</summary>
        </member>
        <member name="M:itk.itkImageConstIterator.op_Decrement">
            <summary>Decrement the iterator.</summary>
        </member>
        <member name="M:itk.itkImageConstIterator.op_Increment">
            <summary>Increment the iterator.</summary>
        </member>
        <member name="M:itk.itkImageConstIterator.GoToEnd">
            <summary>Move the iterator to the ending location.</summary>
        </member>
        <member name="M:itk.itkImageConstIterator.GoToBegin">
            <summary>Move the iterator to the beginning location.</summary>
        </member>
        <member name="M:itk.itkImageConstIterator.Get">
            <summary>Get the pixel value at the current iterator location.</summary>
        </member>
        <member name="P:itk.itkImageConstIterator.IsAtEnd">
            <summary>Gets if the iterator is at the end of the region to iterate.</summary>
        </member>
        <member name="P:itk.itkImageConstIterator.IsAtBegin">
            <summary>Gets if the iterator is at the beginning of the region to iterate.</summary>
        </member>
        <member name="P:itk.itkImageConstIterator.Image">
            <summary>Get the image this iterator walks.</summary>
        </member>
        <member name="P:itk.itkImageConstIterator.Region">
            <summary>Get the image region this iterator walks.</summary>
        </member>
        <member name="P:itk.itkImageConstIterator.Index">
            <summary>
Get/set the index at the current iterator location.
Iterators NOT in the "WithIndex" family calculate the index on demand (expensive call).
Iterators in the "WithIndex" family maintain the index during operation (inexpensive call).
</summary>
        </member>
        <member name="P:itk.itkImageConstIterator.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IUC2IUC2".</example>
        </member>
        <member name="P:itk.itkImageConstIterator.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkImageConstIterator.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:itk.itkImageConstIterator">
            <summary>
This class is a managed wrapper for itk::ImageIterator.
</summary>
        </member>
        <member name="M:itk.itkImage_D2.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_D2.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_D2.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_D2.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_D2.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_D2.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_D2.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_D2.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_D2.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_D2.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_D2.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_D2.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_D2.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_D2.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_D2.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_D2.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_D2.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_D2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_D2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_D2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_D2.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_D2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_D2.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_D2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_D2.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_D2.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_D2.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_D2.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_D2.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_D2.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_D2.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_D2.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_D2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_D2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_D2.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_D2">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="P:itk.itkFiniteDifferenceImageFilter.RMSChange">
            <summary>
Get/set the root mean squared change of the previous iteration.
May not be used by all solvers.
</summary>
        </member>
        <member name="P:itk.itkFiniteDifferenceImageFilter.MaximumRMSError">
            <summary>
Get/set the maximum error allowed in the solution. 
This may not be defined for all solvers and its meaning may change with the application.
</summary>
        </member>
        <member name="P:itk.itkFiniteDifferenceImageFilter.UseImageSpacing">
            <summary>
Get/set if the image spacing information is used in calculations. 
Use this option if you want derivatives in physical space.
</summary>
            <remarks>Default is UseImageSpacingOff (ie. UseImageSpacing=False).</remarks>
        </member>
        <member name="P:itk.itkFiniteDifferenceImageFilter.NumberOfIterations">
            <summary>
Get/set the maximum number of iterations that the filter will run.
</summary>
        </member>
        <member name="P:itk.itkFiniteDifferenceImageFilter.ElapsedIterations">
            <summary>
Get the number of elapsed iterations of the filter.
</summary>
        </member>
        <member name="M:itk.itkFiniteDifferenceImageFilter.#ctor(System.String)">
            <summary>Default constructor.</summary>
            <param name="name">A string representing the name of the ProcessObject.</param>
        </member>
        <member name="T:itk.itkFiniteDifferenceImageFilter">
            <summary>
This class is a managed replacement for itk::FiniteDifferenceImageFilter.
</summary>
            <remarks>
This class defines the generic solver API at the top level of the Finite
Difference Solver (FDS) framework. FiniteDifferenceImageFilter is an 
abstract class that implements the generic, high-level algorithm.
</remarks>
        </member>
        <member name="M:itk.itkImageToImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkImageToImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkImageToImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkImageToImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkImageToImageFilter.#ctor(System.String)">
            <summary>Default constructor.</summary>
            <param name="name">A string representing the name of the ProcessObject.</param>
        </member>
        <member name="T:itk.itkImageToImageFilter">
            <summary>
This class is a managed replacement for itk::ImageToImageFilter.
</summary>
            <remarks>
ImageToImageFilter is the base class for all process objects that output
image data and require image data as input. Specifically, this class    
defines the SetInput() method for defining the input to a filter.       
</remarks>
        </member>
        <member name="M:itk.itkImageSource.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkImageSource.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkImageSource.#ctor(System.String)">
            <summary>Protected constructor.</summary>
            <param name="name">A string representing the name of the ProcessObject.</param>
        </member>
        <member name="T:itk.itkImageSource">
            <summary>
This class is a managed replacement for itk::ImageSource.
</summary>
            <remarks>
ImageSource is the base class for all ProcessObjects that output
image data. Specifically, this class defines the GetOutput() method
that returns a pointer to the output image.
</remarks>
        </member>
        <member name="M:itk.itkProcessObject.InvokeProgressEvent(itk.itkProgressEventArgs)">
            <summary>Invoke the Progress event.</summary>
        </member>
        <member name="M:itk.itkProcessObject.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkProcessObject.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkProcessObject.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="E:itk.itkProcessObject.Progress">
            <summary>An event which is raised when the progress of the process is updated.</summary>
        </member>
        <member name="P:itk.itkProcessObject.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkProcessObject.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkProcessObject.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkProcessObject.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkProcessObject.Name">
            <summary>Get/set a string describing the process object.</summary>
        </member>
        <member name="M:itk.itkProcessObject.#ctor(System.String)">
            <summary>Protected constructor.</summary>
            <param name="name">A string representing the name of the ProcessObject.</param>
        </member>
        <member name="T:itk.itkProgressHandler">
            <summary>A delegate for events sent from an itkProcessObject, with a progress value between 0.0 and 1.0.</summary>
        </member>
        <member name="P:itk.itkProgressEventArgs.ProgressAsPercentage">
            <summary>Get the current progress as a percentage, rounded to the nearest integer value.</summary>
        </member>
        <member name="P:itk.itkProgressEventArgs.Progress">
            <summary>Get the current progress as a fraction (ie. 0.03 = 3 %).</summary>
        </member>
        <member name="M:itk.itkProgressEventArgs.#ctor(System.Single)">
            <summary>Default constructor.</summary>
            <param name="progress">The fractional progress of the process object (ie. 0.03 = 3%)</param>
        </member>
        <member name="T:itk.itkProgressEventArgs">
            <summary>
EventArgs subclass holding the current progress of a process object.
Provides a convient method which converts the fractional progress to an integer percentage.
</summary>
        </member>
        <member name="T:itk.itkProcessObject">
Forward reference to itkProcessObject 
<summary>
This abstract class is a managed replacement for itk::ProcessObject.
</summary><remarks>
ProcessObject is an abstract object that specifies behavior and
interface of network process objects (sources, filters, mappers).
Source objects are creators of visualization data; filters input,
process, and output image data; and mappers transform data into
another form (like transforming coordinates or writing data to a file).

A major role of ProcessObject is to define the inputs and outputs of
a filter. More than one input and/or output may exist for a given filter.
Some classes (e.g., source objects or mapper objects) will not use inputs
(the source) or outputs (mappers). In this case, the inputs or outputs is 
just ignored.                                    
</remarks></member>
        <member name="M:itk.itkImage_VSS33.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VSS33.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_VSS33.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VSS33.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_VSS33.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_VSS33.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_VSS33.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_VSS33.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_VSS33.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_VSS33.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS33.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS33.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS33.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS33.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS33.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS33.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS33.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS33.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_VSS33.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_VSS33.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_VSS33.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_VSS33.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_VSS33.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_VSS33.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_VSS33.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_VSS33.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_VSS33.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_VSS33.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_VSS33.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_VSS33.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_VSS33.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_VSS33.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_VSS33.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VSS33.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_VSS33.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_VSS33">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkPointSetBase.SetPointsAsArray(System.UInt32,System.IntPtr)">
            <summary>Set the array of points from the given memory location.</summary>
            <param name="numberOfPoints">The number of points in the array. The array will have (numberOfPoints * PointDimension) values.</param>
            <param name="arrayptr">The memory location to read the points. It is the caller's responsiblity to ensure the array has the correct number of values.</param>
        </member>
        <member name="M:itk.itkPointSetBase.SetPointsAsArray(itk.itkPoint[])">
            <summary>Set the array of points from the given managed array.</summary>
            <param name="array">The managed array of points to add to the point set.</param>
        </member>
        <member name="M:itk.itkPointSetBase.GetPointsAsArray(System.IntPtr)">
            <summary>Copy the array of points from the mesh to the given memory location.</summary>
            <param name="arrayptr">The memory location to write the points. It is the caller's responsiblity to ensure enough memory has been allocated.</param>
        </member>
        <member name="M:itk.itkPointSetBase.GetPointsAsArray">
            <summary>Return a managed array of points.</summary>
            <remarks>This method steps through the points array and duplicates each point in to managed memory. It operates irrespective of the mesh traits.</remarks>
        </member>
        <member name="M:itk.itkPointSetBase.GetPoints">
            <summary>Return the pointer to the native PointsContainer.</summary>
        </member>
        <member name="P:itk.itkPointSetBase.NumberOfPoints">
            <summary>Get the number of points comprising this set.</summary>
        </member>
        <member name="T:itk.itkPointSetBase">
            <summary>
This abstract class is a managed replacement for itk::PointSet.
</summary>
            <remarks>
A superclass of the N-dimensional mesh structure.
</remarks>
        </member>
        <member name="P:itk.itkMeshTraits.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
            <remarks>
This property is not applicable for itkMeshTraits and will always get/set 0.
</remarks>
        </member>
        <member name="P:itk.itkMeshTraits.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"S", "D".</example>
            <remarks>
This object can be passed to the New() methods to specify the type of
native itk object to create.
</remarks>
        </member>
        <member name="P:itk.itkMeshTraits.Type">
            <summary>Get the mesh traits type, static or dynamic.</summary>
        </member>
        <member name="M:itk.itkMeshTraits.#ctor(itk.itkMeshTraits.MeshTraitsEnum)">
            <summary>Default constructor accepting the mesh traits type.</summary>
        </member>
        <member name="M:itk.itkMeshTraits.Dynamic">
            <summary>Create a dynamic mesh traits object.</summary>
        </member>
        <member name="M:itk.itkMeshTraits.Static">
            <summary>Create a static mesh traits object.</summary>
        </member>
        <member name="T:itk.itkMeshTraits.MeshTraitsEnum">
            <summary>A managed enumerated type for the mesh traits type.</summary>
        </member>
        <member name="T:itk.itkMeshTraits">
            <summary>
This class is used to specify an instance type for MeshTraits.
</summary>
            <remarks>
It can be used to specify the instance type of itkPointSet and itkMesh to create.
</remarks>
        </member>
        <member name="M:itk.itkImage_US2.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_US2.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImage_US2.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_US2.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImage_US2.DisconnectPipeline">
            <summary>Separate this image from the pipeline.</summary>
            <remarks>
This method disconnects the image from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this image.
To completely isolate this image from the pipeline, the application must
remove this image from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="M:itk.itkImage_US2.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImage_US2.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImage_US2.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImage_US2.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImage_US2.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_US2.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_US2.Write(System.String)">
            <summary>Write the image to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_US2.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_US2.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read. If the given seriesid is empty, the first found identifier is used.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_US2.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_US2.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_US2.Read(System.String)">
            <summary>Read the image from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="M:itk.itkImage_US2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkImage_US2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkImage_US2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkImage_US2.New">
            <summary>Create an instance of the underlying native itk::Image.</summary>
            <remarks>
Either Read(), Write(), or Allocate() must be called to
populate the underlying native itk::Image.
</remarks>
        </member>
        <member name="P:itk.itkImage_US2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this type instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkImage_US2.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="P:itk.itkImage_US2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkImage_US2.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImage_US2.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImage_US2.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImage_US2.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImage_US2.LargestPossibleRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImage_US2.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImage_US2.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImage_US2.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImage_US2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_US2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImage_US2.#ctor(itk.itkPixelType,System.UInt32)">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImage_US2">
            <summary>
This class is a managed type instance wrapper for itk::Image. 
</summary>
            <remarks>
Images are defined by a pixel type (modeling the dependent variables),
and a dimension (number of independent variables). 
An image is modeled as an array, defined by a start index and a size.
The underlying array can be accessed via the Buffer property.

There are three sets of meta-data describing an image. These are "Region"
objects that define a portion of an image via a starting index for the image
array and a size. The ivar LargestPossibleRegion defines the size and
starting index of the image dataset. The entire image dataset, however,
need not be resident in memory. The region of the image that is resident in
memory is defined by the "BufferedRegion". The Buffer is a contiguous block
of memory.  The third set of meta-data defines a region of interest, called
the "RequestedRegion". The RequestedRegion is used by the pipeline
execution model to define what a filter is requested to produce.
</remarks>
        </member>
        <member name="M:itk.itkImageBase.ToString">
            <summary>
Create a string representation of the image in the following format:
  "Size=[XX, XX, ..] Spacing=[XX, XX, ..] PixelType=ThePixelType"
</summary>
            <returns>A string representation of the image including Size, Spacing, and PixelType.</returns>
        </member>
        <member name="M:itk.itkImageBase.TransformIndexToPhysicalPoint(itk.itkIndex,itk.itkPoint@)">
            <summary>Convert a discrete index to a physical point.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImageBase.TransformContinuousIndexToPhysicalPoint(itk.itkContinuousIndex,itk.itkPoint@)">
            <summary>Convert a continuous index to a physical point.</summary>
            <param name="cindex">The continuous location in image space.</param>
            <param name="point">The resultant geometric location in physical space.</param>
        </member>
        <member name="M:itk.itkImageBase.TransformPhysicalPointToIndex(itk.itkPoint,itk.itkIndex@)">
            <summary>Convert a physical point to a discrete index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="index">The resultant discrete location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImageBase.TransformPhysicalPointToContinuousIndex(itk.itkPoint,itk.itkContinuousIndex@)">
            <summary>Convert a physical point to a continuous index.</summary>
            <param name="point">The geometric location in physical space.</param>
            <param name="cindex">The resultant continuous location in image space.</param>
            <returns>true if the resulting index is within the image, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImageBase.SetPixel(itk.itkIndex,itk.itkPixel)">
            <summary>Set the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:itk.itkImageBase.GetPixel(itk.itkIndex)">
            <summary>Returns the pixel value at the given discrete location.</summary>
            <param name="index">The discrete location in image space.</param>
            <returns>The pixel value at the given discrete location.</returns>
        </member>
        <member name="M:itk.itkImageBase.WriteSeries(System.String,System.String)">
            <summary>Write an image series to the files matching the given format.</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <param name="seriesFormat">A format string for the series numbers. Eg. "000".</param>
            <example>filenameFormat="C:/temp/test_{0}.png" and seriesFormat="000".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImageBase.WriteSeries(System.String)">
            <summary>Write an image series to the files matching the given format. The seriesFormat is "000".</summary>
            <param name="filenameFormat">The absolute path and filename format for the images. Eg. C:/temp/test_{0}.png.</param>
            <example>filenameFormat="C:/temp/test_{0}.png".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImageBase.ReadDicomDirectory(System.String,System.String,System.String[])">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <param name="restrictions">Specifies additional DICOM information to distinguish unique volumes within the directory. Eg. "0008|0021" distinguishes series based on date.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImageBase.ReadDicomDirectory(System.String,System.String)">
            <summary>Read an image from the given DICOM directory using GDCM.</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <param name="seriesid">The identifier of the series to read.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImageBase.ReadDicomDirectory(System.String)">
            <summary>
Read an image from the given DICOM directory using GDCM.
This method uses the first found series identifier.
</summary>
            <param name="directory">The directory containing the DICOM series.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImageBase.ReadSeries(System.String,System.String)">
            <summary>Read an image series from the files matching the given pattern.</summary>
            <param name="path">An absolute path to search for the files comprising the series.</param>
            <param name="pattern">A pattern with wildcard character '*'.</param>
            <example>path="C:/temp/", pattern="test_*.png".</example>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImageBase.ReadSeries(System.String[])">
            <summary>Read an image series from the given filenames.</summary>
            <param name="filenames">An array of absolute file paths.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImageBase.ReadInformation(System.String)">
            <summary>Read and return the image information.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <returns>An itkImageInformation structure containing the dimensions, pixeltype,
size, spacing, etc. of the given image.</returns>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkImageBase.FillBuffer(itk.itkPixel)">
            <summary>
Fills the image data with the given value.
The image regions must be set before calling this method and
the image must have been allocated.
</summary>
            <param name="value">The pixel value to fill the image.</param>
        </member>
        <member name="M:itk.itkImageBase.SetRegions(itk.itkImageRegion)">
            <summary>
Convenience method to set the LargestPossibleRegion, BufferedRegion and RequestedRegion.
</summary>
            <param name="regions">The image region specifying the largest, requested, and buffered size.</param>
            <remarks>
This method does not allocate the image, use Allocate for that purpose.
</remarks>
        </member>
        <member name="M:itk.itkImageBase.Allocate">
            <summary>
Allocates the memory for an empty image.
This is the method to use to create an image from scratch (ie. not from IO).
The regions MUST have been set: call SetRegions() before calling this method.
The buffer is NOT initialised: call FillBuffer() after calling this method.
</summary>
            <remarks>This method finalises the creation of the underlying native itk::Image.</remarks>
        </member>
        <member name="P:itk.itkImageBase.Direction">
            <summary>Get the direction cosines of the image. The direction cosines are vectors that point from one pixel to the next.</summary>
        </member>
        <member name="P:itk.itkImageBase.Buffer">
            <summary>Get the pointer to the underlying image data array.</summary>
        </member>
        <member name="P:itk.itkImageBase.BufferedRegion">
            <summary>
Get/set the region object that defines the size and starting index
of the region of the image currently loaded in memory.
</summary>
        </member>
        <member name="P:itk.itkImageBase.RequestedRegion">
            <summary>
Get/set the region object that defines the size and starting index
for the region of the image requested (i.e., the region of the
image to be operated on by a filter). Setting the RequestedRegion
does not cause the object to be modified.
</summary>
        </member>
        <member name="P:itk.itkImageBase.LargestPossibleRegion">
            <summary>
Get the region object that defines the size and starting index
for the largest possible region this image could represent.
</summary>
        </member>
        <member name="P:itk.itkImageBase.Origin">
            <summary>Get/set the origin of the image in physical space.</summary>
        </member>
        <member name="P:itk.itkImageBase.Spacing">
            <summary>Get/set the spacing between pixels of the image.</summary>
        </member>
        <member name="P:itk.itkImageBase.PhysicalSize">
            <summary>
Get the physical size of the image of the image (element-wise multiplication
of Size and Spacing).
</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="P:itk.itkImageBase.Size">
            <summary>Get the size of the image (from the LargestPossibleRegion).</summary>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="P:itk.itkImageBase.Dimension">
            <summary>Get the number of dimensions this image contains.</summary>
            <remarks>
In native itk, images are templated over the number of dimensions: VDimension.
In ManagedITK, to allow for the specification of image types at runtime,
this property was introduced.
</remarks>
        </member>
        <member name="P:itk.itkImageBase.PixelType">
            <summary>Get the type of pixel this image contains.</summary>
            <remarks>
In native itk, images are templated over the pixel type: TPixel (eg. unsigned
char, float, etc). In ManagedITK, to allow for the specification of image types
at runtime, the itkPixelType and itkPixel classes were introduced.
</remarks>
        </member>
        <member name="M:itk.itkImageBase.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkImageBase.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkImageBase">
            <summary>
This class is a managed wrapper for itk::ImageBase.
</summary>
        </member>
        <member name="P:itk.itkImageInformation.Origin">
            <summary>Get the origin of the image.</summary>
        </member>
        <member name="P:itk.itkImageInformation.Spacing">
            <summary>Get the spacing of the image.</summary>
        </member>
        <member name="P:itk.itkImageInformation.Size">
            <summary>Get the size of the image.</summary>
        </member>
        <member name="P:itk.itkImageInformation.Dimension">
            <summary>Get the dimensionality of the image.</summary>
        </member>
        <member name="P:itk.itkImageInformation.PixelType">
            <summary>Get the pixel type of the image.</summary>
        </member>
        <member name="M:itk.itkImageInformation.#ctor(itk.itkPixelType,System.UInt32,itk.itkSize,itk.itkSpacing,itk.itkPoint)">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:itk.itkImageInformation">
            <summary>
This structures holds information regarding the image dimension, pixeltype,
size, spacing, etc.
</summary>
            <remarks>This class was added to ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkExceptionObject.ToString">
            <summary>Returns a string representation of the itkExceptionObject.</summary>
            <returns>A string representation similar the native itk::ExceptionObject::Print() method.</returns>
        </member>
        <member name="P:itk.itkExceptionObject.Line">
            <summary>Gets the name of the source ode file from which the exception was thrown.</summary>
        </member>
        <member name="P:itk.itkExceptionObject.File">
            <summary>Gets the name of the source ode file from which the exception was thrown.</summary>
        </member>
        <member name="P:itk.itkExceptionObject.Location">
            <summary>Gets the method location where the exception was thrown.</summary>
        </member>
        <member name="P:itk.itkExceptionObject.Description">
            <summary>Gets the description. This is the same as the Message.</summary>
        </member>
        <member name="M:itk.itkExceptionObject.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
            <summary>Constructor taking std::string components.</summary>
            <param name="desc">The native exception description.</param>
            <param name="loc">The native exception location.</param>
            <param name="file">The file the naive exception was raised from.</param>
            <param name="line">The line the naive exception was raised from.</param>
        </member>
        <member name="M:itk.itkExceptionObject.#ctor(System.String,System.String,System.String,System.UInt32)">
            <summary>Constructor taking managed components.</summary>
            <param name="desc">The native exception description.</param>
            <param name="loc">The native exception location.</param>
            <param name="file">The file the naive exception was raised from.</param>
            <param name="line">The line the naive exception was raised from.</param>
        </member>
        <member name="M:itk.itkExceptionObject.#ctor(itk.ExceptionObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Constructor taking a native itk::ExceptionObject.</summary>
            <param name="ex">The native itk::ExceptionObject.</param>
        </member>
        <member name="T:itk.itkExceptionObject">
            <summary>
A managed wrapper for itk::ExceptionObjects.
</summary>
        </member>
        <member name="M:itk.itkDataObjectWithReadWrite.Write(System.String)">
            <summary>Write the DataObject to the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkDataObjectWithReadWrite.Read(System.String)">
            <summary>Read the DataObject from the given file.</summary>
            <param name="filename">The relative or absolute file path and name.</param>
            <remarks>This method was added in ManagedITK for simplicity.</remarks>
        </member>
        <member name="M:itk.itkDataObjectWithReadWrite.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkDataObjectWithReadWrite">
            <summary>
This class is a managed helper adding Read() and Write() methods to an itkDataObject.
</summary>
            <remarks>
A DataObject is an object that represents and provides access to data.
ProcessObjects (i.e., filters) operate on input data objects,
producing new data objects as output. ProcessObject and DataObject
are connected together into data flow pipelines.
</remarks>
        </member>
        <member name="M:itk.itkDataObject.DisconnectPipeline">
            <summary>Separate this data object from the pipeline.</summary>
            <remarks>
This method disconnects a data object from the upstream pipeline.
Hence an Update() from downstream will not propagate back past this data object.
To completely isolate this data object from the pipeline, the application must
remove this data object from any filters which it is connected as the input.
</remarks>
        </member>
        <member name="P:itk.itkDataObject.Name">
            <summary>Get/set a string describing the data object (typically an abosolute file name).</summary>
        </member>
        <member name="M:itk.itkDataObject.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkDataObject">
            <summary>
This class is a managed replacement for itk::DataObject.
</summary>
            <remarks>
A DataObject is an object that represents and provides access to data.
ProcessObjects (i.e., filters) operate on input data objects,
producing new data objects as output. ProcessObject and DataObject
are connected together into data flow pipelines.
</remarks>
        </member>
        <member name="M:itk.itkObjectCommand.Execute(itk.Object*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the native ITK event is raised. 
</member>
        <member name="M:itk.itkObjectCommand.SetManagedObject(msclr.gcroot&lt;itk.itkObject&gt;)">
Method: Set the managed object for which the events should be 
    * passed along to. 

</member>
        <member name="T:itk.itkObjectCommand">
            <summary>
A native itk::Command which raises managed events on the internal
managed itkObject.
</summary>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.VariableLengthVector&lt;System.Double&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.VariableLengthVector&lt;System.Single&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.VariableLengthVector&lt;System.Int16&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.VariableLengthVector&lt;System.UInt16&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.VariableLengthVector&lt;System.SByte&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.VariableLengthVector&lt;System.Byte&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Double,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Double,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Single,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Single,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Int16,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Int16,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.UInt16,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.UInt16,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.SByte,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.SByte,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Byte,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Byte,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Double,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Double,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Single,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Single,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Int16,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Int16,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.UInt16,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.UInt16,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.SByte,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.SByte,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Byte,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Byte,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.RGBAPixel&lt;System.UInt16&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.RGBAPixel&lt;System.Byte&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.RGBPixel&lt;System.UInt16&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.RGBPixel&lt;System.Byte&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.RGBAPixel&lt;System.UInt16&gt;}(itk.RGBAPixel&lt;System.UInt16&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.RGBAPixel&lt;System.Byte&gt;}(itk.RGBAPixel&lt;System.Byte&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.RGBPixel&lt;System.UInt16&gt;}(itk.RGBPixel&lt;System.UInt16&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.RGBPixel&lt;System.Byte&gt;}(itk.RGBPixel&lt;System.Byte&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.VariableLengthVector&lt;System.Double&gt;}(itk.VariableLengthVector&lt;System.Double&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.VariableLengthVector&lt;System.Single&gt;}(itk.VariableLengthVector&lt;System.Single&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.VariableLengthVector&lt;System.Int16&gt;}(itk.VariableLengthVector&lt;System.Int16&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.VariableLengthVector&lt;System.UInt16&gt;}(itk.VariableLengthVector&lt;System.UInt16&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.VariableLengthVector&lt;System.Byte&gt;}(itk.VariableLengthVector&lt;System.Byte&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Double,0x3&gt;}(itk.CovariantVector&lt;System.Double,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Double,0x2&gt;}(itk.CovariantVector&lt;System.Double,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Single,0x3&gt;}(itk.CovariantVector&lt;System.Single,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Single,0x2&gt;}(itk.CovariantVector&lt;System.Single,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Int16,0x3&gt;}(itk.CovariantVector&lt;System.Int16,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Int16,0x2&gt;}(itk.CovariantVector&lt;System.Int16,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.UInt16,0x3&gt;}(itk.CovariantVector&lt;System.UInt16,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.UInt16,0x2&gt;}(itk.CovariantVector&lt;System.UInt16,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.SByte,0x3&gt;}(itk.CovariantVector&lt;System.SByte,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.SByte,0x2&gt;}(itk.CovariantVector&lt;System.SByte,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Byte,0x3&gt;}(itk.CovariantVector&lt;System.Byte,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Byte,0x2&gt;}(itk.CovariantVector&lt;System.Byte,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Double,0x3&gt;}(itk.Vector&lt;System.Double,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Double,0x2&gt;}(itk.Vector&lt;System.Double,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Single,0x3&gt;}(itk.Vector&lt;System.Single,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Single,0x2&gt;}(itk.Vector&lt;System.Single,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Int16,0x3&gt;}(itk.Vector&lt;System.Int16,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Int16,0x2&gt;}(itk.Vector&lt;System.Int16,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.UInt16,0x3&gt;}(itk.Vector&lt;System.UInt16,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.UInt16,0x2&gt;}(itk.Vector&lt;System.UInt16,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.SByte,0x3&gt;}(itk.Vector&lt;System.SByte,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.SByte,0x2&gt;}(itk.Vector&lt;System.SByte,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Byte,0x3&gt;}(itk.Vector&lt;System.Byte,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Byte,0x2&gt;}(itk.Vector&lt;System.Byte,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.Boolean}(System.Boolean)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.Double}(System.Double)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.Single}(System.Single)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.Int32!System.Runtime.CompilerServices.IsLong}(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.UInt32!System.Runtime.CompilerServices.IsLong}(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.Int16}(System.Int16)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.UInt16}(System.UInt16)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.SByte}(System.SByte)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.Byte}(System.Byte)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedQuaternion(vnl_quaternion&lt;System.Double&gt;)">
            <summary>Convert a native Quaternion to a managed Quaternion.</summary>
        </member>
        <member name="M:itk.ManagedTypes.ToNativeQuaternion(itk.itkQuaternion)">
            <summary>Convert a managed Quaternion to a native Quaternion.</summary>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedVersor(itk.Versor&lt;System.Double&gt;)">
            <summary>Convert a native Versor to a managed Versor.</summary>
        </member>
        <member name="M:itk.ManagedTypes.ToNativeVersor(itk.itkVersor)">
            <summary>Convert a managed Versor to a native Versor.</summary>
        </member>
        <member name="M:itk.ManagedTypes.ToNativeString(System.String,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Convert a managed string to a native std::string.</summary>
        </member>
        <member name="P:itk.itkCell.PointIds">
            <summary>Get the point identifiers (indices) defining the cell.</summary>
        </member>
        <member name="P:itk.itkCell.NumberOfPoints">
            <summary>Get the number of points in the cell.</summary>
        </member>
        <member name="P:itk.itkCell.Dimension">
            <summary>Get the dimension of the cell.</summary>
        </member>
        <member name="P:itk.itkCell.Type">
            <summary>Get the cell type.</summary>
        </member>
        <member name="M:itk.itkCell.#ctor(itk.itkCell)">
            <summary>Constructor copying member data from an existing cell.</summary>
            <param name="cell">The existing cell to copy the data from.</param>
        </member>
        <member name="M:itk.itkCell.#ctor(itk.itkCellTypeEnum,System.UInt32,System.UInt32!System.Runtime.CompilerServices.IsLong[])">
            <summary>Constructor taking a pixel value and index.</summary>
            <param name="type">The type of the cell.</param>
            <param name="dim">The dimension of the cell.</param>
            <param name="pointids">The list of point identifiers (indices) defining the cell.</param>
        </member>
        <member name="M:itk.itkCell.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:itk.itkCell">
            <summary>
This class is a managed replacement for itk::CellInterface.
</summary>
            <remarks>
Define an abstract interface for cells. Actual cell types derive from this class.
</remarks>
        </member>
        <member name="T:itk.itkCellTypeEnum">
            <summary>This enumeration lists all the possible cell types (see itkCellInterface.h).</summary>
        </member>
        <member name="P:itk.itkLevelSetNode.Index">
            <summary>Get/set the discrete location of the node.</summary>
        </member>
        <member name="P:itk.itkLevelSetNode.Value">
            <summary>Get/set the value of the node.</summary>
        </member>
        <member name="M:itk.itkLevelSetNode.#ctor(itk.itkLevelSetNode)">
            <summary>Constructor copying member data from an existing node.</summary>
            <param name="node">The existing node to copy the data from.</param>
        </member>
        <member name="M:itk.itkLevelSetNode.#ctor(System.Double,itk.itkIndex)">
            <summary>Constructor taking a pixel value and index.</summary>
            <param name="value">The value of the level set node.</param>
            <param name="index">The discrete location in image space of the level set node.</param>
        </member>
        <member name="M:itk.itkLevelSetNode.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:itk.itkLevelSetNode">
            <summary>
This class is a managed replacement for itk::LevelSetNode.
</summary>
            <remarks>
LevelSetNode is a simple class that represents a node
or grid position of a level set. A group or collection of      
LevelSetNode can then be used to represents a narrowband or    
region of interest.                                            
</remarks>
        </member>
        <member name="M:itk.itkImageRegion.ToString">
            <summary>Returns a string representation of the itkImageRegion.</summary>
            <returns>A string representation in the format "Index=[XXX,XXX,..] Size=[XXX,XXX,..]".</returns>
        </member>
        <member name="M:itk.itkImageRegion.Crop(itk.itkImageRegion)">
            <summary>
Crop a region by another region. If this region is outside of the crop,
this method returns false and does not modify the region. Otherwise,
this method returns true and the region ismodified to reflect the crop.
</summary>
        </member>
        <member name="M:itk.itkImageRegion.PadByRadius(System.Int32[])">
            <summary>
Pad an image region by the specified radius.
</summary>
        </member>
        <member name="M:itk.itkImageRegion.PadByRadius(itk.itkSize)">
            <summary>
Pad an image region by the specified radius.
</summary>
        </member>
        <member name="M:itk.itkImageRegion.PadByRadius(System.Int32)">
            <summary>
Pad an image region by the specified radius uniformly in all dimensions.
</summary>
        </member>
        <member name="M:itk.itkImageRegion.IsInside(itk.itkContinuousIndex)">
            <summary>Test if a continuous index is inside the image region.</summary>
            <returns>True if inside, false otherwise.</returns>
        </member>
        <member name="M:itk.itkImageRegion.IsInside(itk.itkIndex)">
            <summary>Test if an index is inside the image region.</summary>
            <returns>True if inside, false otherwise.</returns>
        </member>
        <member name="P:itk.itkImageRegion.Index">
            <summary>Get/set the index of the image region.</summary>
        </member>
        <member name="P:itk.itkImageRegion.Size">
            <summary>Get/set the size of the image region.</summary>
        </member>
        <member name="P:itk.itkImageRegion.Dimension">
            <summary>Get the dimensionality of the region.</summary>
        </member>
        <member name="M:itk.itkImageRegion.#ctor(itk.itkSize,itk.itkIndex)">
            <summary>Constructor taking an existing size and index.</summary>
            <param name="size">The size to set within the new image region.</param>
            <param name="index">The index to set within the new image region.</param>
        </member>
        <member name="M:itk.itkImageRegion.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:itk.itkImageRegion">
            <summary>
This class is a managed replacement for itk::ImageRegion.
</summary>
            <remarks>
ImageRegion is an class that represents some structured portion or
piece of an Image. The ImageRegion is represented with an index and
a size in each of the n-dimensions of the image. (The index is the
corner of the image, the size is the lengths of the image in each of
the topological directions.)
</remarks>
        </member>
        <member name="M:itk.itkVersor.SetRotationAroundZ(System.Double)">
            <summary>Set the Quaternion as a rotation around the Z-axis.</summary>
        </member>
        <member name="M:itk.itkVersor.SetRotationAroundY(System.Double)">
            <summary>Set the Quaternion as a rotation around the Y-axis.</summary>
        </member>
        <member name="M:itk.itkVersor.SetRotationAroundX(System.Double)">
            <summary>Set the Versor as a rotation around the X-axis.</summary>
        </member>
        <member name="M:itk.itkVersor.Set(itk.itkVector,System.Double)">
            <summary>
Set the Versor  using a vector and angle.
The unit vector parallel to the given vector will be used.
The angle is expected in radians.
</summary>
        </member>
        <member name="M:itk.itkVersor.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>Set the Versor using the given ZYZW components.</summary>
        </member>
        <member name="M:itk.itkVersor.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
Component constructor. The Versor is initialised to the given XYZW components.
</summary>
        </member>
        <member name="M:itk.itkVersor.#ctor">
            <summary>
Default constructor. The Versor is initialised to the identity.
</summary>
        </member>
        <member name="T:itk.itkVersor">
            <summary>
This class is a managed replacement for itk::Versor.
</summary>
            <remarks>
The difference between versors and quaternions is that quaternions
can represent rotations and scale changes while versors are limited
to rotations. ie. versors are unit or normalized quaternions, the 
tensor is always 1.0. The class does not provide many operations,
it is only a basic wrapper for the actual XYZW data.
</remarks>
        </member>
        <member name="M:itk.itkQuaternion.SetIdentity">
            <summary>Set the Quaternion as identity ie. [0,0,0,1].</summary>
        </member>
        <member name="M:itk.itkQuaternion.SetRotationAroundZ(System.Double)">
            <summary>Set the Quaternion as a rotation around the Z-axis.</summary>
        </member>
        <member name="M:itk.itkQuaternion.SetRotationAroundY(System.Double)">
            <summary>Set the Quaternion as a rotation around the Y-axis.</summary>
        </member>
        <member name="M:itk.itkQuaternion.SetRotationAroundX(System.Double)">
            <summary>Set the Quaternion as a rotation around the X-axis.</summary>
        </member>
        <member name="M:itk.itkQuaternion.Set(itk.itkVector,System.Double)">
            <summary>
Set the Quaternion  using a vector and angle.
The unit vector parallel to the given vector will be used.
The angle is expected in radians.
</summary>
        </member>
        <member name="M:itk.itkQuaternion.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>Set the Quaternion using the given XYZW components.</summary>
        </member>
        <member name="M:itk.itkQuaternion.Normalize">
            <summary>
Normalize the Quaternion.
</summary>
        </member>
        <member name="P:itk.itkQuaternion.Angle">
            <summary>
Returns the rotation angle in radians.
</summary>
        </member>
        <member name="P:itk.itkQuaternion.Right">
            <summary>
Gets the right (vector) part of the Quaternion.
It is called Right because it is equivalent to a right angle rotation.
</summary>
        </member>
        <member name="P:itk.itkQuaternion.Axis">
            <summary>Compute the axis of rotation.</summary>
        </member>
        <member name="P:itk.itkQuaternion.Tensor">
            <summary>Compute the tensor.</summary>
        </member>
        <member name="P:itk.itkQuaternion.Scalar">
            <summary>
Gets the scalar (W) part.
</summary>
        </member>
        <member name="P:itk.itkQuaternion.W">
            <summary>Get the W component.</summary>
        </member>
        <member name="P:itk.itkQuaternion.Z">
            <summary>Get the Z component.</summary>
        </member>
        <member name="P:itk.itkQuaternion.Y">
            <summary>Get the Y component.</summary>
        </member>
        <member name="P:itk.itkQuaternion.X">
            <summary>Get the X component.</summary>
        </member>
        <member name="M:itk.itkQuaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
Component constructor. The Quaternion is initialised to the given XYZW components.
</summary>
        </member>
        <member name="M:itk.itkQuaternion.#ctor">
            <summary>
Default constructor. The Quaternion is initialised to the identity.
</summary>
        </member>
        <member name="T:itk.itkQuaternion">
            <summary>
This class is a managed replacement for itk::Quaternion.
</summary>
            <remarks>
The class does not provide many quaternion operations, it is
only a basic wrapper for the actual XYZW data.
</remarks>
        </member>
        <member name="M:itk.itkObject.MarshalString(System.String,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Marshal a managed string to the unmanaged heap.</summary>
        </member>
        <member name="M:itk.itkObject.InvokeModifiedEvent(itk.itkEventArgs)">
            <summary>Invoke the Modified event.</summary>
        </member>
        <member name="M:itk.itkObject.InvokeIterationEvent(itk.itkEventArgs)">
            <summary>Invoke the Iteration event.</summary>
        </member>
        <member name="M:itk.itkObject.InvokeAbortedEvent(itk.itkEventArgs)">
            <summary>Invoke the Aborted event.</summary>
        </member>
        <member name="M:itk.itkObject.InvokeEndedEvent(itk.itkEventArgs)">
            <summary>Invoke the Ended event.</summary>
        </member>
        <member name="M:itk.itkObject.InvokeStartedEvent(itk.itkEventArgs)">
            <summary>Invoke the Started event.</summary>
        </member>
        <member name="E:itk.itkObject.Iteration">
            <summary>An event which is raised when the process iteration is updated.</summary>
        </member>
        <member name="E:itk.itkObject.Aborted">
            <summary>An event which is raised if the process is aborted.</summary>
        </member>
        <member name="E:itk.itkObject.Ended">
            <summary>An event which is raised when the process has finished.</summary>
        </member>
        <member name="E:itk.itkObject.Started">
            <summary>An event which is raised when the process is started.</summary>
        </member>
        <member name="E:itk.itkObject.Modified">
            <summary>An event which is raised when the object is modified.</summary>
        </member>
        <member name="M:itk.itkObject.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers() may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkObject.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="P:itk.itkObject.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkObject.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IUC2IUC2".</example>
        </member>
        <member name="P:itk.itkObject.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkObject.Metadata">
            <summary>Get a [name, value] list of 'metadata'.</summary>
            <remarks>
This property was added to ManagedITK to easily create temporary
(ie. non-persisent, not save to file) 'metadata'.
</remarks>
        </member>
        <member name="P:itk.itkObject.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="P:itk.itkObject.IsDisposed">
            <summary>Gets if the object has been disposed.</summary>
        </member>
        <member name="M:itk.itkObject.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkEventHandler">
            <summary>A delegate for events sent from an itkObject.</summary>
        </member>
        <member name="M:itk.itkEventArgs.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:itk.itkEventArgs">
            <summary>
EventArgs subclass for managed ITK objects.
</summary>
        </member>
        <member name="T:itk.itkObject">
Forward reference to itkObject 
<summary>
This class is a managed replacement for itk::Object.
</summary><remarks>
Object is the second-highest level base class for most itk objects. 
It extends the base object functionality of LightObject by          
implementing callbacks (via object/observer), debug flags/methods,  
and modification time tracking. Most ITK classes should be a subclass
of Object due to the need to keep track of modified time.
</remarks></member>
        <member name="M:itk.itkMatrix.ToString">
            <summary>
Converts the Matrix to a string representation.
</summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="M:itk.itkMatrix.op_Multiply(itk.itkPoint,itk.itkMatrix)">
            <summary>Product by a point.</summary>
            <param name="point" />
            <param name="matrix" />
            <returns>The itkPoint after multiplying point by matrix.</returns>
        </member>
        <member name="M:itk.itkMatrix.op_Multiply(itk.itkVector,itk.itkMatrix)">
            <summary>Product by a vector.</summary>
            <param name="vector" />
            <param name="matrix" />
            <returns>The itkVector after multiplying vector by matrix.</returns>
        </member>
        <member name="M:itk.itkMatrix.op_Multiply(itk.itkMatrix,itk.itkMatrix)">
            <summary>Performs matrix multiplication.</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>The resultant itkMatrix from multiplying lhs with rhs.</returns>
        </member>
        <member name="M:itk.itkMatrix.Fill(System.Double)">
            <summary>Fill the matrix with a value.</summary>
        </member>
        <member name="M:itk.itkMatrix.SetIdentity">
            <summary>Set the matrix to identity.</summary>
        </member>
        <member name="M:itk.itkMatrix.Set(System.UInt32,System.UInt32,System.Double)">
            <summary>Set the specified matrix component.</summary>
            <param name="row">The matrix row.</param>
            <param name="col">The matrix column.</param>
            <param name="value">The value for [row, col].</param>
        </member>
        <member name="M:itk.itkMatrix.Get(System.UInt32,System.UInt32)">
            <summary>Get the specified matrix component.</summary>
            <param name="row">The matrix row.</param>
            <param name="col">The matrix column.</param>
            <returns>A reference to the matrix component at [row, col].</returns>
        </member>
        <member name="P:itk.itkMatrix.Item(System.UInt32,System.UInt32)">
            <summary>Get/set the value at the given [row, col].</summary>
        </member>
        <member name="P:itk.itkMatrix.Data">
            <summary>Get the underlying data array.</summary>
        </member>
        <member name="P:itk.itkMatrix.NumberOfCols">
            <summary>Get the number of columns in the Matrix.</summary>
        </member>
        <member name="P:itk.itkMatrix.NumberOfRows">
            <summary>Get the number of rows in the Matrix.</summary>
        </member>
        <member name="M:itk.itkMatrix.NewZeros(System.UInt32,System.UInt32)">
            <summary>
Static constructor creating a new matrix set to all zeros.
</summary>
            <param name="numrows">The number of rows in the matrix.</param>
            <param name="numcols">The number of columns in the matrix.</param>
        </member>
        <member name="M:itk.itkMatrix.NewIdentity(System.UInt32,System.UInt32)">
            <summary>
Static constructor creating a new matrix set to the identity.
</summary>
            <param name="numrows">The number of rows in the matrix.</param>
            <param name="numcols">The number of columns in the matrix.</param>
        </member>
        <member name="M:itk.itkMatrix.#ctor(System.UInt32,System.UInt32)">
            <summary>
Constructor taking the number of rows and columns.
The matrix is initialised to all zeros.
</summary>
            <param name="numrows">The number of rows in the matrix.</param>
            <param name="numcols">The number of columns in the matrix.</param>
        </member>
        <member name="T:itk.itkMatrix">
            <summary>
This class is a managed replacement for itk::Matrix.
</summary>
        </member>
        <member name="M:itk.itkOffset.op_Subtraction(itk.itkOffset,itk.itkOffset)">
            <summary>Performs an element-wise subtraction.</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>A new itkOffset instance with data as the element-wise subtraction.</returns>
        </member>
        <member name="M:itk.itkOffset.op_Addition(itk.itkOffset,itk.itkOffset)">
            <summary>Performs an element-wise addition.</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>A new itkOffset instance with data as the element-wise addition.</returns>
        </member>
        <member name="M:itk.itkOffset.op_Inequality(itk.itkOffset)">
            <summary>
Compares two itkOffset objects.
They are not equal if they do not have the same dimensionality OR 
do not have the same data.
</summary>
            <param name="rhs" />
            <returns>true AND the objects are not equal OR false AND the objects are equal.</returns>
        </member>
        <member name="M:itk.itkOffset.op_Equality(itk.itkOffset,itk.itkOffset)">
            <summary>
Compares two itkOffset objects.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkOffset.Equals(System.Object)">
            <summary>
Compares the given Object to this.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="obj">The object to test.</param>
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkOffset.#ctor(itk.itkOffset)">
            <summary>Constructor taking another array.</summary>
            <param name="other">Another array to clone the data from.</param>
        </member>
        <member name="M:itk.itkOffset.#ctor(System.UInt32)">
            <summary>Constructor taking the number of dimensions for the array.</summary>
            <remarks>The data values are initialised as zero.</remarks>
            <param name="dimension">The dimensionality of the array to initialise.</param>
        </member>
        <member name="M:itk.itkOffset.#ctor(System.Int32[])">
            <summary>Constructor taking the data values as a params array.</summary>
            <param name="data">The variable length data array. The dimension will be initialised as data.Length.</param>
        </member>
        <member name="T:itk.itkOffset">
            <summary>
This class is a managed replacement for itk::Offset.
</summary>
            <remarks>
An Offset represents the offset between two n-dimensional indexes
in a n-dimensional image.
</remarks>
        </member>
        <member name="M:itk.itkPoint.EuclideanDistanceTo(itk.itkPoint)">
            <summary>Computes the distance from this to the given point.</summary>
            <param name="point">The other point used in the calculation.</param>
            <returns>The Euclidean distance from this to the given point.</returns>
        </member>
        <member name="M:itk.itkPoint.SquaredEuclideanDistanceTo(itk.itkPoint)">
            <summary>Computes the squared Euclidean distance from this to the given point.</summary>
            <param name="point">The other point used in the calculation.</param>
            <returns>The squared Euclidean distance from this to the given point.</returns>
        </member>
        <member name="M:itk.itkPoint.op_Subtraction(itk.itkPoint,itk.itkVector)">
            <summary>Move the point in the opposite direction of the given vector.</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>A new itkPoint instance with each data element offset by the vector element.</returns>
        </member>
        <member name="M:itk.itkPoint.op_Addition(itk.itkPoint,itk.itkVector)">
            <summary>Move the point in the direction of the given vector.</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>A new itkPoint instance with each data element offset by the vector element.</returns>
        </member>
        <member name="M:itk.itkPoint.op_Subtraction(itk.itkPoint,itk.itkPoint)">
            <summary>Performs an element-wise subtraction.</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>A new itkVector instance with data as the element-wise subtraction.</returns>
        </member>
        <member name="M:itk.itkPoint.op_Addition(itk.itkPoint,itk.itkPoint)">
            <summary>Performs an element-wise addition.</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>A new itkVector instance with data as the element-wise addition.</returns>
        </member>
        <member name="M:itk.itkPoint.op_Inequality(itk.itkPoint)">
            <summary>
Compares two itkPoint objects.
They are not equal if they do not have the same dimensionality OR 
do not have the same data.
</summary>
            <param name="rhs" />
            <returns>true AND the objects are not equal OR false AND the objects are equal.</returns>
        </member>
        <member name="M:itk.itkPoint.op_Equality(itk.itkPoint,itk.itkPoint)">
            <summary>
Compares two itkPoint objects.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkPoint.Equals(System.Object)">
            <summary>
Compares the given Object to this.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="obj">The object to test.</param>
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkPoint.#ctor(itk.itkPoint)">
            <summary>Constructor taking another array.</summary>
            <param name="other">Another array to clone the data from.</param>
        </member>
        <member name="M:itk.itkPoint.#ctor(System.UInt32)">
            <summary>Constructor taking the number of dimensions for the array.</summary>
            <remarks>The data values are initialised as zero.</remarks>
            <param name="dimension">The dimensionality of the array to initialise.</param>
        </member>
        <member name="M:itk.itkPoint.#ctor(System.Double[])">
            <summary>Constructor taking the data values as a params array.</summary>
            <param name="data">The variable length data array. The dimension will be initialised as data.Length.</param>
        </member>
        <member name="T:itk.itkPoint">
            <summary>
This class is a managed replacement for itk::Point.
</summary>
            <remarks>
An Point represents an n-Dimensional geometric point in physical space.
</remarks>
        </member>
        <member name="M:itk.itkContinuousIndex.op_Inequality(itk.itkContinuousIndex)">
            <summary>
Compares two itkContinuousIndex objects.
They are not equal if they do not have the same dimensionality OR 
do not have the same data.
</summary>
            <param name="rhs" />
            <returns>true AND the objects are not equal OR false AND the objects are equal.</returns>
        </member>
        <member name="M:itk.itkContinuousIndex.op_Equality(itk.itkContinuousIndex,itk.itkContinuousIndex)">
            <summary>
Compares two itkContinuousIndex objects.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkContinuousIndex.Equals(System.Object)">
            <summary>
Compares the given Object to this.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="obj">The object to test.</param>
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkContinuousIndex.ToIndex">
            <summary>Converts this to a discrete itkIndex by rounding 'away from zero'.</summary>
            <remarks>Uses MidpointRounding::AwayFromZero to perform rounding.</remarks>
        </member>
        <member name="M:itk.itkContinuousIndex.#ctor(itk.itkIndex)">
            <summary>Constructor which copies member data from an existing itkIndex object.</summary>
            <param name="index">The existing itkIndex object to copy from.</param>
        </member>
        <member name="M:itk.itkContinuousIndex.#ctor(itk.itkContinuousIndex)">
            <summary>Constructor taking another array.</summary>
            <param name="other">Another array to clone the data from.</param>
        </member>
        <member name="M:itk.itkContinuousIndex.#ctor(System.UInt32)">
            <summary>Constructor taking the number of dimensions for the array.</summary>
            <remarks>The data values are initialised as zero.</remarks>
            <param name="dimension">The dimensionality of the array to initialise.</param>
        </member>
        <member name="M:itk.itkContinuousIndex.#ctor(System.Double[])">
            <summary>Constructor taking the data values as a params array.</summary>
            <param name="data">The variable length data array. The dimension will be initialised as data.Length.</param>
        </member>
        <member name="T:itk.itkContinuousIndex">
            <summary>
This class is a managed replacement for itk::ContinuousIndex.
</summary>
            <remarks>
A ContinuousIndex represents an n-Dimensional real-valued point in pixel space.
</remarks>
        </member>
        <member name="M:itk.itkIndex.op_Subtraction(itk.itkIndex,itk.itkIndex)">
            <summary>Performs an element-wise subtraction.</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>A new itkIndex instance with data as the element-wise subtraction.</returns>
        </member>
        <member name="M:itk.itkIndex.op_Addition(itk.itkIndex,itk.itkIndex)">
            <summary>Performs an element-wise addition.</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>A new itkIndex instance with data as the element-wise addition.</returns>
        </member>
        <member name="M:itk.itkIndex.op_Inequality(itk.itkIndex)">
            <summary>
Compares two itkIndex objects.
They are not equal if they do not have the same dimensionality OR 
do not have the same data.
</summary>
            <param name="rhs" />
            <returns>true AND the objects are not equal OR false AND the objects are equal.</returns>
        </member>
        <member name="M:itk.itkIndex.op_Equality(itk.itkIndex,itk.itkIndex)">
            <summary>
Compares two itkIndex objects.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkIndex.Equals(System.Object)">
            <summary>
Compares the given Object to this.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="obj">The object to test.</param>
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkIndex.#ctor(itk.itkIndex)">
            <summary>Constructor taking another array.</summary>
            <param name="other">Another array to clone the data from.</param>
        </member>
        <member name="M:itk.itkIndex.#ctor(System.UInt32)">
            <summary>Constructor taking the number of dimensions for the array.</summary>
            <remarks>The data values are initialised as zero.</remarks>
            <param name="dimension">The dimensionality of the array to initialise.</param>
        </member>
        <member name="M:itk.itkIndex.#ctor(System.Int32[])">
            <summary>Constructor taking the data values as a params array.</summary>
            <param name="data">The variable length data array. The dimension will be initialised as data.Length.</param>
        </member>
        <member name="T:itk.itkIndex">
            <summary>
This class is a managed replacement for itk::Index.
</summary>
            <remarks>
An Index represents an n-Dimensional discrete point in pixel space.
</remarks>
        </member>
        <member name="M:itk.itkSpacing.op_Inequality(itk.itkSpacing)">
            <summary>
Compares two itkSpacing objects.
They are not equal if they do not have the same dimensionality OR 
do not have the same data.
</summary>
            <param name="rhs" />
            <returns>true AND the objects are not equal OR false AND the objects are equal.</returns>
        </member>
        <member name="M:itk.itkSpacing.op_Equality(itk.itkSpacing,itk.itkSpacing)">
            <summary>
Compares two itkSpacing objects.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkSpacing.Equals(System.Object)">
            <summary>
Compares the given Object to this.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="obj">The object to test.</param>
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkSpacing.ToString">
            <summary>
Converts the array to a string representation in the following format:
"[0.0## 0.0## 0.0##]"
</summary>
            <returns>A string represetnation in the format "[0.0## 0.0## 0.0##]".</returns>
        </member>
        <member name="M:itk.itkSpacing.#ctor(itk.itkSpacing)">
            <summary>Constructor taking another array.</summary>
            <param name="other">Another array to clone the data from.</param>
        </member>
        <member name="M:itk.itkSpacing.#ctor(System.UInt32)">
            <summary>Constructor taking the number of dimensions for the array.</summary>
            <remarks>The data values are initialised as zero.</remarks>
            <param name="dimension">The dimensionality of the array to initialise.</param>
        </member>
        <member name="M:itk.itkSpacing.#ctor(System.Double[])">
            <summary>Constructor taking the data values as a params array.</summary>
            <param name="data">The variable length data array. The dimension will be initialised as data.Length.</param>
        </member>
        <member name="T:itk.itkSpacing">
            <summary>
This class is a managed replacement for itk::Image::SpacingType,
which is defined as itk::Vector&lt; double, VImageDimension &gt;.
</summary>
        </member>
        <member name="M:itk.itkSize.op_Inequality(itk.itkSize)">
            <summary>
Compares two itkSize objects.
They are not equal if they do not have the same dimensionality OR 
do not have the same data.
</summary>
            <param name="rhs" />
            <returns>true AND the objects are not equal OR false AND the objects are equal.</returns>
        </member>
        <member name="M:itk.itkSize.op_Equality(itk.itkSize,itk.itkSize)">
            <summary>
Compares two itkSize objects.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkSize.Equals(System.Object)">
            <summary>
Compares the given Object to this.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="obj">The object to test.</param>
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkSize.#ctor(itk.itkSize)">
            <summary>Constructor taking another array.</summary>
            <param name="other">Another array to clone the data from.</param>
        </member>
        <member name="M:itk.itkSize.#ctor(System.UInt32)">
            <summary>Constructor taking the number of dimensions for the array.</summary>
            <remarks>The data values are initialised as zero.</remarks>
            <param name="dimension">The dimensionality of the array to initialise.</param>
        </member>
        <member name="M:itk.itkSize.#ctor(System.Int32[])">
            <summary>Constructor taking the data values as a params array.</summary>
            <param name="data">The variable length data array. The dimension will be initialised as data.Length.</param>
        </member>
        <member name="T:itk.itkSize">
            <summary>
This class is a managed replacement for itk::Size.
</summary>
            <remarks>
Size is a class to represent multi-dimensional array bounds. Insight
assumes that the first element of Size is the fastest moving index.                 
</remarks>
        </member>
        <member name="T:itk.itkPixel_RGBAUS">
            <summary>This class is a managed wrapper for RGB US pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_RGBAUC">
            <summary>This class is a managed wrapper for RGB UC pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_RGBUS">
            <summary>This class is a managed wrapper for RGB US pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_RGBUC">
            <summary>This class is a managed wrapper for RGB UC pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VLVD">
            <summary>This class is a managed wrapper for VLV D pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VLVF">
            <summary>This class is a managed wrapper for VLV F pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VLVSS">
            <summary>This class is a managed wrapper for VLV SS pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VLVUS">
            <summary>This class is a managed wrapper for VLV SS pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VLVUC">
            <summary>This class is a managed wrapper for VLV UC pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VID">
            <summary>This class is a managed wrapper for VI D pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VIF">
            <summary>This class is a managed wrapper for VI F pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VISS">
            <summary>This class is a managed wrapper for VI SS pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VIUS">
            <summary>This class is a managed wrapper for VI SS pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VIUC">
            <summary>This class is a managed wrapper for VI UC pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_CVB">
            <summary>This class is a managed wrapper for CovariantVector Boolean pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_CVD">
            <summary>This class is a managed wrapper for CovariantVector Double pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_CVF">
            <summary>This class is a managed wrapper for CovariantVector Float pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_CVSL">
            <summary>This class is a managed wrapper for CovariantVector Signed Long pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_CVUL">
            <summary>This class is a managed wrapper for CovariantVector Unsigned Long pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_CVSS">
            <summary>This class is a managed wrapper for CovariantVector Signed Short pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_CVUS">
            <summary>This class is a managed wrapper for CovariantVector Unsigned Short pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_CVSC">
            <summary>This class is a managed wrapper for CovariantVector Signed Char pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_CVUC">
            <summary>This class is a managed wrapper for CovariantVector Unsigned Char pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VD">
            <summary>This class is a managed wrapper for Vector Double pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VF">
            <summary>This class is a managed wrapper for Vector Float pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VSL">
            <summary>This class is a managed wrapper for Vector Signed Long pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VUL">
            <summary>This class is a managed wrapper for Vector Unsigned Long pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VSS">
            <summary>This class is a managed wrapper for Vector Signed Short pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VUS">
            <summary>This class is a managed wrapper for Vector Unsigned Short pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VSC">
            <summary>This class is a managed wrapper for Vector Signed Char pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_VUC">
            <summary>This class is a managed wrapper for Vector Unsigned Char pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_B">
            <summary>This class is a managed wrapper for boolean pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_D">
            <summary>This class is a managed wrapper for Double pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_F">
            <summary>This class is a managed wrapper for Float pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_SL">
            <summary>This class is a managed wrapper for SignedLong pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_UL">
            <summary>This class is a managed wrapper for UnsignedLong pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_SS">
            <summary>This class is a managed wrapper for SignedShort pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_US">
            <summary>This class is a managed wrapper for UnsignedShort pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_SC">
            <summary>This class is a managed wrapper for SignedChar pixels.</summary>
        </member>
        <member name="T:itk.itkPixel_UC">
            <summary>This class is a managed wrapper for UnsignedChar pixels.</summary>
        </member>
        <member name="M:itk.itkPixel.NewMax(itk.itkPixelType)">
            <summary>Create a new pixel of the given type with the maximum value.</summary>
            <param name="type">The type of pixel to create.</param>
            <returns>A new pixel with the value equal to the maximum value.</returns>
        </member>
        <member name="M:itk.itkPixel.NewMin(itk.itkPixelType)">
            <summary>Create a new pixel of the given type with the minimum value.</summary>
            <param name="type">The type of pixel to create.</param>
            <returns>A new pixel with the value equal to the minimum value.</returns>
        </member>
        <member name="M:itk.itkPixel.NewZero(itk.itkPixelType)">
            <summary>Create a new pixel of the given type with zero value.</summary>
            <param name="type">The type of pixel to create.</param>
            <returns>A new pixel with the value equal to zero.</returns>
        </member>
        <member name="M:itk.itkPixel.TryParse(itk.itkPixelType,System.String,itk.itkPixel@)">
            <summary>
Parses a string and creates a Pixel of the given type.
This method consumes any exceptions caused by parsing,
returning true on success and false on failure.
</summary>
            <param name="type">The type of pixel to parse.</param>
            <param name="value">The string representing the pixel. Eg. "100", "0.50", "-1234"</param>
            <param name="pixel">The resultant pixel parsed from the string, or null on failure.</param>
            <returns>True if the parse was successful, otherwise false.</returns>
        </member>
        <member name="M:itk.itkPixel.ToString(System.String)">
            <summary>Return a string representation of the pixel.</summary>
            <param name="format">The format string for the conversion (eg. "000.00").</param>
            <returns>A string representation of the pixel.</returns>
        </member>
        <member name="M:itk.itkPixel.ToString">
            <summary>Return a string representation of the pixel.</summary>
            <returns>A string representation of the pixel.</returns>
        </member>
        <member name="M:itk.itkPixel.op_Implicit(System.Boolean)~itk.itkPixel">
            <summary>Implicit conversion operator to create scalar itkPixel from literal.</summary>
        </member>
        <member name="M:itk.itkPixel.op_Implicit(System.Double)~itk.itkPixel">
            <summary>Implicit conversion operator to create scalar itkPixel from literal.</summary>
        </member>
        <member name="M:itk.itkPixel.op_Implicit(System.Single)~itk.itkPixel">
            <summary>Implicit conversion operator to create scalar itkPixel from literal.</summary>
        </member>
        <member name="M:itk.itkPixel.op_Implicit(System.Int32!System.Runtime.CompilerServices.IsLong)~itk.itkPixel">
            <summary>Implicit conversion operator to create scalar itkPixel from literal.</summary>
        </member>
        <member name="M:itk.itkPixel.op_Implicit(System.UInt32!System.Runtime.CompilerServices.IsLong)~itk.itkPixel">
            <summary>Implicit conversion operator to create scalar itkPixel from literal.</summary>
        </member>
        <member name="M:itk.itkPixel.op_Implicit(System.Int16)~itk.itkPixel">
            <summary>Implicit conversion operator to create scalar itkPixel from literal.</summary>
        </member>
        <member name="M:itk.itkPixel.op_Implicit(System.UInt16)~itk.itkPixel">
            <summary>Implicit conversion operator to create scalar itkPixel from literal.</summary>
        </member>
        <member name="M:itk.itkPixel.op_Implicit(System.SByte)~itk.itkPixel">
            <summary>Implicit conversion operator to create scalar itkPixel from literal.</summary>
        </member>
        <member name="M:itk.itkPixel.op_Implicit(System.Byte)~itk.itkPixel">
            <summary>Implicit conversion operator to create scalar itkPixel from literal.</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsInt32">
            <summary>Get the value of the pixel as an Int32.</summary>
            <remarks>This is the same as SignedLong.</remarks>
        </member>
        <member name="P:itk.itkPixel.ValueAsVector">
            <summary>Get the value of the pixel as a itkVector.</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsArrayOfD">
            <summary>Get the value of the pixel as an array of D.</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsArrayOfF">
            <summary>Get the value of the pixel as an array of F.</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsArrayOfSL">
            <summary>Get the value of the pixel as an array of SL.</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsArrayOfUL">
            <summary>Get the value of the pixel as an array of UL.</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsArrayOfSS">
            <summary>Get the value of the pixel as an array of SS.</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsArrayOfUS">
            <summary>Get the value of the pixel as an array of US.</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsArrayOfSC">
            <summary>Get the value of the pixel as an array of SC.</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsArrayOfUC">
            <summary>Get the value of the pixel as an array of UC.</summary>
        </member>
        <member name="M:itk.itkPixel.ValueAsArray``1">
            <summary>Get the value of the pixel as an array.</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsB">
            <summary>Get the value of the pixel as a boolean.</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsD">
            <summary>Get the value of the pixel as a double.</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsF">
            <summary>Get the value of the pixel as a float (ie. Single).</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsSL">
            <summary>Get the value of the pixel as a signed long (ie. Int32).</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsUL">
            <summary>Get the value of the pixel as an unsigned long (ie. UInt32).</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsSS">
            <summary>Get the value of the pixel as a signed short (ie. Int16).</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsUS">
            <summary>Get the value of the pixel as an unsigned short (ie. UInt16).</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsSC">
            <summary>Get the value of the pixel as a signed char (ie. SByte).</summary>
        </member>
        <member name="P:itk.itkPixel.ValueAsUC">
            <summary>Get the value of the pixel as an unsigned char (ie. Byte).</summary>
        </member>
        <member name="P:itk.itkPixel.Value">
            <summary>Get the generic Object value of the pixel.</summary>
        </member>
        <member name="P:itk.itkPixel.Type">
            <summary>Get the type of the pixel.</summary>
        </member>
        <member name="M:itk.itkPixel.#ctor(itk.itkPixelType,System.Object)">
            <summary>Default constructor taking the pixel type and value.</summary>
            <param name="type">The type of the pixel to create.</param>
            <param name="value">The value of the pixel as a generic Object.</param>
        </member>
        <member name="T:itk.itkPixel">
            <summary>
This class is a managed replacement for the Image template variable TPixel.
</summary>
            <remarks>
In native itk, images are templated over the pixel type: TPixel (eg. unsigned
char, float, etc). In ManagedITK, to allow for the specification of image types
at runtime, the itkPixelType and itkPixel classes were introduced.
</remarks>
        </member>
        <member name="M:itk.itkVector.Cross(itk.itkVector,itk.itkVector)">
            <summary>Computes and returns the cross product of two vectors.</summary>
            <remarks>This operation is only defined for vectors of length 3.</remarks>
        </member>
        <member name="M:itk.itkVector.Dot(itk.itkVector,itk.itkVector)">
            <summary>Computes and returns the dot product of two vectors.</summary>
        </member>
        <member name="M:itk.itkVector.Normalize">
            <summary>Normalizes this instance of the vector. ie. Divides each comonent by GetNorm().</summary>
        </member>
        <member name="M:itk.itkVector.GetSquaredNorm">
            <summary>Computes the squared Euclidean (magnitude) of the vector.</summary>
            <returns>The squared Euclidean norm (magnitude) of the vector.</returns>
        </member>
        <member name="M:itk.itkVector.GetNorm">
            <summary>Computes the Euclidean norm (magnitude) of the vector.</summary>
            <returns>The Euclidean norm (magnitude) of the vector.</returns>
        </member>
        <member name="M:itk.itkVector.op_Division(System.Double,itk.itkVector)">
            <summary>Divide by a scalar value.</summary>
            <param name="scalar" />
            <param name="rhs" />
            <returns>A new itkVector instance with each data element divided by the scalar.</returns>
        </member>
        <member name="M:itk.itkVector.op_Division(itk.itkVector,System.Double)">
            <summary>Divide by a scalar value.</summary>
            <param name="lhs" />
            <param name="scalar" />
            <returns>A new itkVector instance with each data element divided by the scalar.</returns>
        </member>
        <member name="M:itk.itkVector.op_Multiply(System.Double,itk.itkVector)">
            <summary>Multiply by a scalar value.</summary>
            <param name="scalar" />
            <param name="rhs" />
            <returns>A new itkVector instance with each data element multiplied by the scalar.</returns>
        </member>
        <member name="M:itk.itkVector.op_Multiply(itk.itkVector,System.Double)">
            <summary>Multiply by a scalar value.</summary>
            <param name="lhs" />
            <param name="scalar" />
            <returns>A new itkVector instance with each data element multiplied by the scalar.</returns>
        </member>
        <member name="M:itk.itkVector.op_Subtraction(itk.itkVector,itk.itkVector)">
            <summary>Performs an element-wise subtraction.</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>A new itkVector instance with data as the element-wise subtraction.</returns>
        </member>
        <member name="M:itk.itkVector.op_Addition(itk.itkVector,itk.itkVector)">
            <summary>Performs an element-wise addition.</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>A new itkVector instance with data as the element-wise addition.</returns>
        </member>
        <member name="M:itk.itkVector.op_Inequality(itk.itkVector)">
            <summary>
Compares two itkVector objects.
They are not equal if they do not have the same dimensionality OR 
do not have the same data.
</summary>
            <param name="rhs" />
            <returns>true AND the objects are not equal OR false AND the objects are equal.</returns>
        </member>
        <member name="M:itk.itkVector.op_Equality(itk.itkVector,itk.itkVector)">
            <summary>
Compares two itkVector objects.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="lhs" />
            <param name="rhs" />
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkVector.Equals(System.Object)">
            <summary>
Compares the given Object to this.
They are equal if they have the same dimensionality AND data.
</summary>
            <param name="obj">The object to test.</param>
            <returns>true AND the objects are equal OR false AND the objects are not equal.</returns>
        </member>
        <member name="M:itk.itkVector.#ctor(itk.itkVector)">
            <summary>Constructor taking another array.</summary>
            <param name="other">Another array to clone the data from.</param>
        </member>
        <member name="M:itk.itkVector.#ctor(System.UInt32)">
            <summary>Constructor taking the number of dimensions for the array.</summary>
            <remarks>The data values are initialised as zero.</remarks>
            <param name="dimension">The dimensionality of the array to initialise.</param>
        </member>
        <member name="M:itk.itkVector.#ctor(System.Double[])">
            <summary>Constructor taking the data values as a params array.</summary>
            <param name="data">The variable length data array. The dimension will be initialised as data.Length.</param>
        </member>
        <member name="T:itk.itkVector">
            <summary>
This class is a managed replacement for itk::Vector.
</summary>
            <remarks>
Vector is a class that holds an n-Dimensional vector of values. It
can be used as the data type held at each pixel in an Image or as 
a data type for the mathematical 'vector'.                                           
</remarks>
        </member>
        <member name="M:itk.itkArray`1.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>A hashcode computed from the Data array elements.</returns>
        </member>
        <member name="M:itk.itkArray`1.ToString(System.String)">
            <summary>Converts the array to a string represenation using the given format.</summary>
            <param name="format">The number formatting string. Eg. "00.00", "#00.0", etc.</param>
            <returns>A string representation of the array using the given format.</returns>
        </member>
        <member name="M:itk.itkArray`1.ToString">
            <summary>
Converts the array to a string representation in the following format:
  Real types: "[0.00 1.00 2.00]"
  Integer types: "[1 12 123]"
</summary>
            <returns>A string representation of the array.</returns>
        </member>
        <member name="M:itk.itkArray`1.Fill(`0)">
            <summary>Assign the given value to each dimension in the array.</summary>
            <param name="value">The data value to assign to each element of the array.</param>
        </member>
        <member name="P:itk.itkArray`1.Length">
            <summary>Get the number of dimensions or length of the data array.</summary>
            <remarks>This is another way to access Dimension.</remarks>
        </member>
        <member name="P:itk.itkArray`1.Dimension">
            <summary>Get the number of dimensions or length of the data array.</summary>
        </member>
        <member name="P:itk.itkArray`1.Data">
            <summary>Get the underlying data array.</summary>
        </member>
        <member name="P:itk.itkArray`1.Item(System.Int32)">
            <summary>Get/set the data values via the given index.</summary>
        </member>
        <member name="M:itk.itkArray`1.#ctor(itk.itkArray`1{`0})">
            <summary>Constructor taking another array.</summary>
            <param name="other">Another array to clone the data from.</param>
        </member>
        <member name="M:itk.itkArray`1.#ctor(System.UInt32)">
            <summary>Constructor taking the number of dimensions for the array.</summary>
            <remarks>The data values are initialised as zero.</remarks>
            <param name="dimension">The dimensionality of the array to initialise.</param>
        </member>
        <member name="M:itk.itkArray`1.#ctor(`0[])">
            <summary>Constructor taking the data values as a params array.</summary>
            <param name="data">The variable length data array. The dimension will be initialised as data.Length. The data is cloned.</param>
        </member>
        <member name="T:itk.itkArray`1">
            <summary>
The base array class from with all ManagedITK arrays are derived.
</summary>
            <remarks>
This class is templated (generic) over the array data value type (TValueType).
</remarks>
        </member>
        <member name="M:itk.itkPixelType.CreateFromMangledType(System.String)">
            <summary>Create a pixel type from a given string.</summary>
            <param name="mangledType">The type of the pixel as a string. Eg. "UC" = UnsignedChar.</param>
            <returns>A new pixel type instance of the type specified by the mangled string.</returns>
            <remarks>This method also works with a mangledType string from an image. Eg. "ISS3" = SignedShort.</remarks>
        </member>
        <member name="M:itk.itkPixelType.ToString">
            <summary>Get a 'long' string representing the pixel type.</summary>
            <example>"Unsigned Char", "Float"</example>
        </member>
        <member name="P:itk.itkPixelType.LongTypeString">
            <summary>Get a 'long' string representing the pixel type.</summary>
            <example>"Unsigned Char", "Float"</example>
        </member>
        <member name="P:itk.itkPixelType.NativePointer">
            <summary>The NativePointer property is not applicable for itkPixelType.</summary>
            <returns>Always returns zero for itkPixelType.</returns>
        </member>
        <member name="P:itk.itkPixelType.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"UC" = UnsignedChar, "SS" = Signed Short, "F" = float.</example>
        </member>
        <member name="P:itk.itkPixelType.IsUnsigned">
            <summary>
Get if the pixel value type is an unsigned value (ie. unsigned char, unsigned long, etc).
Boolean pixel values are considered unsigned.
</summary>
            <returns>True if the pixel type is unsigned (ie. unsigned char, unsigned long, etc), false otherwise.</returns>
        </member>
        <member name="P:itk.itkPixelType.IsSigned">
            <summary>
Get if the pixel value type is an signed value (ie. signed char, signed long, float, etc).
</summary>
            <returns>True if the pixel type is signed (ie. signed char, signed long, float, etc), false otherwise.</returns>
        </member>
        <member name="P:itk.itkPixelType.IsInteger">
            <summary>
Get if the pixel value type is an integer value (ie. unsigned char, signed long, etc),
as opposed to a real value.
</summary>
            <returns>True if the pixel type is integer (ie. unsigned char, signed long, etc), false otherwise.</returns>
        </member>
        <member name="P:itk.itkPixelType.IsSingleBit">
            <summary>
Get if the pixel value type is a single bit value (ie. boolean).
</summary>
            <returns>True if the pixel type is boolean, false otherwise.</returns>
        </member>
        <member name="P:itk.itkPixelType.IsReal">
            <summary>
Get if the pixel value type is a real value (ie. float or double),
as opposed to an integer value.
</summary>
            <returns>True if the pixel type is float or double, false otherwise.</returns>
        </member>
        <member name="P:itk.itkPixelType.IsLong">
            <summary>
Get if the pixel value type is a long value (ie. unsigned long or signed long).
</summary>
            <returns>True if the pixel type is a long value (ie. unsigned long or signed long), false otherwise.</returns>
        </member>
        <member name="P:itk.itkPixelType.IsShort">
            <summary>
Get if the pixel value type is a short value (ie. unsigned short or signed short).
</summary>
            <returns>True if the pixel type is a short value (ie. unsigned short or signed short), false otherwise.</returns>
        </member>
        <member name="P:itk.itkPixelType.IsChar">
            <summary>
Get if the pixel value type is a char value (ie. unsigned char or signed char).
</summary>
            <returns>True if the pixel type is a char value (ie. unsigned char or signed char), false otherwise.</returns>
        </member>
        <member name="P:itk.itkPixelType.IsColor">
            <summary>
Get if the pixel is a color value (ie. RGB or RGBA) value.
</summary>
            <returns>True if the type is a color type (ie. RGB or RGBA), false otherwise.</returns>
        </member>
        <member name="P:itk.itkPixelType.IsArray">
            <summary>
Get if the pixel is a scalar value (one value per pixel)
or a vector/array value (mor than one value per pixel).
</summary>
            <returns>True if the type is an array or vector, false otherwise.</returns>
        </member>
        <member name="P:itk.itkPixelType.IsScalar">
            <summary>
Get if the pixel is a scalar value (one value per pixel)
or a vector/array value (mor than one value per pixel).
</summary>
            <returns>True if the type is a scalar, false otherwise.</returns>
        </member>
        <member name="P:itk.itkPixelType.Zero">
            <summary>Get the zero value of the single element pixel type.</summary>
        </member>
        <member name="P:itk.itkPixelType.MaxValue">
            <summary>Get the maximum value of the single element pixel type.</summary>
        </member>
        <member name="P:itk.itkPixelType.MinValue">
            <summary>Get the minimum value of the single element pixel type.</summary>
        </member>
        <member name="P:itk.itkPixelType.PixelSize">
            <summary>Get the number of bits the pixel type occupies.</summary>
            <remarks>
Array element types (eg. Vector, CovariantVector) are adjusted for the
size of the array by multiplying by the number of components in the array.
</remarks>
        </member>
        <member name="P:itk.itkPixelType.NumberOfComponentsPerPixel">
            <summary>Get the number of components in array pixel types.</summary>
            <remarks>
This property will be one for itkPixelArrayEnum::Scalar or zero if
unknown at compile time (eg. itkPixelArrayEnum::VariableLengthVector).
</remarks>
        </member>
        <member name="P:itk.itkPixelType.ArrayAsEnum">
            <summary>Get the type of the pixel element as an enumeration.</summary>
        </member>
        <member name="P:itk.itkPixelType.TypeAsEnum">
            <summary>Get the type of the pixel as an enumeration.</summary>
        </member>
        <member name="M:itk.itkPixelType.#ctor(itk.itkPixelTypeEnum,itk.itkPixelArrayEnum,System.UInt32)">
            <summary>Constructor taking the pixel type and number of components in array types.</summary>
            <param name="typeAsEnum">The enumerated type of the pixel.</param>
            <param name="arrayAsEnum">The enumerated type of array.</param>
            <param name="numberOfComponentsPerPixel">The number of components in the pixel array.</param>
        </member>
        <member name="M:itk.itkPixelType.#ctor(itk.itkPixelTypeEnum)">
            <summary>Default constructor taking the pixel type. The type defaults to a single value (not an array).</summary>
            <param name="typeAsEnum">The enumerated type of the pixel.</param>
        </member>
        <member name="T:itk.itkPixelType">
            <summary>
This class is a managed replacement for the Image template variable TPixel.
This class also acts in the role of itk::NumericTraits.
</summary>
            <remarks>
In native itk, images are templated over the pixel type: TPixel (eg. unsigned
char, float, etc). In ManagedITK, to allow for the specification of image types
at runtime, the itkPixelType and itkPixel classes were introduced.
</remarks>
        </member>
        <member name="T:itk.itkPixelArrayEnum">
            <summary>This enumeration lists all the possible array types.</summary>
        </member>
        <member name="T:itk.itkPixelTypeEnum">
            <summary>This enumeration lists all the possible pixel types.</summary>
        </member>
        <member name="P:itk.INativePointer.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.INativePointer.MangledTypeString">
            <summary>Get a string representing the type instance of this INativePointer.</summary>
            <example>"IUC2", "IF3", "IVF22".</example>
        </member>
        <member name="T:itk.INativePointer">
            <summary>
This interface is implemented by any objects which wrap a native ITK object.
</summary>
            <remarks>
The INativePointer interface exposes two properties: MangledTypeString and NativePointer.
</remarks>
        </member>
        <member name="M:itk.QuadEdge.IsHalfEdge">
Queries. 
</member>
        <member name="M:itk.QuadEdge.GetInvRot">
Inverse operators 
</member>
        <member name="M:itk.QuadEdge.GetDprev">
Returns the previous edge with same Right face and same Destination.
   *  The first edge encountered when moving clockwise from e around e-&gt;Dest.
   *  (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetRprev">
Returns the previous edge with same Right face. The first edge
   *  encountered when moving clockwise from e around e-&gt;Right.
   *  (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetLprev">
Returns previous edge with same Left face. The first edge
   *  encountered when moving clockwise from e around e-&gt;Left.  
   * (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetOprev">
Returns previous edge with same Origin
   *  (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetDnext">
Returns next edge with same right face and same Destination. The
   *  first edge encountered when moving counter-clockwise from e
   *  (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetRnext">
Returns next edge with same Right face. The first edge
   * encountered when moving counter-clockwise from e around e-&gt;Right.
   * (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetLnext">
Returns next edge with same Left face
   * (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetSym">
Returns the symetric edge
   * (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.Splice(itk.QuadEdge*)">
 \brief Basic quad-edge topological method.

 This method describes all possible topological operations on an edge.

 It is its own inverse. It works in two ways:

   1. If this-&gt;GetOrg() != b-&gt;GetOrg(), it slice a face in two.
   2. If this-&gt;GetOrg() == b-&gt;GetOrg(), it unifies two faces.

 \warning This class only handles of the connectivity and is not aware
    of the geometry that lies at the \ref GeometricalQuadEdge level.
    It is strongly discouraged to use this method. Instead you should
    use itk::QuadEdgeMesh::Splice it's geometry aware version.


</member>
        <member name="M:itk.QuadEdge.GetOnext">
Sub-algebra Get methods. 
   *  Returns edge with same Origin (see 
   *  "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.SetOnext(itk.QuadEdge*)">
Sub-algebra Set methods. 
</member>
        <member name="M:itk.QuadEdge.#ctor">
Object creation methods. 
</member>
        <member name="M:itk.QuadEdge.BeginOnext">
Basic iterators methods. 
</member>
        <member name="D:itk.QuadEdge.Iterator">
Iterator types. 
</member>
        <member name="T:itk.QuadEdge">
\class QuadEdge
 * \brief Base class for the implementation of a quad-edge data structure as
 * proposed in "Guibas and Stolfi 1985"
 *
 * \author Alexandre Gouaillard, Leonardo Florez-Valencia, Eric Boix
 *
 * This implementation was contributed as a paper to the Insight Journal
 * http://insight-journal.org/midas/handle.php?handle=1926/306
 *
 * \sa "Accessing adjacent edges."
 *
 * \ingroup MeshObjects

</member>
        <member name="F:itk.GDCMSeriesFileNames.m_SeriesUIDs">
Internal structure to keep the list of series UIDs 
</member>
        <member name="F:itk.GDCMSeriesFileNames.m_SerieHelper">
Internal structure to order serie from one directory 
</member>
        <member name="F:itk.GDCMSeriesFileNames.m_InputFileNames">
Internal structure to keep the list of input/output filenames 
</member>
        <member name="F:itk.GDCMSeriesFileNames.m_OutputDirectory">
Contains the output directory where the DICOM serie should be written 
</member>
        <member name="F:itk.GDCMSeriesFileNames.m_InputDirectory">
Contains the input directory where the DICOM serie is found 
</member>
        <member name="M:itk.GDCMSeriesFileNames.SetLoadPrivateTags(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Parse any private tags in the DICOM file. Defaults to false
   * to skip private tags. This makes loading DICOM files faster when
   * private tags are not needed.

</member>
        <member name="M:itk.GDCMSeriesFileNames.SetLoadSequences(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Parse any sequences in the DICOM file. Defaults to false
   *  to skip sequences. This makes loading DICOM files faster when
   *  sequences are not needed.

</member>
        <member name="M:itk.GDCMSeriesFileNames.AddSeriesRestriction(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add more restriction on the selection of a Series. This follow the same 
   * approach as SetUseSeriesDetails, but allow a user to add even more DICOM
   * tags to take into account for subrefining a set of DICOM files into multiple
   * series. Format for tag is "group|element" of a DICOM tag.
   * \warning User need to set SetUseSeriesDetails(true)

</member>
        <member name="M:itk.GDCMSeriesFileNames.GetSeriesHelper">
Returns a pointer to the SeriesHelper class.  This access allows
   *   the files as gdcm dicom objects in a series to be queried for
   *   dicom tag values prior to reading the series.   Such querying is
   *   useful to determine which series should be read - e.g., to determine
   *   which is the T2 scan, etc.

</member>
        <member name="M:itk.GDCMSeriesFileNames.GetUseSeriesDetails">
Returns true if using additional series information such as ProtocolName
   *   and SeriesName to identify when a single SeriesUID contains
   *   multiple 3D volumes - as can occur with perfusion and DTI imaging

</member>
        <member name="M:itk.GDCMSeriesFileNames.SetUseSeriesDetails(System.Boolean)">
Use additional series information such as ProtocolName
   *   and SeriesName to identify when a single SeriesUID contains
   *   multiple 3D volumes - as can occur with perfusion and DTI imaging

</member>
        <member name="M:itk.GDCMSeriesFileNames.SetRecursive(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Recursively parse the input directory 
</member>
        <member name="M:itk.GDCMSeriesFileNames.GetSeriesUIDs">
Returns a vector containing all the UIDs found when parsing the
   * direcory specified via SetDirectory. If no direcory is specified 
   * return an empty vector.  An extended UID may be returned/used if 
   * SetUseSeriesDetails(true) has been called.

</member>
        <member name="M:itk.GDCMSeriesFileNames.GetFileNames(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst)">
Returns a vector containing the series' file names. The file
   * names are ordered by the strategy define in header. 
   * All DICOM files have the same exact UID equal to the one user's 
   * specified.  An extended UID may be returned/used if 
   * SetUseSeriesDetails(true) has been called.

</member>
        <member name="M:itk.GDCMSeriesFileNames.GetOutputFileNames">
Returns a vector containing the series' file names. The file
   * names are ordered in the same extact order as the input one. 
   * This could be dangerous if the writing has changed 3rd position
   * or some other DICOM tag in the header

</member>
        <member name="M:itk.GDCMSeriesFileNames.SetOutputDirectory(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the directory where the output DICOM serie should be written. 
</member>
        <member name="M:itk.GDCMSeriesFileNames.GetInputFileNames">
Returns a vector containing the series' file names. The file
   * names are ordered by the strategy define in header. 
   * No sorting is done based on UID 
</member>
        <member name="M:itk.GDCMSeriesFileNames.SetDirectory(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the directory that contains the DICOM series. 
</member>
        <member name="M:itk.GDCMSeriesFileNames.SetInputDirectory(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the directory that contains the DICOM series. 
</member>
        <member name="M:itk.GDCMSeriesFileNames.SetInputDirectory(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Set the directory that contains the DICOM series. 
</member>
        <member name="M:itk.GDCMSeriesFileNames.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="M:itk.GDCMSeriesFileNames.New">
Method for creation through the object factory. 
</member>
        <member name="D:itk.GDCMSeriesFileNames.Self">
Standard class typedefs. 
</member>
        <member name="F:gdcm.SerieHelper.UserLessThanFunction">
\brief If user knows more about his images than gdcm does,
       he may supply his own comparison function.
</member>
        <member name="F:gdcm.SerieHelper.DirectOrder">
\brief whether we want to sort in direct order or not (reverse order).
       To be used by aware user only
</member>
        <member name="F:gdcm.SerieHelper.LoadMode">
\brief Bit string integer (each one considered as a boolean)
       Bit 0 : Skip Sequences,    if possible
       Bit 1 : Skip Shadow Groups if possible
       Probabely, some more to add
</member>
        <member name="M:gdcm.SerieHelper.SetUserLessThanFunction(=FUNC:System.Boolean(gdcm.File*,gdcm.File*))">
to allow user to give is own comparison function
</member>
        <member name="M:gdcm.SerieHelper.SetSortOrderToReverse">
Brief User wants the files to be sorted Reverse Order 
</member>
        <member name="M:gdcm.SerieHelper.SetSortOrderToDirect">
Brief User wants the files to be sorted Direct Order (default value)
</member>
        <member name="M:gdcm.SerieHelper.SetLoadMode(System.Int32)">
\brief Sets the LoadMode as a boolean string. 
       LD_NOSEQ, LD_NOSHADOW, LD_NOSHADOWSEQ
       ... (nothing more, right now)
       WARNING : before using LD_NOSHADOW, be sure *all* your files
       contain accurate values in the 0x0000 element (if any) 
       of *each* Shadow Group. The parser will fail if the size is wrong !
@param   mode Load mode to be used    

</member>
        <member name="M:gdcm.SerieHelper.CreateUniqueSeriesIdentifier(gdcm.File*)">
\brief Create a string that uniquely identifies a series.   By default
</member>
        <member name="M:gdcm.SerieHelper.CreateDefaultUniqueSeriesIdentifier">
\brief This function will add the following DICOM tag as being part of a
'fake' uid. This is usefull when the Serie UID is not enough to disseminate
into multiple sub serie when needed:
0020 0011 Series Number
0018 0024 Sequence Name
0018 0050 Slice Thickness
0028 0010 Rows
0028 0011 Columns
</member>
        <member name="M:gdcm.SerieHelper.SetUseSeriesDetails(System.Boolean)">
\brief Use additional series information such as ProtocolName
       and SeriesName to identify when a single SeriesUID contains
       multiple 3D volumes - as can occur with perfusion and DTI imaging
</member>
        <member name="M:gdcm.SerieHelper.AddRestriction(System.UInt16,System.UInt16,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
Allow user to refine the selection of a serie by specifying operation (op) on a 
particular tag (group, elem) with a particular value (value).
</member>
        <member name="M:gdcm.SerieHelper.AddRestriction(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Same as above accept use the format: "0x1234|0x5678"
</member>
        <member name="M:gdcm.SerieHelper.AddRestriction(System.UInt16,System.UInt16)">
Allow user to specify that the serie should also be consistent (== operation),
on the particular tag (group,element)
</member>
        <member name="M:gdcm.SerieHelper.AddRestriction(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
All the following allow user to restrict DICOM file to be part
of a particular serie
</member>
        <member name="M:gdcm.SerieHelper.GetCurrentSerieUIDFileSetUID">
brief returns the 'Series Instance UID' Single SerieUID FileSet
</member>
        <member name="M:gdcm.SerieHelper.GetFileList">
\brief Gets the FIRST Single SerieUID Fileset.
       Deprecated; kept not to break the API
\note Caller must call OrderFileList first
@return the (first) Single SerieUID Fileset
</member>
        <member name="M:gdcm.SerieHelper.AddFileName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\todo should return bool or throw error ?
</member>
        <member name="D:gdcm.SerieHelper.SingleSerieUIDFileSetmap">
SingleSerieUIDFileSetmap replaces the former CoherentFileListmap
( List were actually std::vectors, and wher no coherent at all :
  They were only Single SeriesInstanceUID File sets)
</member>
        <member name="T:gdcm.SerieHelper">
\brief  
 This class should be used for a stack of 2D dicom images.
  
  - It allows to explore (recursively or not) a directory and 
  makes a set of 'Coherent Files' lists (coherent : same SerieUID)
  - It allows :
  - - to sort any of the Coherent File list on the image position.
  - - to split any of the Single SerieUID Filesets (better use this name than
  'Coherent File List' : it's NOT a std::list, files are NOT coherent ...)
   into several XCoherent Filesets 
  XCoherent stands for 'Extra Coherent' (same orientation, or same position)

</member>
        <member name="D:gdcm.XCoherentFileSetmap">
\brief XCoherent stands for 'Extra Coherent',
       (The name 'Coherent' would be enough but it was used before;
       I don't want to put a bomb in the code)
       Any 'better name' is welcome !
</member>
        <member name="M:gdcm.Debug.DebugToFileOff">
\brief Next debug messages will be sent in the standard output
</member>
        <member name="M:gdcm.Debug.DebugToFileOn">
\brief Next debug messages will be sent in the debug file
</member>
        <member name="M:gdcm.Debug.SetDebugToFile(System.Boolean)">
\brief This is a global flag that controls if debug are redirected
       to a file or not
</member>
        <member name="M:gdcm.Debug.DebugOff">
\brief Sets the Debug Flag to false
</member>
        <member name="M:gdcm.Debug.DebugOn">
\brief Sets the Debug Flag to true
</member>
        <member name="M:gdcm.Debug.SetDebugFlag(System.Boolean)">
\brief This is a global flag that controls whether any debug, warning
       messages are displayed.
</member>
        <member name="T:gdcm.Debug">
\brief Debug is an object for debugging in program.
It has 2 debugging modes :
 - error : for bad library use, seriously wrong DICOM
 - debug : for information/debug messages
 - warning : for warning about DICOM quality (kosher)
 - assert : design by contract implementation. A function should have 
            proper input and proper output. 
            (should not happen, not user controlled)

A debugging message is only shown if the flag is on (DebugFlag)
This is static var and can be set at beginning of code:
        gdcm::Debug::SetDebugOn();

</member>
        <member name="F:gdcm.Element.Value">
value (coded as a std::string) of the Element
</member>
        <member name="F:gdcm.Element.Elem">
Dicom Element number
</member>
        <member name="F:gdcm.Element.Group">
Dicom Group number
</member>
        <member name="T:gdcm.Element">
\brief structure, for internal use only

</member>
        <member name="T:gdcm.LodModeType">
\brief Loading mode
</member>
        <member name="T:gdcm.CompOperators">
\brief comparison operators (as used in SerieHelper::AddRestriction() )
</member>
        <member name="T:gdcm.DicomDirType">
\brief type of the elements composing a DICOMDIR (for internal use only)
</member>
        <member name="T:gdcm.FileType">
\brief various types of a DICOM file (for internal use only)
</member>
        <member name="D:gdcm.TagName">
\brief TagName is made to hold the 'non hexa" fields (VR, VM, Name) 
       of Dicom Entries
</member>
        <member name="D:gdcm.TagKey">
\brief TagKey is made to hold the standard Dicom Tag 
              (Group number, Element number)
Instead of using the two '16 bits integers' as the Hask Table key, we
converted into a string (e.g. 0x0018,0x0050 converted into "0018|0050")
It appears to be a huge waste of time.
We'll fix the mess up -without any change in the API- as soon as the bench
marks are fully performed.
</member>
        <member name="F:itk.GDCMImageIO.m_GlobalNumberOfDimensions">
defines whether this image is a 2D out of a 2D image
   *  or a 2D out of a 3D image. 
</member>
        <member name="M:itk.GDCMImageIO.SetLoadPrivateTagsDefault(System.Boolean)">
Global method to define the default value for
   * LoadPrivateTags. When instances of GDCMImageIO are created, the
   * ivar LoadPrivateTags is initialized to the value of
   * LoadPrivateTagsDefault.  This method is useful when relying on the
   * IO factory mechanism to load images rather than specifying a
   * particular ImageIO object on the readers. Default is false.
   * \warning this is a GDCM 1.x only option, no effect on GDCM 2.x

</member>
        <member name="M:itk.GDCMImageIO.SetLoadSequencesDefault(System.Boolean)">
Global method to define the default value for
   * LoadSequences. When instances of GDCMImageIO are created, the
   * ivar LoadSequences is initialized to the value of
   * LoadSequencesDefault.  This method is useful when relying on the
   * IO factory mechanism to load images rather than specifying a
   * particular ImageIO object on the readers. Default is false.
   * \warning this is a GDCM 1.x only option, no effect on GDCM 2.x

</member>
        <member name="M:itk.GDCMImageIO.SetLoadPrivateTags(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Parse any private tags in the DICOM file. Defaults to the value
   * of LoadPrivateTagsDefault. Loading DICOM files is faster when
   * private tags are not needed.
   * \warning this is a GDCM 1.x only option, no effect on GDCM 2.x

</member>
        <member name="M:itk.GDCMImageIO.SetLoadSequences(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Parse any sequences in the DICOM file. Defaults to the value of
   *  LoadSequencesDefault. Loading DICOM files is faster when
   *  sequences are not needed.
   * \warning this is a GDCM 1.x only option, no effect on GDCM 2.x

</member>
        <member name="M:itk.GDCMImageIO.SetMaxSizeLoadEntry(System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
A DICOM file can contains multiple binary stream that can be very long
   * For example an Overlay on the image. Most of the time user do not want to load
   * this binary structure in memory since it can consume lot of memory. Therefore
   * any field that is bigger than the default value 0xfff is discarded and just seek'd 
   * This method allow advanced user to force the reading of such field
   * \warning this is a GDCM 1.x only option, no effect on GDCM 2.x

</member>
        <member name="M:itk.GDCMImageIO.GetLabelFromTag(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method for consulting the DICOM dictionary and recovering the text
   * description of a field using its numeric tag represented as a string.  If
   * the tagkey is not found in the dictionary then this static method return
   * false and the value "Unknown " in the labelId. If the tagkey is found then
   * this static method returns true and the actual string descriptor of the
   * tagkey is returned in the variable labelId. 
</member>
        <member name="M:itk.GDCMImageIO.GetValueFromTag(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
More general method to retrieve an arbitrary DICOM value based
   * on a DICOM Tag (eg "0123|4567").
   * WARNING: You need to use the lower case for hex 0x[a-f], for instance:
   * "0020|000d" instead of "0020|000D" (the latter won't work)

</member>
        <member name="M:itk.GDCMImageIO.GetPatientName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
Convenience methods to query patient information and scanner
   * information. These methods are here for compatibility with the
   * DICOMImageIO2 class and as such should not be used in any new code.
   * They rely on properly preallocated buffer, which is not a good practice.
   * Instead user are encourage to use directly the GetValueFromTag function

</member>
        <member name="M:itk.GDCMImageIO.SetKeepOriginalUID(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Preserve the original DICOM UID of the input files

</member>
        <member name="M:itk.GDCMImageIO.GetStudyInstanceUID">
Access the generated DICOM UID's. 
</member>
        <member name="M:itk.GDCMImageIO.GetUIDPrefix">
Macro to access the DICOM UID prefix. By default this is the ITK
   *  root id. This default can be overriden if the exam is for example
   *  part of an existing study.

</member>
        <member name="M:itk.GDCMImageIO.GetRescaleSlope">
Macro to access Rescale Slope and Rescale Intercept. Which are
   * needed to rescale properly image when needed. User then need to 
   * Always check those value when access value from the DICOM header 
</member>
        <member name="M:itk.GDCMImageIO.Write(System.Void!System.Runtime.CompilerServices.IsConst*)">
Writes the data to disk from the memory buffer provided. Make sure
   * that the IORegion has been set properly. 
</member>
        <member name="M:itk.GDCMImageIO.WriteImageInformation">
Writes the spacing and dimentions of the image.
   * Assumes SetFileName has been called with a valid file name. 
</member>
        <member name="M:itk.GDCMImageIO.CanWriteFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Determine the file type. Returns true if this ImageIO can write the
   * file specified. GDCM triggers on ".dcm" and ".dicom". 
</member>
        <member name="M:itk.GDCMImageIO.GetInternalComponentType">
Get the original component type of the image. This differs from
   * ComponentType which may change as a function of rescale slope and
   * intercept. 
</member>
        <member name="M:itk.GDCMImageIO.Read(System.Void*)">
Reads the data from disk into the memory buffer provided. 
</member>
        <member name="M:itk.GDCMImageIO.ReadImageInformation">
Set the spacing and dimesion information for the current filename. 
</member>
        <member name="M:itk.GDCMImageIO.CanReadFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Determine the file type. Returns true if this ImageIO can read the
   * file specified. 
</member>
        <member name="M:itk.GDCMImageIO.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="M:itk.GDCMImageIO.New">
Method for creation through the object factory. 
</member>
        <member name="D:itk.GDCMImageIO.Self">
Standard class typedefs. 
</member>
        <member name="M:itk.IOCommon.FileExists(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Given a filename determine whether it exists and return true if
   * it does.
   *
   * \deprecated in ITK 3.8, please use
   * itksys::SystemTools::FileExists(fileName) instead.

</member>
        <member name="M:itk.IOCommon.ExtractFileName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Given a full filename, extracts just the filename.
   *
   * \deprecated in ITK 3.8, please use
   * itksys::SystemTools::GetFilenameName(fileName) instead.

</member>
        <member name="M:itk.IOCommon.ExtractFileExtension(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Given a full filename, extracts just the file extension.
   *
   * \deprecated in ITK 3.8, please use
   * itksys::SystemTools::GetFilenameExtension(fileName) or
   * itksys::SystemTools::GetFilenameLastExtension(fileName) instead.

</member>
        <member name="M:itk.IOCommon.ExtractFilePath(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Given a full filename, extracts just the pathname.  
   *
   * \deprecated in ITK 3.8, please use
   * itksys::SystemTools::GetFilenamePath(fileName) instead.

</member>
        <member name="M:itk.IOCommon.ComputeSizeOfAtomicPixelType(itk.IOCommon.AtomicPixelType!System.Runtime.CompilerServices.IsConst)">
Calculate the size, in bytes, that the atomic pixel type occupies. 
</member>
        <member name="M:itk.IOCommon.AtomicPixelTypeToString(itk.IOCommon.AtomicPixelType!System.Runtime.CompilerServices.IsConst)">
Convert the enumerated type to a string representation. 
</member>
        <member name="T:itk.IOCommon">
\class IOCommon
   * \brief Centralized funtionality for IO classes.
   *
   * This class provides encapsulated functionality to support the IO classes.
   *
   * \ingroup IOFilters
   *

</member>
        <member name="M:itk.ImageSeriesWriterException.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Constructor. 
</member>
        <member name="M:itk.ImageSeriesWriterException.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Constructor. 
</member>
        <member name="M:itk.ImageSeriesWriterException.GetNameOfClass">
Run-time information. 
</member>
        <member name="T:itk.ImageSeriesWriterException">
\class ImageSeriesWriterException
 *  \brief Base exception class for IO problems during writing. 
</member>
        <member name="M:itk.ImageFileWriterException.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Constructor. 
</member>
        <member name="M:itk.ImageFileWriterException.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Constructor. 
</member>
        <member name="M:itk.ImageFileWriterException.GetNameOfClass">
Run-time information. 
</member>
        <member name="T:itk.ImageFileWriterException">
\brief Base exception class for IO problems during writing.
 *
 * \class ImageFileWriterException

</member>
        <member name="M:itk.CStyleCommand.Execute(itk.Object!System.Runtime.CompilerServices.IsConst*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Execute the callback function with a const Object 
</member>
        <member name="M:itk.CStyleCommand.Execute(itk.Object*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Execute the callback function. 
</member>
        <member name="M:itk.CStyleCommand.SetClientDataDeleteCallback(=FUNC:System.Void(System.Void*))">
Set the callback to delete the client data. 
</member>
        <member name="M:itk.CStyleCommand.SetCallback(=FUNC:System.Void(itk.Object*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*))">
Set the C callback function pointer to be called at Execute time. 
</member>
        <member name="M:itk.CStyleCommand.SetClientData(System.Void*)">
Set the client data that will be passed into the C function when 
   * it is called. 
</member>
        <member name="M:itk.CStyleCommand.New">
Method for creation through the object factory. 
</member>
        <member name="M:itk.CStyleCommand.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="D:itk.CStyleCommand.Self">
Standard class typedefs. 
</member>
        <member name="D:itk.CStyleCommand.FunctionPointer">
Typedefs for C-style callbacks. 
</member>
        <member name="T:itk.CStyleCommand">
\class CStyleCommand
 *  \brief Command subclass that calls a pointer to a C function
 *
 *  CStyleCommand calls a pointer to a C function with the following
 *  arguments void func(Object *,void *clientdata)
 *  The clientdata is data that the command wants passed to itself
 *  each time.
 * 
 * \ingroup ITKSystemObjects

</member>
        <member name="M:itk.Command.Execute(itk.Object!System.Runtime.CompilerServices.IsConst*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Abstract method that defines the action to be taken by the command.
   * This variant is expected to be used when requests comes from a 
   * const Object 
</member>
        <member name="M:itk.Command.Execute(itk.Object*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Abstract method that defines the action to be taken by the command. 
</member>
        <member name="M:itk.Command.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="D:itk.Command.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.Command">
\class Command
 * \brief superclass for callback/observer methods
 *
 * Command is an implementation of the command design pattern that is used
 * in callbacks (such as StartMethod(), ProgressMethod(), and EndMethod()) in
 * ITK. itkObject implements a Subject/Observer pattern. When a subject 
 * needs to notify a observer, it does so using a itkCommand.  The Execute 
 * method is called to run the command.
 *
 * \ingroup ITKSystemObjects

</member>
        <member name="M:itk.ProgressReporter.CompletedPixel">
Called by a filter once per pixel.  
</member>
        <member name="M:itk.ProgressReporter.Dispose">
Destructor sets progress to 1 because the filter has finished.  
</member>
        <member name="M:itk.ProgressReporter.#ctor(itk.ProcessObject*,System.Int32,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
Constructor sets progress to 0 because the filter is starting.  
</member>
        <member name="T:itk.ProgressReporter">
\class ProgressReporter
 * \brief Implements progress tracking for a filter.
 *
 * This is a utility class for use by filter implementations in
 * GenerateData() and ThreadedGenerateData().
 *
 * The class constructor sets the progress to 0, and the destructor
 * sets it to 1.  In between, there should be one call to
 * CompletedPixel() per pixel.  The reporter will automatically update
 * the filter's progress at an interval resulting in the specified
 * number of updates.  The default number of updates is 100.
 *
 * Example usage:
 *
 * \code
 *   ProgressReporter progress(this, threadId,
 *                             threadRegion.GetNumberOfPixels(), 100);
 *   for( each pixel )
 *     {
 *     ...
 *     progress.CompletedPixel();
 *     }
 * \endcode
 *
 * When used in a non-threaded filter, the threadId argument should be 0.
 *
 * \sa
 * This class is a tool for filter implementers to equip a filter to
 * report on its progress.  For information on how to acquire this
 * progress information, see:
 *  - ProcessObject::ReportProgress()
 *  - Object::AddObserver()

</member>
        <member name="M:itk.ImageIOFactory.RegisterBuiltInFactories">
Register Built-in factories 
</member>
        <member name="M:itk.ImageIOFactory.CreateImageIO(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,itk.ImageIOFactory.FileModeType)">
Create the appropriate ImageIO depending on the particulars of the file. 
</member>
        <member name="D:itk.ImageIOFactory.ImageIOBasePointer">
Convenient typedefs. 
</member>
        <member name="M:itk.ImageIOFactory.GetNameOfClass">
Class Methods used to interface with the registered factories 
Run-time type information (and related methods). 
</member>
        <member name="D:itk.ImageIOFactory.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.ImageIOFactory">
\class ImageIOFactory
 * \brief Create instances of ImageIO objects using an object factory.

</member>
        <member name="M:itk.ImageFileReaderException.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Constructor. 
</member>
        <member name="M:itk.ImageFileReaderException.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Constructor. 
</member>
        <member name="M:itk.ImageFileReaderException.GetNameOfClass">
Run-time information. 
</member>
        <member name="T:itk.ImageFileReaderException">
\class ImageFileReaderException
 *
 * \brief Base exception class for IO conflicts.

</member>
        <member name="M:itk.ImageIOBase.GetSplitRegionForWritingCanStreamWrite(System.UInt32,System.UInt32,itk.ImageIORegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
an implementation of  ImageRegionSplitter:GetSplit

</member>
        <member name="M:itk.ImageIOBase.GetActualNumberOfSplitsForWritingCanStreamWrite(System.UInt32,itk.ImageIORegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
an implementation of ImageRegionSplitter:GetNumberOfSplits 

</member>
        <member name="M:itk.ImageIOBase.AddSupportedWriteExtension(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Insert an extension to the list of supported extensions for writing. 
</member>
        <member name="M:itk.ImageIOBase.AddSupportedReadExtension(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Insert an extension to the list of supported extensions for reading. 
</member>
        <member name="M:itk.ImageIOBase.ReadBufferAsBinary(std.basic_istream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*,System.Int32!System.Runtime.CompilerServices.IsLong)">
Convenient method to read a buffer as binary. Return true on success. 
</member>
        <member name="M:itk.ImageIOBase.ReadBufferAsASCII(std.basic_istream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*,itk.ImageIOBase.IOComponentType,System.Int32!System.Runtime.CompilerServices.IsLong)">
Convenient method to read a buffer as ASCII text. 
</member>
        <member name="M:itk.ImageIOBase.WriteBufferAsASCII(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void!System.Runtime.CompilerServices.IsConst*,itk.ImageIOBase.IOComponentType,System.Int32!System.Runtime.CompilerServices.IsLong)">
Convenient method to write a buffer as ASCII text. 
</member>
        <member name="M:itk.ImageIOBase.GetSliceStride">
Convenient method for accessing the number of bytes to get to the 
   * next slice. Returns m_Strides[3]. 
</member>
        <member name="M:itk.ImageIOBase.GetRowStride">
Convenient method for accessing the number of bytes to get to the 
   * next row. Returns m_Strides[2]. 
</member>
        <member name="M:itk.ImageIOBase.GetComponentStride">
Convenient method for accessing number of bytes to get to the next pixel 
   * component. Returns m_Strides[0]. 
</member>
        <member name="M:itk.ImageIOBase.ComputeStrides">
Calculates the different strides (distance from one thing to the next).
   * Upon return,
   * strides[0] = bytes to get to the next component of a pixel,
   * strides[1] = bytes to get to the next pixel in x direction,
   * strides[2] = bytes to get to the next row in y direction,
   * strides[3] = bytes to get to the next slice in z direction, etc. 
</member>
        <member name="M:itk.ImageIOBase.GetPixelSize">
Compute the size (in bytes) of the pixel. For
   * example, and RGB pixel of unsigned char would have size 3 bytes. 
</member>
        <member name="M:itk.ImageIOBase.Resize(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst*)">
Resize the ImageIOBase object to new dimensions. 
</member>
        <member name="M:itk.ImageIOBase.Reset(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Return the object to an initialized state, ready to be used 
</member>
        <member name="F:itk.ImageIOBase.m_Strides">
Stores the number of bytes it takes to get to the next 'thing'
   * e.g. component, pixel, row, slice, etc. 
</member>
        <member name="F:itk.ImageIOBase.m_Direction">
The arrays which store the direction cosines of the image. 
</member>
        <member name="F:itk.ImageIOBase.m_Origin">
The array which stores the origin of the image. 
</member>
        <member name="F:itk.ImageIOBase.m_Spacing">
The array which stores the spacing of pixels in the 
   * x, y, z directions. 
</member>
        <member name="F:itk.ImageIOBase.m_Dimensions">
The array which stores the number of pixels in the x, y, z directions. 
</member>
        <member name="F:itk.ImageIOBase.m_IORegion">
The region to read or write. The region contains information about the
   * data within the region to read or write. 
</member>
        <member name="F:itk.ImageIOBase.m_UseStreamedWriting">
Should we use streaming for writing 
</member>
        <member name="F:itk.ImageIOBase.m_UseStreamedReading">
Should we use streaming for reading 
</member>
        <member name="F:itk.ImageIOBase.m_UseCompression">
Should we compress the data? 
</member>
        <member name="F:itk.ImageIOBase.m_NumberOfDimensions">
The number of independent dimensions in the image. 
</member>
        <member name="F:itk.ImageIOBase.m_NumberOfComponents">
Stores the number of components per pixel. This will be 1 for 
   * grayscale images, 3 for RGBPixel images, and 4 for RGBPixelA images. 
</member>
        <member name="F:itk.ImageIOBase.m_FileName">
Filename to read 
</member>
        <member name="F:itk.ImageIOBase.m_Initialized">
Does the ImageIOBase object have enough info to be of use? 
</member>
        <member name="F:itk.ImageIOBase.m_ByteOrder">
Big or Little Endian, and the type of the file. (May be ignored.) 
</member>
        <member name="F:itk.ImageIOBase.m_ComponentType">
Used internally to keep track of the type of the component. It is set
   * when ComputeStrides() is invoked. 
</member>
        <member name="F:itk.ImageIOBase.m_PixelType">
Used internally to keep track of the type of the pixel. 
</member>
        <member name="M:itk.ImageIOBase.GetSupportedWriteExtensions">
This method returns an array with the list of filename extensions
   * supported for writing by this ImageIO class. This is intended to
   * facilitate GUI and application level integration. 

</member>
        <member name="M:itk.ImageIOBase.GetSupportedReadExtensions">
This method returns an array with the list of filename extensions
   * supported for reading by this ImageIO class. This is intended to
   * facilitate GUI and application level integration. 

</member>
        <member name="D:itk.ImageIOBase.ArrayOfExtensionsType">
Type for the list of strings to be used for extensions.  
</member>
        <member name="M:itk.ImageIOBase.GetSplitRegionForWriting(System.UInt32,System.UInt32,itk.ImageIORegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.ImageIORegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
returns the ith IORegion 
   * 
   * numberOfActualSplits should be the value returned from GetActualNumberOfSplitsForWriting with the same parameters
   *
   * Derieved classes should overload this method to return a compatible region

</member>
        <member name="M:itk.ImageIOBase.GetActualNumberOfSplitsForWriting(System.UInt32,itk.ImageIORegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.ImageIORegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Before this method is called all the configuration will be done,
   * that is Streaming/PasteRegion/Compression/Filename etc
   * If pasting is being used the number of requested splits is for that 
   * region not the largest. The derived ImageIO class should verify that 
   * the file is capable of being writen with this configuration.
   * If pasted is enabled and is not support or does not work with the file, 
   * then an excepetion should be thrown. 
   *
   * The default implementation depends on CanStreamWrite.
   * If false then 1 is returned (unless pasting is indicated), so that the whole file will be updated in one region.
   * If true then its assumed that any arbitrary region can be writen
   * to any file. So the users request will be respected. If a derived
   * class has more restictive conditions then they should be checked

</member>
        <member name="M:itk.ImageIOBase.GenerateStreamableReadRegionFromRequestedRegion(itk.ImageIORegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method for supporting streaming.  Given a requested region, determine what
   * could be the region that we can read from the file. This is called the
   * streamable region, which will be equal or smaller than the
   * LargestPossibleRegion (unless it was dimensionaly clipped) and
   * greater or equal to the RequestedRegion
   *
   * the resulting IORegion may be a greater dimensions the the
   * requested IORegion, if the the derived class is unable to read
   * the requested region. For example if the file has a size of [ 10,
   * 10, 10] but the requested region is [10, 10] the return may be 3 dimensions.

</member>
        <member name="M:itk.ImageIOBase.SupportsDimension(System.UInt32!System.Runtime.CompilerServices.IsLong)">
The different types of ImageIO's can support data of varying
   * dimensionality. For example, some file formats are strictly 2D
   * while others can support 2D, 3D, or even n-D. This method returns
   * true/false as to whether the ImageIO can support the dimension
   * indicated. 
</member>
        <member name="M:itk.ImageIOBase.Write(System.Void!System.Runtime.CompilerServices.IsConst*)">
Writes the data to disk from the memory buffer provided. Make sure
   * that the IORegions has been set properly. The buffer is cast to a
   * pointer to the beginning of the image data. 
</member>
        <member name="M:itk.ImageIOBase.WriteImageInformation">
Writes the spacing and dimentions of the image.
   * Assumes SetFileName has been called with a valid file name. 
</member>
        <member name="M:itk.ImageIOBase.CanStreamWrite">
Determine if the ImageIO can stream writing to this file. Default is false. 
   *
   * There are two types of non exclusive streaming: pasteing subregions, and iterative
   * If true then 

</member>
        <member name="M:itk.ImageIOBase.CanWriteFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Determine the file type. Returns true if this ImageIO can read the
   * file specified. 
</member>
        <member name="M:itk.ImageIOBase.Read(System.Void*)">
Reads the data from disk into the memory buffer provided. 
</member>
        <member name="M:itk.ImageIOBase.ReadImageInformation">
Read the spacing and dimentions of the image.
   * Assumes SetFileName has been called with a valid file name. 
</member>
        <member name="M:itk.ImageIOBase.CanStreamRead">
Determine if the ImageIO can stream reading from this
      file. Default is false. 
</member>
        <member name="M:itk.ImageIOBase.CanReadFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Determine the file type. Returns true if this ImageIO can read the
   * file specified. 
</member>
        <member name="M:itk.ImageIOBase.GetComponentSize">
Compute the size (in bytes) of the components of a pixel. For
   * example, and RGB pixel of unsigned char would have a 
   * component size of 1 byte. This method can be invoked only after
   * the component type is set. 
</member>
        <member name="M:itk.ImageIOBase.GetImageSizeInComponents">
Return the number of pixels times the number
   * of components in the image. 
</member>
        <member name="M:itk.ImageIOBase.GetImageSizeInBytes">
Return the number of bytes in the image. 
</member>
        <member name="M:itk.ImageIOBase.GetImageSizeInPixels">
Return the number of pixels in the image. 
</member>
        <member name="M:itk.ImageIOBase.GetPixelStride">
Convenient method for accessing the number of bytes to get to
   * the next pixel. Returns m_Strides[1]; 
   * 
   * Please note that this methods depends the private methods
   * ComputeStrides being called, otherwise this is the incorrect value.

</member>
        <member name="D:itk.ImageIOBase.BufferSizeType">
Type for representing size of bytes, and or positions along a memory buffer 
</member>
        <member name="D:itk.ImageIOBase.SizeType">
Type for representing size of bytes, and or positions along a file 
</member>
        <member name="M:itk.ImageIOBase.GetByteOrderAsString(itk.ImageIOBase.ByteOrder)">
Convenience method returns the ByteOrder as a string. This can be
   * used for writing output files. 
</member>
        <member name="M:itk.ImageIOBase.GetFileTypeAsString(itk.ImageIOBase.FileType)">
Convenience method returns the FileType as a string. This can be
   * used for writing output files. 
</member>
        <member name="M:itk.ImageIOBase.SetByteOrder(itk.ImageIOBase.ByteOrder!System.Runtime.CompilerServices.IsConst)">
These methods indicate the byte ordering of the file you are
   * trying to read in. These methods will then either swap or not
   * swap the bytes depending on the byte ordering of the machine it
   * is being run on. For example, reading in a BigEndian file on a
   * BigEndian machine will result in no swapping. Trying to read the
   * same file on a LittleEndian machine will result in swapping.
   * Note: most UNIX machines are BigEndian while PC's and VAX's are
   * LittleEndian. So if the file you are reading in was generated on
   * a VAX or PC, SetByteOrderToLittleEndian() otherwise
   * SetByteOrderToBigEndian().  Some ImageIOBase subclasses
   * ignore these methods. 
</member>
        <member name="M:itk.ImageIOBase.SetFileType(itk.ImageIOBase.FileType!System.Runtime.CompilerServices.IsConst)">
These methods control whether the file is written binary or ASCII.
   * Many file formats (i.e., subclasses) ignore this flag. 
</member>
        <member name="M:itk.ImageIOBase.GetPixelTypeAsString(itk.ImageIOBase.IOPixelType)">
Convenience method returns the IOPixelType as a string. This can be
   * used for writing output files. 
</member>
        <member name="M:itk.ImageIOBase.GetComponentTypeAsString(itk.ImageIOBase.IOComponentType)">
Convenience method returns the IOComponentType as a string. This can be
   * used for writing output files. 
</member>
        <member name="M:itk.ImageIOBase.SetUseStreamedWriting(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Set/Get a boolean to use streaming while writing or not. 
</member>
        <member name="M:itk.ImageIOBase.SetUseStreamedReading(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Set/Get a boolean to use streaming while reading or not. 
</member>
        <member name="M:itk.ImageIOBase.SetUseCompression(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Set/Get a boolean to use the compression or not. 
</member>
        <member name="M:itk.ImageIOBase.SetNumberOfComponents(System.UInt32!System.Runtime.CompilerServices.IsConst)">
Set/Get the number of components per pixel in the image. This may
   * be set by the reading process. For SCALAR pixel types,
   * NumberOfComponents will be 1.  For other pixel types,
   * NumberOfComponents will be greater than or equal to one. 
</member>
        <member name="M:itk.ImageIOBase.SetComponentType(itk.ImageIOBase.IOComponentType!System.Runtime.CompilerServices.IsConst)">
Set/Get the component type of the image. This is always a native
   * type. 
</member>
        <member name="M:itk.ImageIOBase.SetPixelTypeInfo(type_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
SetPixelTypeInfo is used by writers to convert from an ITK
   * strongly typed pixel to a ImageIO (weaker) typed pixel. This
   * function sets these PixelType, ComponentType, and
   * NumberOfComponents based on RTTI type_info structure passed
   * in. The function returns false if the pixel type is not
   * supported. 
</member>
        <member name="M:itk.ImageIOBase.SetPixelType(itk.ImageIOBase.IOPixelType!System.Runtime.CompilerServices.IsConst)">
Set/Get the type of the pixel. The PixelTypes provides context
   * to the IO mechanisms for data conversions.  PixelTypes can be
   * SCALAR, RGB, RGBA, VECTOR, COVARIANTVECTOR, POINT, INDEX. If
   * the PIXELTYPE is SCALAR, then the NumberOfComponents should be 1.
   * Anyother of PIXELTYPE will have more than one component. 
</member>
        <member name="M:itk.ImageIOBase.SetIORegion(itk.ImageIORegion!System.Runtime.CompilerServices.IsConst)">
Specify the region of the image data to either read or
   * write. The IORegion specifies the part of the image to read or
   * write. Regions are defined with an index and a size vector. These
   * vectors define the start (lower-left corner) and length of the
   * region within the image. Make sure that the IORegion lies within
   * the image. 
</member>
        <member name="M:itk.ImageIOBase.GetDefaultDirection(System.UInt32)">
Return the directions to be assigned by default to recipient
   *  images whose dimension is smaller than the image dimension in file.  
</member>
        <member name="M:itk.ImageIOBase.SetDirection(System.UInt32,std.vector&lt;System.Double&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set/Get the image direction on an axis-by-axis basis. The
   * SetDirection() method is required when writing the image. 
</member>
        <member name="M:itk.ImageIOBase.SetSpacing(System.UInt32,System.Double)">
Set/Get the image spacing on an axis-by-axis basis. The
   * SetSpacing() method is required when writing the image. 
</member>
        <member name="M:itk.ImageIOBase.SetOrigin(System.UInt32,System.Double)">
Set/Get the image origin on a axis-by-axis basis. The SetOrigin() method
   * is required when writing the image. 
</member>
        <member name="M:itk.ImageIOBase.SetDimensions(System.UInt32,System.UInt32)">
Set/Get the image dimensions in the x, y, z, etc. directions.
   * GetDimensions() is typically used after reading the data; the
   * SetDimensions() is used prior to writing the data. 
</member>
        <member name="M:itk.ImageIOBase.SetNumberOfDimensions(System.UInt32)">
Set/Get the number of independent variables (dimensions) in the
   * image being read or written. Note this is not necessarily what
   * is written, rather the IORegion controls that. 
</member>
        <member name="T:itk.ImageIOBase.UnknownType">
\class UnknownType
Used to return information when types are unknown.

</member>
        <member name="D:itk.ImageIOBase.IndexValueType">
Types for managing image size and image index components. 
</member>
        <member name="M:itk.ImageIOBase.SetFileName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Set/Get the name of the file to be read. 
</member>
        <member name="M:itk.ImageIOBase.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="D:itk.ImageIOBase.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.ImageIOBase">
\class ImageIOBase
 * \brief Abstract superclass defines image IO interface.
 *
 * ImageIOBase is a class that reads and/or writes image data
 * of a particular format (such as PNG or raw binary). The
 * ImageIOBase encapsulates both the reading and writing of data. The
 * ImageIOBase is used by the ImageFileReader class (to read data)
 * and the ImageFileWriter (to write data) into a single file. The
 * ImageSeriesReader and ImageSeriesWriter classes are used to read
 * and write data (in conjunction with ImageIOBase) when the data is
 * represented by a series of files. Normally the user does not directly
 * manipulate this class other than to instantiate it, set the FileName,
 * and assign it to a ImageFileReader/ImageFileWriter or
 * ImageSeriesReader/ImageSeriesWriter.
 *
 * A Pluggable factory pattern is used this allows different kinds of readers
 * to be registered (even at run time) without having to modify the
 * code in this class.
 *
 * \sa ImageFileWriter
 * \sa ImageFileReader
 * \sa ImageSeriesWriter
 * \sa ImageSeriesReader
 *
 * \ingroup IOFilters
 *

</member>
        <member name="M:itk.ImageIORegion.PrintSelf(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Methods invoked by Print() to print information about the object
   * including superclasses. Typically not called by the user (use Print()
   * instead) but used in the hierarchical print process to combine the
   * output of several classes.  
</member>
        <member name="M:itk.ImageIORegion.GetNumberOfPixels">
Get the number of pixels contained in this region. This just
   * multiplies the size components. 
</member>
        <member name="M:itk.ImageIORegion.IsInside(itk.ImageIORegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Test if a region (the argument) is completly inside of this region 
</member>
        <member name="M:itk.ImageIORegion.IsInside(std.vector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Test if an index is inside 
</member>
        <member name="M:itk.ImageIORegion.op_Inequality(itk.ImageIORegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare two regions. 
</member>
        <member name="M:itk.ImageIORegion.op_Equality(itk.ImageIORegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compare two regions. 
</member>
        <member name="M:itk.ImageIORegion.GetSize(System.UInt32!System.Runtime.CompilerServices.IsLong)">
Convenience methods to get the size of the image in a particular
   * coordinate direction i. Do not try to access image sizes beyond the
   * the ImageDimension. 
</member>
        <member name="M:itk.ImageIORegion.GetSize">
Get the size of the region. 
</member>
        <member name="M:itk.ImageIORegion.SetSize(std.vector&lt;System.UInt32,std.allocator&lt;System.UInt32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the size of the region. This plus the index determines the
   * rectangular shape, or extent, of the region. 
</member>
        <member name="M:itk.ImageIORegion.GetIndex">
Get index defining the corner of the region. 
</member>
        <member name="M:itk.ImageIORegion.SetIndex(std.vector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Set the index defining the corner of the region. 
</member>
        <member name="M:itk.ImageIORegion.op_Assign(itk.ImageIORegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
operator=. ImageIORegion is a lightweight object that is not reference
   * counted, so operator= is public. 
</member>
        <member name="M:itk.ImageIORegion.#ctor(itk.ImageIORegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor. ImageIORegion is a lightweight object that is not
   * reference counted, so the copy constructor is public. 
</member>
        <member name="M:itk.ImageIORegion.Dispose">
Destructor. ImageIORegion is a lightweight object that is not reference
   * counted, so the destructor is public. 
</member>
        <member name="M:itk.ImageIORegion.#ctor">
Constructor. ImageIORegion is a lightweight object that is not reference
   * counted, so the constructor is public.  Default dimension is 2. 
</member>
        <member name="M:itk.ImageIORegion.#ctor(System.UInt32)">
Constructor. ImageIORegion is a lightweight object that is not reference
   * counted, so the constructor is public. 
</member>
        <member name="M:itk.ImageIORegion.GetRegionType">
Return the region type. Images are described with structured regions. 
</member>
        <member name="M:itk.ImageIORegion.GetRegionDimension">
Dimension of the region to be written. This differs from the
   * the image dimension and is calculated at run-time by examining
   * the size of the image in each coordinate direction. 
</member>
        <member name="M:itk.ImageIORegion.GetImageDimension">
Dimension of the image available at run time. 
</member>
        <member name="M:itk.ImageIORegion.GetNameOfClass">
Standard part of all itk objects. 
</member>
        <member name="D:itk.ImageIORegion.RegionType">
Region type taken from the superclass 
</member>
        <member name="D:itk.ImageIORegion.SizeType">
Size typedef support. A size is used to define region bounds. 
</member>
        <member name="D:itk.ImageIORegion.IndexType">
Index typedef support. An index is used to access pixel values. 
</member>
        <member name="D:itk.ImageIORegion.SizeValueType">
these types correspond to those of itk::Size, itk::Offset and itk::Index 
</member>
        <member name="D:itk.ImageIORegion.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.ImageIORegion">
\class ImageIORegion
 * \brief An ImageIORegion represents a structured region of data.
 *
 * ImageIORegion is an class that represents some structured portion or
 * piece of an Image. The ImageIORegion is represented with an index and
 * a size in each of the n-dimensions of the image. (The index is the
 * corner of the image, the size is the lengths of the image in each of
 * the topological directions.)  ImageIORegion is not templated over
 * dimension, but uses dynamic arrays instead.
 *
 * The first pixel of an image always have a Zero index. Therefore the
 * index values of ImageIORegion may not directly correspond to those
 * of ImageRegion. When translation between the two is performed one
 * much consider the largest possible region who has a non-zero
 * starting index for the image.
 *
 * \sa Region
 * \sa ImageRegion
 * \sa Index
 * \sa Size
 * \sa MeshRegion

</member>
        <member name="F:itk.LightProcessObject.m_AbortGenerateData">
These support the progress method and aborting filter execution.

</member>
        <member name="M:itk.LightProcessObject.GenerateData">
This method causes the filter to generate its output. 
</member>
        <member name="M:itk.LightProcessObject.UpdateOutputData">
Actually generate new output.  
</member>
        <member name="M:itk.LightProcessObject.UpdateProgress(System.Single)">
Update the progress of the process object. If a ProgressMethod exists,
   * executes it.  Then set the Progress ivar to amount. The parameter amount
   * should range between (0,1).  
</member>
        <member name="M:itk.LightProcessObject.GetProgress">
Get the execution progress of a process object. The progress is
   * a floating number between (0,1), 0 meaning no progress; 1 meaning
   * the filter has completed execution. 
</member>
        <member name="M:itk.LightProcessObject.SetProgress(System.Single)">
Set the execution progress of a process object. The progress is
   * a floating number between (0,1), 0 meaning no progress; 1 meaning
   * the filter has completed execution. 
</member>
        <member name="M:itk.LightProcessObject.AbortGenerateDataOn">
Turn on and off the AbortGenerateData flag. 
</member>
        <member name="M:itk.LightProcessObject.GetAbortGenerateData">
Get the AbortGenerateData flag for the process object. Process objects
   *  may handle premature termination of execution in different ways.  
</member>
        <member name="M:itk.LightProcessObject.SetAbortGenerateData(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Set the AbortGenerateData flag for the process object. Process objects
   *  may handle premature termination of execution in different ways.  
</member>
        <member name="M:itk.LightProcessObject.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="M:itk.LightProcessObject.New">
Method for creation through the object factory. 
</member>
        <member name="D:itk.LightProcessObject.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.LightProcessObject">
\class LightProcessObject
 * \brief LightProcessObject is the base class for all process objects (source,
          filters, mappers) in the Insight data processing pipeline.
 *
 * LightProcessObject is an abstract object that specifies behavior and
 * interface of visualization network process objects (sources, filters,
 * mappers). Source objects are creators of visualization data; filters
 * input, process, and output visualization data; and mappers transform data
 * into another form (like rendering primitives or write data to a file).
 *
 * A major role of LightProcessObject is to define the inputs and outputs
 * of a filter. More than one input and/or output may exist for a given
 * filter. Some classes (e.g., source objects or mapper objects) will
 * not use inputs (the source) or outputs (mappers). In this case, the
 * inputs or outputs is just ignored.
 *
 * LightProcessObject invokes the following events: 
 * , Command::StartEvent, Command::EndEvent
 * These are convenience events you can use for any purpose
 * (e.g., debugging info, highlighting/notifying user interface, etc.) 
 * See Command and LightObject for information on using AddObserver.
 *
 * Another event Command::ProgressEvent can be observed. Some filters invoke
 * this event periodically during their execution (with the progress,
 * parameter, the fraction of work done). The use is similar to that of
 * StartEvent and EndEvent. Filters may also check their
 * AbortGenerateData flag to determine whether to prematurally end their
 * execution.
 *
 * An important feature of subclasses of LightProcessObject is that it is
 * possible to control the memory-management model (i.e., retain output
 * versus delete output data). If enabled the ReleaseDataFlag enables the
 * deletion of the output data once the downstream process object finishes
 * processing the data (please see text).
 *
 * Subclasses of LightProcessObject may override 4 of the methods of this class
 * to control how a given filter may interact with the pipeline (dataflow).
 * These methods are: GenerateOutputInformation(),
 * EnlargeOutputRequestedRegion(), GenerateInputRequestedRegion(), and
 * GenerateOutputRequestedRegion(). By overriding these methods, a filter
 * can deviate from the base assumptions of the pipeline execution model.
 *
 * \ingroup ITKSystemObjects
 * \ingroup DataProcessing

</member>
        <member name="T:itk.DataObject">
Friends of ProcessObject 
</member>
        <member name="F:itk.ProcessObject.m_ReleaseDataBeforeUpdateFlag">
Memory management ivars 
</member>
        <member name="F:itk.ProcessObject.m_Threader">
Support processing data in multiple threads. Used by subclasses
   * (e.g., ImageSource). 
</member>
        <member name="F:itk.ProcessObject.m_AbortGenerateData">
These support the progress method and aborting filter execution. 
</member>
        <member name="F:itk.ProcessObject.m_Outputs">
An array of the outputs to the filter. 
</member>
        <member name="F:itk.ProcessObject.m_CachedInputReleaseDataFlags">
An array that caches the ReleaseDataFlags of the inputs 
</member>
        <member name="F:itk.ProcessObject.m_Inputs">
An array of the inputs to the filter. 
</member>
        <member name="F:itk.ProcessObject.m_OutputInformationMTime">
Time when GenerateOutputInformation was last called. 
</member>
        <member name="F:itk.ProcessObject.m_Updating">
These ivars are made protected so filters like itkStreamingImageFilter
   * can access them directly. 
This flag indicates when the pipeline is executing.
   * It prevents infinite recursion when pipelines have loops. 
</member>
        <member name="M:itk.ProcessObject.RestoreInputReleaseDataFlags">
Restore the cached input ReleaseDataFlags.

</member>
        <member name="M:itk.ProcessObject.CacheInputReleaseDataFlags">
Cache the state of any ReleaseDataFlag's on the inputs. While the
filter is executing, we need to set the ReleaseDataFlag's on the
inputs to false in case the current filter is implemented using a
mini-pipeline (which will try to release the inputs).  After the
filter finishes, we restore the state of the ReleaseDataFlag's
before the call to ReleaseInputs().

</member>
        <member name="M:itk.ProcessObject.ReleaseInputs">
A filter may need to release its input's bulk data after it has
   * finished calculating a new output. The filter may need to release
   * the inputs because the user has turned on the ReleaseDataFlag or
   * it may need to release the inputs because the filter is an "in
   * place" filter and it has overwritten its input with its output
   * data.  The implementation here simply checks the ReleaseDataFlag
   * of the inputs.  InPlaceImageFilter overrides this method so
   * release the input it has overwritten.
   *
   * \sa InPlaceImageFilter::ReleaseInputs()

</member>
        <member name="M:itk.ProcessObject.PropagateResetPipeline">
Called to allocate the input array.  Copies old inputs. 
Propagate a call to ResetPipeline() up the pipeline. Called only from
   * DataObject. 
</member>
        <member name="M:itk.ProcessObject.GenerateData">
This method causes the filter to generate its output. 
</member>
        <member name="M:itk.ProcessObject.GenerateOutputInformation">
Generate the information decribing the output data. The default 
   * implementation of this method will copy information from the input to
   * the output.  A filter may override this method if its output will have
   * different information than its input.  For instance, a filter that 
   * shrinks an image will need to provide an implementation for this 
   * method that changes the spacing of the pixels. Such filters should call
   * their superclass' implementation of this method prior to changing the
   * information values they need (i.e. GenerateOutputInformation() should
   * call Superclass::GenerateOutputInformation() prior to changing the
   * information. 
</member>
        <member name="M:itk.ProcessObject.GenerateOutputRequestedRegion(itk.DataObject*)">
Given one output whose requested region has been set, how should
   * the requested regions for the remaining outputs of the process object
   * be set?  By default, all the outputs are set to the same requested
   * region.  If a filter needs to produce different requested regions
   * for each output, for instance an image processing filter producing
   * several outputs at different resolutions, then that filter may
   * override this method and set the requested regions appropriatedly.
   *
   * Note that a filter producing multiple outputs of different types is
   * required to override this method.  The default implementation
   * can only correctly handle multiple outputs of the same type. 
</member>
        <member name="M:itk.ProcessObject.GenerateInputRequestedRegion">
What is the input requested region that is required to produce the
   * output requested region? By default, the largest possible region is
   * always required but this is overridden in many subclasses. For instance,
   * for an image processing filter where an output pixel is a simple function
   * of an input pixel, the input requested region will be set to the output
   * requested region.  For an image processing filter where an output pixel
   * is a function of the pixels in a neighborhood of an input pixel, then
   * the input requested region will need to be larger than the output
   * requested region (to avoid introducing artificial boundary conditions).
   * This function should never request an input region that is outside the
   * the input largest possible region (i.e. implementations of this method
   * should crop the input requested region at the boundaries of the input
   * largest possible region). 
</member>
        <member name="M:itk.ProcessObject.GetOutput(System.UInt32)">
Method used internally for getting an output. 
</member>
        <member name="M:itk.ProcessObject.SetNumberOfOutputs(System.UInt32)">
Called to allocate the output array.  Copies old outputs. 
</member>
        <member name="M:itk.ProcessObject.SetNthOutput(System.UInt32,itk.DataObject*)">
Protected methods for setting outputs.
   * Subclasses make use of them for getting output. 
</member>
        <member name="M:itk.ProcessObject.GetInput(System.UInt32)">
Method used internally for getting an input. 
</member>
        <member name="M:itk.ProcessObject.SetNumberOfInputs(System.UInt32)">
Called to allocate the input array. Copies old inputs. 
</member>
        <member name="M:itk.ProcessObject.PushBackInput(itk.DataObject!System.Runtime.CompilerServices.IsConst*)">
Push/Pop an input of this process object. These methods allow a
   * filter to model its input vector as a queue or stack.  These
   * routines may not be appropriate for all filters, especially
   * filters with different types of inputs.  These routines follow
   * the semantics of STL. 
</member>
        <member name="M:itk.ProcessObject.SetNthInput(System.UInt32,itk.DataObject*)">
Protected methods for setting inputs.
   * Subclasses make use of them for setting input. 
</member>
        <member name="M:itk.ProcessObject.PrepareOutputs">
An opportunity to deallocate a ProcessObject's bulk data
   *  storage. Some filters may wish to reuse existing bulk data
   *  storage to avoid unnecessary deallocation/allocation
   *  sequences. The default implementation calls Initialize() on each
   *  output. DataObject::Initialize() frees its bulk data by default.

</member>
        <member name="M:itk.ProcessObject.GetMultiThreader">
Return the multithreader used by this class. 
</member>
        <member name="M:itk.ProcessObject.SetNumberOfThreads(System.Int32)">
Get/Set the number of threads to create when executing. 
</member>
        <member name="M:itk.ProcessObject.SetReleaseDataBeforeUpdateFlag(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Turn on/off the flags to control whether the bulk data belonging
   * to the outputs of this ProcessObject are released/reallocated
   * during an Update().  In limited memory scenarios, a user may want
   * to force the elements of a pipeline to release any bulk data that
   * is going to be regenerated anyway during an Update() in order to
   * control peak memory allocation. Note that this flag is different
   * from the ReleaseDataFlag. ReleaseDataFlag manages the
   * deallocation of a ProcessObject's bulk output data once that data
   * has been consumed by a downstream ProcessObject.  The
   * ReleaseDataBeforeUpdateFlag manages the deallocation/reallocation
   * of bulk data during a pipeline update to control peak memory
   * utilization. Default value is on. 
</member>
        <member name="M:itk.ProcessObject.SetReleaseDataFlag(System.Boolean)">
Turn on/off the flags to control whether the bulk data belonging
   * to the outputs of this ProcessObject are released after being
   * used by a downstream ProcessObject. Default value is off. Another
   * options for controlling memory utilization is the
   * ReleaseDataBeforeUpdateFlag. 
</member>
        <member name="M:itk.ProcessObject.MakeOutput(System.UInt32)">
Make a DataObject of the correct type to used as the specified
   * output.  Every ProcessObject subclass must be able to create a
   * DataObject that can be used as a specified output. This method
   * is automatically called when DataObject::DisconnectPipeline() is
   * called.  DataObject::DisconnectPipeline, disconnects a data object
   * from being an output of its current source.  When the data object
   * is disconnected, the ProcessObject needs to construct a replacement
   * output data object so that the ProcessObject is in a valid state.
   * So DataObject::DisconnectPipeline eventually calls
   * ProcessObject::MakeOutput. Note that MakeOutput always returns a
   * itkSmartPointer to a DataObject. ImageSource and MeshSource override
   * this method to create the correct type of image and mesh respectively.
   * If a filter has multiple outputs of different types, then that
   * filter must provide an implementation of MakeOutput(). 
</member>
        <member name="M:itk.ProcessObject.ResetPipeline">
Reset the pipeline. If an exception is thrown during an Update(),
   * the pipeline may be in an inconsistent state.  This method clears
   * the internal state of the pipeline so Update() can be called. 
</member>
        <member name="M:itk.ProcessObject.EnlargeOutputRequestedRegion(itk.DataObject*)">
Give the process object a chance to indictate that it will produce more
   * output than it was requested to produce. For example, many imaging
   * filters must compute the entire output at once or can only produce output
   * in complete slices. Such filters cannot handle smaller requested regions.
   * These filters must provide an implementation of this method, setting
   * the output requested region to the size they will produce.  By default,
   * a process object does not modify the size of the output requested region. 
</member>
        <member name="M:itk.ProcessObject.UpdateOutputData(itk.DataObject*)">
Actually generate new output  
</member>
        <member name="M:itk.ProcessObject.PropagateRequestedRegion(itk.DataObject*)">
Send the requested region information back up the pipeline (to the
   * filters that preceed this one). 
</member>
        <member name="M:itk.ProcessObject.UpdateOutputInformation">
Update the information decribing the output data. This method
   * transverses up the pipeline gathering modified time information.
   * On the way back down the pipeline, this method calls
   * GenerateOutputInformation() to set any necessary information
   * about the output data objects.  For instance, a filter that
   * shrinks an image will need to provide an implementation for
   * GenerateOutputInformation() that changes the spacing of the
   * pixels. Such filters should call their superclass' implementation
   * of GenerateOutputInformation prior to changing the information
   * values they need (i.e. GenerateOutputInformation() should call
   * Superclass::GenerateOutputInformation() prior to changing the
   * information. 
</member>
        <member name="M:itk.ProcessObject.UpdateLargestPossibleRegion">
Like Update(), but sets the output requested region to the
   * largest possible region for the output.  This is the method users
   * should call if they want the entire dataset to be processed.  If
   * a user wants to update the same output region as a previous call
   * to Update() or a previous call to UpdateLargestPossibleRegion(), 
   * then they should call the method Update(). 
</member>
        <member name="M:itk.ProcessObject.Update">
Bring this filter up-to-date. Update() checks modified times against
   * last execution times, and re-executes objects if necessary. A side
   * effect of this method is that the whole pipeline may execute
   * in order to bring this filter up-to-date. This method updates the
   * currently prescribed requested region.  If no requested region has
   * been set on the output, then the requested region will be set to the
   * largest possible region. Once the requested region is set, Update()
   * will make sure the specified requested region is up-to-date. This
   * is a confusing side effect to users who are just calling Update() on
   * a filter.  A first call to Update() will cause the largest possible
   * region to be updated.  A second call to Update() will update that
   * same region.  If a modification to the upstream pipeline cause a
   * filter to have a different largest possible region, this second
   * call to Update() will not cause the output requested region to be
   * reset to the new largest possible region.  Instead, the output requested
   * region will be the same as the last time Update() was called. To have
   * a filter always to produce its largest possible region, users should
   * call UpdateLargestPossibleRegion() instead. 
</member>
        <member name="M:itk.ProcessObject.UpdateProgress(System.Single)">
Update the progress of the process object.
   *
   * Sets the Progress ivar to amount and invokes any observers for
   * the ProgressEvent. The parameter amount should be in [0,1] and is
   * the cumulative (not incremental) progress. 
</member>
        <member name="M:itk.ProcessObject.GetProgress">
Get the execution progress of a process object. The progress is
   * a floating number in [0,1] with 0 meaning no progress and 1 meaning
   * the filter has completed execution. 
</member>
        <member name="M:itk.ProcessObject.SetProgress(System.Single)">
Set the execution progress of a process object. The progress is
   * a floating number in [0,1] with 0 meaning no progress and 1 meaning
   * the filter has completed execution.  The ProgressEvent is NOT
   * invoked. 
</member>
        <member name="M:itk.ProcessObject.AbortGenerateDataOn">
Turn on and off the AbortGenerateData flag. 
</member>
        <member name="M:itk.ProcessObject.GetAbortGenerateData">
Get the AbortGenerateData flag for the process object. Process objects
   *  may handle premature termination of execution in different ways.  
</member>
        <member name="M:itk.ProcessObject.SetAbortGenerateData(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Set the AbortGenerateData flag for the process object. Process objects
   *  may handle premature termination of execution in different ways.  
</member>
        <member name="M:itk.ProcessObject.GetOutputs">
Return an array with all the outputs of this process object.
   * This is useful for tracing forward in the pipeline to contruct
   * graphs etc.  
</member>
        <member name="M:itk.ProcessObject.GetNumberOfValidRequiredInputs">
Get the number of valid inputs.  This is the number of non-null
   * entries in the input vector in the first NumberOfRequiredInputs
   * slots. This method is used to determine whether the necessary
   * required inputs have been set. Subclasses of ProcessObject may
   * override this implementation if the required inputs are not
   * the first slots in input vector.

</member>
        <member name="M:itk.ProcessObject.GetNumberOfInputs">
Get the size of the input vector.  This is merely the size of
   * the input vector, not the number of inputs that have valid
   * DataObject's assigned. Use GetNumberOfValidRequiredInputs() to
   * determine how many inputs are non-null. 
</member>
        <member name="D:itk.ProcessObject.DataObjectPointerArraySizeType">
Size type of an std::vector 
</member>
        <member name="M:itk.ProcessObject.GetInputs">
Return an array with all the inputs of this process object.
   * This is useful for tracing back in the pipeline to construct
   * graphs etc.  
</member>
        <member name="D:itk.ProcessObject.DataObjectPointerArray">
STL Array of SmartPointers to DataObjects 
</member>
        <member name="D:itk.ProcessObject.DataObjectPointer">
Smart Pointer type to a DataObject. 
</member>
        <member name="M:itk.ProcessObject.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="D:itk.ProcessObject.Self">
Standard class typedefs. 
</member>
        <member name="M:itk.MultiThreader.WaitForSingleMethodThread(System.Void*)">
Wait for a thread running the prescribed SingleMethod. A similar
   * abstraction needs to be added for MultipleMethod (SpawnThread
   * already has a routine to do this. 
</member>
        <member name="M:itk.MultiThreader.DispatchSingleMethodThread(itk.MultiThreader.ThreadInfoStruct*)">
Spawn a thread for the prescribed SingleMethod.  This routine
   * spawns a thread to the SingleMethodProxy which runs the
   * prescribed SingleMethod.  The SingleMethodProxy allows for
   * exceptions within a thread to be naively handled. A similar
   * abstraction needs to be added for MultipleMethod and
   * SpawnThread. 
</member>
        <member name="M:itk.MultiThreader.SingleMethodProxy(System.Void*)">
Static function used as a "proxy callback" by the MultiThreader.  The
   * threading library will call this routine for each thread, which
   * will delegate the control to the prescribed SingleMethod. This
   * routine acts as an intermediary between the MultiThreader and the
   * user supplied callback (SingleMethod) in order to catch any
   * exceptions thrown by the threads. 
</member>
        <member name="F:itk.MultiThreader.m_NumberOfThreads">
The number of threads to use. 
   *  The m_NumberOfThreads must always be less than or equal to
   *  the m_GlobalMaximumNumberOfThreads before it is used during the execution
   *  of a threaded method. Its value is clamped in the SingleMethodExecute()
   *  and MultipleMethodExecute(). Its value is initialized to
   *  m_GlobalDefaultNumberOfThreads at construction time. Its value is clamped
   *  to the current m_GlobalMaximumNumberOfThreads in the
   *  SingleMethodExecute() and MultipleMethodExecute() methods. 

</member>
        <member name="F:itk.MultiThreader.m_GlobalMaximumNumberOfThreads">
Global variable defining the maximum number of threads that can be used.
   *  The m_GlobalMaximumNumberOfThreads must always be less than or equal to
   *  ITK_MAX_THREADS and greater than zero. 
</member>
        <member name="F:itk.MultiThreader.m_SingleData">
Internal storage of the data. 
</member>
        <member name="F:itk.MultiThreader.m_SpawnedThreadActiveFlag">
Storage of MutexFunctions and ints used to control spawned 
   *  threads and the spawned thread ids. 
</member>
        <member name="F:itk.MultiThreader.m_SingleMethod">
The methods to invoke. 
</member>
        <member name="F:itk.MultiThreader.m_ThreadInfoArray">
An array of thread info containing a thread id
   *  (0, 1, 2, .. ITK_MAX_THREADS-1), the thread count, and a pointer
   *  to void so that user data can be passed to each thread. 
</member>
        <member name="T:itk.MultiThreader.ThreadInfoStruct">
This is the structure that is passed to the thread that is
   * created from the SingleMethodExecute, MultipleMethodExecute or
   * the SpawnThread method. It is passed in as a void *, and it is up
   * to the method to cast correctly and extract the information.  The
   * ThreadID is a number between 0 and NumberOfThreads-1 that
   * indicates the id of this thread. The NumberOfThreads is
   * this-&gt;NumberOfThreads for threads created from
   * SingleMethodExecute or MultipleMethodExecute, and it is 1 for
   * threads created from SpawnThread.  The UserData is the (void
   * *)arg passed into the SetSingleMethod, SetMultipleMethod, or
   * SpawnThread method. 
</member>
        <member name="M:itk.MultiThreader.TerminateThread(System.Int32)">
Terminate the thread that was created with a SpawnThreadExecute() 
</member>
        <member name="M:itk.MultiThreader.SpawnThread(=FUNC:System.UInt32!System.Runtime.CompilerServices.IsLong(System.Void*),System.Void*)">
Create a new thread for the given function. Return a thread id
     * which is a number between 0 and ITK_MAX_THREADS - 1. This
   * id should be used to kill the thread at a later time. 
</member>
        <member name="M:itk.MultiThreader.SetMultipleMethod(System.Int32,=FUNC:System.UInt32!System.Runtime.CompilerServices.IsLong(System.Void*),System.Void*)">
Set the MultipleMethod at the given index to f() and the UserData 
   * field of the ThreadInfoStruct that is passed to it will be data. 
</member>
        <member name="M:itk.MultiThreader.SetSingleMethod(=FUNC:System.UInt32!System.Runtime.CompilerServices.IsLong(System.Void*),System.Void*)">
Set the SingleMethod to f() and the UserData field of the
   * ThreadInfoStruct that is passed to it will be data.
   * This method (and all the methods passed to SetMultipleMethod)
   * must be of type itkThreadFunctionType and must take a single argument of
   * type void *. 
</member>
        <member name="M:itk.MultiThreader.MultipleMethodExecute">
Execute the MultipleMethods (as define by calling SetMultipleMethod for
   * each of the required m_NumberOfThreads methods) using m_NumberOfThreads
   * threads. As a side effect the m_NumberOfThreads will be checked against the
   * current m_GlobalMaximumNumberOfThreads and clamped if necessary. 
</member>
        <member name="M:itk.MultiThreader.SingleMethodExecute">
Execute the SingleMethod (as define by SetSingleMethod) using
   * m_NumberOfThreads threads. As a side effect the m_NumberOfThreads will be
   * checked against the current m_GlobalMaximumNumberOfThreads and clamped if
   * necessary. 
</member>
        <member name="M:itk.MultiThreader.SetGlobalDefaultNumberOfThreads(System.Int32)">
Set/Get the value which is used to initialize the NumberOfThreads in the
   * constructor.  It will be clamped to the range [1, m_GlobalMaximumNumberOfThreads ].
   * Therefore the caller of this method should check that the requested number
   * of threads was accepted. 
</member>
        <member name="M:itk.MultiThreader.SetGlobalMaximumNumberOfThreads(System.Int32)">
Set/Get the maximum number of threads to use when multithreading.  It
   * will be clamped to the range [ 1, ITK_MAX_THREADS ] because several arrays
   * are already statically allocated using the ITK_MAX_THREADS number.
   * Therefore the caller of this method should check that the requested number
   * of threads was accepted. 
</member>
        <member name="M:itk.MultiThreader.SetNumberOfThreads(System.Int32)">
Get/Set the number of threads to create. It will be clamped to the range
   * [ 1, m_GlobalMaximumNumberOfThreads ], so the caller of this method should
   * check that the requested number of threads was accepted. 
</member>
        <member name="M:itk.MultiThreader.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="M:itk.MultiThreader.New">
Method for creation through the object factory. 
</member>
        <member name="D:itk.MultiThreader.Self">
Standard class typedefs. 
</member>
        <member name="D:itk.ThreadFunctionType">
\class MultiThreader
 * \brief A class for performing multithreaded execution
 *
 * Multithreader is a class that provides support for multithreaded
 * execution using sproc() on an SGI, or pthread_create on any platform
 * supporting POSIX threads.  This class can be used to execute a single
 * method on multiple threads, or to specify a method per thread.
 *
 * \ingroup OSSystemObejcts
 *
 * \par Note
 * If ITK_USE_SPROC is defined, then sproc() will be used to create
 * multiple threads on an SGI. If ITK_USE_PTHREADS is defined, then
 * pthread_create() will be used to create multiple threads (on
 * a sun, for example).

\par Note
 * If ITK_USE_PTHREADS is defined, then the multithreaded
 * function is of type void *, and returns NULL
 * Otherwise the type is void which is correct for WIN32
 * and SPROC. 
</member>
        <member name="M:itk.MutexLock.Unlock">
Unlock the MutexLock. 
</member>
        <member name="M:itk.MutexLock.Lock">
Lock the itkMutexLock. 
</member>
        <member name="M:itk.MutexLock.GetNameOfClass">
Run-time information. 
</member>
        <member name="M:itk.MutexLock.New">
Method for creation. 
</member>
        <member name="D:itk.MutexLock.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.MutexLock">
\class MutexLock 
 * \brief Mutual exclusion locking class.
 *
 * MutexLock allows the locking of variables which are accessed 
 * through different threads.  This header file also defines 
 * SimpleMutexLock which is not a subclass of itkObject.
 * 
 * \ingroup OSSystemObjects

</member>
        <member name="M:itk.SimpleMutexLock.GetMutexLock">
Access the MutexType member variable from outside this class 
</member>
        <member name="M:itk.SimpleMutexLock.Unlock">
Unlock the MutexLock. 
</member>
        <member name="M:itk.SimpleMutexLock.Lock">
Lock the MutexLock. 
</member>
        <member name="M:itk.SimpleMutexLock.GetNameOfClass">
Used for debugging and other run-time purposes. 
</member>
        <member name="M:itk.SimpleMutexLock.New">
Methods for creation and destruction through the object factory. 
</member>
        <member name="M:itk.SimpleMutexLock.#ctor">
Constructor and destructor left public purposely. 
</member>
        <member name="D:itk.SimpleMutexLock.Self">
Standard class typedefs.  
</member>
        <member name="T:itk.SimpleMutexLock">
\class SimpleMutexLock 
 * \brief Simple mutual exclusion locking class.
 
 * SimpleMutexLock allows the locking of variables which are accessed 
 * through different threads.  This header file also defines 
 * SimpleMutexLock which is not a subclass of Object.
 * 
 * \ingroup OSSystemObjects

</member>
        <member name="M:itk.FastMutexLock.Unlock">
Unlock the FastMutexLock. 
</member>
        <member name="M:itk.FastMutexLock.Lock">
Lock the itkFastMutexLock. 
</member>
        <member name="M:itk.FastMutexLock.GetNameOfClass">
Run-time type information. 
</member>
        <member name="M:itk.FastMutexLock.New">
Method for creation. 
</member>
        <member name="D:itk.FastMutexLock.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.FastMutexLock">
\class FastMutexLock
 * \brief Critical section locking class.
 * 
 * FastMutexLock allows the locking of variables which are accessed 
 * through different threads.  This header file also defines 
 * SimpleFastMutexLock which is not a subclass of Object.
 * The API is identical to that of MutexLock, and the behavior is
 * identical as well, except on Windows 9x/NT platforms. The only difference
 * on these platforms is that MutexLock is more flexible, in that
 * it works across processes as well as across threads, but also costs
 * more, in that it evokes a 600-cycle x86 ring transition. The 
 * FastMutexLock provides a higher-performance equivalent (on 
 * Windows) but won't work across processes. Since it is unclear how,
 * in itk, an object at the itk level can be shared across processes
 * in the first place, one should use FastMutexLock unless one has
 * a very good reason to use MutexLock. If higher-performance equivalents
 * for non-Windows platforms (Irix, SunOS, etc) are discovered, they
 * should replace the implementations in this class
 *
 * \ingroup OSSystemObjects

</member>
        <member name="F:itk.ObjectFactoryBase.m_LibraryHandle">
Member variables for a factory set by the base class
   * at load or register time 
</member>
        <member name="F:itk.ObjectFactoryBase.m_RegisteredFactories">
list of registered factories 
</member>
        <member name="M:itk.ObjectFactoryBase.LoadLibrariesInPath(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Load all dynamic libraries in the given path 
</member>
        <member name="M:itk.ObjectFactoryBase.LoadDynamicFactories">
Load dynamic factories from the ITK_AUTOLOAD_PATH 
</member>
        <member name="M:itk.ObjectFactoryBase.RegisterDefaults">
Register default factories which are not loaded at run time. 
</member>
        <member name="M:itk.ObjectFactoryBase.Initialize">
Initialize the static members of ObjectFactoryBase.   RegisterDefaults
   * is called here. 
</member>
        <member name="M:itk.ObjectFactoryBase.CreateAllObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
This method creates all the objects with the class overide of
   * itkclass name, which are provide by this object 

</member>
        <member name="M:itk.ObjectFactoryBase.CreateObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
This method is provided by sub-classes of ObjectFactoryBase.
   * It should create the named itk object or return 0 if that object
   * is not supported by the factory implementation. 
</member>
        <member name="M:itk.ObjectFactoryBase.RegisterOverride(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,itk.CreateObjectFunctionBase*)">
Register object creation information with the factory. 
</member>
        <member name="T:itk.ObjectFactoryBase.OverrideInformation">
\class OverrideInformation
   * \brief Internal implementation class for ObjectFactorBase. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetLibraryPath">
This returns the path to a dynamically loaded factory. 
</member>
        <member name="M:itk.ObjectFactoryBase.Disable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Set all enable flags for the given class to 0.  This will
   * mean that the factory will stop producing class with the given
   * name. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetEnableFlag(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Get the Enable flag for the specific override of className. 
</member>
        <member name="M:itk.ObjectFactoryBase.SetEnableFlag(System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Set the Enable flag for the specific override of className. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetEnableFlags">
Return a list of enable flags. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetClassOverrideDescriptions">
Return a list of descriptions for class overrides. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetClassOverrideWithNames">
Return a list of the names of classes that override classes. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetClassOverrideNames">
Return a list of classes that this factory overrides. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetDescription">
Return a descriptive string describing the factory. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetITKSourceVersion">
All sub-classes of ObjectFactoryBase should must return the version of 
   * ITK they were built with.  This should be implemented with the macro
   * ITK_SOURCE_VERSION and NOT a call to Version::GetITKSourceVersion.
   * As the version needs to be compiled into the file as a string constant.
   * This is critical to determine possible incompatible dynamic factory loads. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetRegisteredFactories">
Return the list of all registered factories.  This is NOT a copy,
   * do not remove items from this list! 
</member>
        <member name="M:itk.ObjectFactoryBase.UnRegisterAllFactories">
Unregister all factories. 
</member>
        <member name="M:itk.ObjectFactoryBase.UnRegisterFactory(itk.ObjectFactoryBase*)">
Remove a factory from the list of registered factories. 
</member>
        <member name="M:itk.ObjectFactoryBase.RegisterFactory(itk.ObjectFactoryBase*)">
Register a factory so it can be used to create itk objects. 
</member>
        <member name="M:itk.ObjectFactoryBase.ReHash">
Re-check the ITK_AUTOLOAD_PATH for new factory libraries.
   * This calls UnRegisterAll before re-loading. 
</member>
        <member name="M:itk.ObjectFactoryBase.CreateAllInstance(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Create and return all possible instances of the named itk object.
   * Each loaded ObjectFactoryBase will be asked in the order
   * the factory was in the ITK_AUTOLOAD_PATH.  All created objects
   * will be returned in the list. 
</member>
        <member name="M:itk.ObjectFactoryBase.CreateInstance(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Create and return an instance of the named itk object.
   * Each loaded ObjectFactoryBase will be asked in the order
   * the factory was in the ITK_AUTOLOAD_PATH.  After the
   * first factory returns the object no other factories are asked. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="D:itk.ObjectFactoryBase.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.OverRideMap">
\class ObjectFactoryBase
 * \brief Create instances of classes using an object factory.
 *
 * ObjectFactoryBase is used to create itk objects. The base class
 * ObjectFactoryBase contains a static method CreateInstance() that is
 * used to create itk objects from the list of registerd ObjectFactoryBase
 * sub-classes.  The first time CreateInstance() is called, all dll's or
 * shared libraries in the environment variable ITK_AUTOLOAD_PATH are loaded
 * into the current process.  The C function itkLoad is called on each dll.
 * itkLoad should return an instance of the factory sub-class implemented in
 * the shared library. ITK_AUTOLOAD_PATH is an environment variable
 * containing a colon separated (semi-colon on win32) list of paths.
 *
 * This can be use to overide the creation of any object in ITK. 
 *
 * \ingroup ITKSystemObjects

</member>
        <member name="M:itk.CreateObjectFunctionBase.CreateObject">
Create an object and return a pointer to it as an
   * itk::LightObject. 
</member>
        <member name="D:itk.CreateObjectFunctionBase.Self">
Standard typedefs. 
</member>
        <member name="T:itk.CreateObjectFunctionBase">
\class CreateObjectFunctionBase
 * \brief Define API for object creation callback functions.
 *
 * \ingroup ITKSystemObjects

</member>
        <member name="D:itk.int_fast8_t">
Types which are at least a certain size but may be greater if
 *  performace benifits, these are prefered over fixed width. 
</member>
        <member name="D:itk.int_least8_t">
Types which are at least a certain size, these are prefered over
 *  fixed width. 
</member>
        <member name="D:itk.int8_t">
Fixed width interger types. 
</member>
        <member name="D:ITK_UINTPTR">
\deprecated This type have been deprecated due to erroneous
   *  value, please use itk::uintptr_t instead. 
</member>
        <member name="D:ITK_INTPTR">
\deprecated This type have been deprecated due to erroneous
   *  value, please use itk::intptr_t instead. 
</member>
        <member name="D:ITK_UINT32">
\deprecated This type have been deprecated due to erroneous
   * value, please use itk::uint32_t instead. 
</member>
        <member name="D:ITK_UINT16">
\deprecated This type have been deprecated due to erroneous
   * value, please use itk::uint16_t instead. 
</member>
        <member name="D:ITK_UINT8">
\deprecated This type have been deprecated due to erroneous
   *  value, please use itk::uint8_t instead. 
</member>
        <member name="D:ITK_INT32">
\deprecated This type have been deprecated due to erroneous
   *  value, please use itk::int32_8 instead. 
</member>
        <member name="D:ITK_INT8">
\deprecated This type have been deprecated due to erroneous
   *  value, please use itk::int8_t instead. 
</member>
        <member name="M:itk.Region.PrintSelf(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Methods invoked by Print() to print information about the object
   * including superclasses. Typically not called by the user (use Print()
   * instead) but used in the hierarchical print process to combine the
   * output of several classes.  
</member>
        <member name="M:itk.Region.Print(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Print the region. 
</member>
        <member name="M:itk.Region.GetRegionType">
Subclasses must return a region type describing whether the region
   * is structured or unstructured. 
</member>
        <member name="M:itk.Region.GetNameOfClass">
Standard part of all itk objects. 
</member>
        <member name="T:itk.Region.RegionType">
Enums used to describe the extent types. 
</member>
        <member name="D:itk.Region.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.Region">
\class Region
 * \brief A region represents some portion or piece of data.
 *
 * Region is an abstract class that represents some portion or
 * piece of a DataObject. A region is used by the pipeline when
 * processing just a portion of the data, either because 1) memory
 * limits dictate that the pipeline cannot fit the entire dataset
 * into memory; 2) the user has requested that only a piece of the
 * dataset is to be processed; or 3) parallel (multi-threaded)
 * processing of the data is required.
 *
 * There are two types of regions in itk: a structured region that
 * specifies a rectangular piece of an image (ImageRegion), and a
 * unstructured region that specifies piece i of N total pieces
 * (MeshRegion). Depending on the filter (its input and output
 * types, and its position in the pipeline), ImageRegion or MeshRegion
 * will be used to describe the region.
 *
 * Region is a light-weight object and not reference counted. This 
 * means that is behaves differently than ITK classes that are
 * reference counted. For example, smart pointer access is not
 * provided, and the (subclasses') constructor, destructor, 
 * copy constructor and operator= are all public.
 *
 * \sa ImageRegion
 * \sa MeshRegion
 * \ingroup DataRepresentation

</member>
        <member name="T:itk.ProcessObject">
Friends of DataObject 

Friends of Multithreader.
   * ProcessObject is a friend so that it can call PrintSelf() on its
   * Multithreader. 

\class ProcessObject
 * \brief ProcessObject is the base class for all process objects (source,
 *        filters, mappers) in the Insight data processing pipeline.
 *
 * ProcessObject is an abstract object that specifies behavior and
 * interface of network process objects (sources, filters,
 * mappers). Source objects are creators of visualization data;
 * filters input, process, and output image data; and mappers
 * transform data into another form (like transforming coordinates or
 * writing data to a file).
 *
 * A major role of ProcessObject is to define the inputs and outputs
 * of a filter. More than one input and/or output may exist for a given
 * filter. Some classes (e.g., source objects or mapper objects) will
 * not use inputs (the source) or outputs (mappers). In this case, the
 * inputs or outputs is just ignored.
 *
 * ProcessObject invokes the following events: 
 * Command::StartEvent, Command::EndEvent
 * These are convenience events you can use for any purpose
 * (e.g., debugging info, highlighting/notifying user interface, etc.) 
 * See Command and LightObject for information on using AddObserver.
 *
 * Another event Command::ProgressEvent can be observed. Some filters invoke
 * this event periodically during their execution (with the progress,
 * parameter, the fraction of work done). The use is similar to that of
 * StartEvent and EndEvent. Filters may also check their
 * AbortGenerateData flag to determine whether to prematurally end their
 * execution.
 *
 * An important feature of subclasses of ProcessObject is that it is
 * possible to control the memory-management model (i.e., retain
 * output versus delete output data). The ReleaseDataFlag enables the
 * deletion of the output data once the downstream process object
 * finishes processing the data (please see text). The
 * ReleaseDataBeforeUpdateFlag enables the deletion of the
 * ProcessObject's output data from a previous update if that output
 * data is slated to be regenerated by the pipeline process.  Setting
 * this flag can control peak memory usage during a subsequent
 * pipeline update.  For a ProcessObject, the ReleaseDataFlag defaults
 * to false and the ReleaseDataBeforeUpdateFlag defaults to true.
 * Some subclasses of ProcessObject, for example ImageSource, use a
 * default setting of false for the ReleaseDataBeforeUpdateFlag.
 *
 * Subclasses of ProcessObject may override 4 of the methods of this class
 * to control how a given filter may interact with the pipeline (dataflow).
 * These methods are: GenerateOutputInformation(),
 * EnlargeOutputRequestedRegion(), GenerateInputRequestedRegion(), and
 * GenerateOutputRequestedRegion(). By overriding these methods, a filter
 * can deviate from the base assumptions of the pipeline execution model.
 *
 * \ingroup ITKSystemObjects
 * \ingroup DataProcessing 
 *

</member>
        <member name="M:itk.DataObject.DisconnectSource(itk.ProcessObject*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Disconnect the specified process object from the data
   * object. This should only be called from a process object. An
   * application should call DataObject::DisconnectPipeline() if it
   * wants to disconnect a data object from a pipeline. The second
   * parameter indicates which of the source's outputs corresponds to
   * this data object. If the specified source output index does not
   * match the index cached when the data object was connected to the
   * pipeline (see ConnectSource), then nothing is done. 
</member>
        <member name="M:itk.DataObject.ConnectSource(itk.ProcessObject*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Connect the specified process object to the data object. This
   * should only be called from a process object. The second parameter
   * indicates which of the source's outputs corresponds to this data
   * object. 
</member>
        <member name="F:itk.DataObject.m_GlobalReleaseDataFlag">
Static member that controls global data release after use by filter. 
</member>
        <member name="F:itk.DataObject.m_PipelineMTime">
The maximum MTime of all upstream filters and data objects.
   * This does not include the MTime of this data object. 
</member>
        <member name="F:itk.DataObject.m_UpdateMTime">
When was this data last generated? 
</member>
        <member name="F:itk.DataObject.m_Source">
Who generated this data? 
</member>
        <member name="M:itk.DataObject.PropagateResetPipeline">
Propagate a call to ResetPipeline(). Called only from ProcessObject. 
</member>
        <member name="M:itk.DataObject.Graft(itk.DataObject!System.Runtime.CompilerServices.IsConst*)">
Method for grafting the content of one data object into another one.
   * This method is intended to be overloaded by derived classes. Each one of
   * them should use dynamic_casting in order to verify that the grafted 
   * object is actually of the same type as the class on which the Graft()
   * method was invoked. 
</member>
        <member name="M:itk.DataObject.SetRequestedRegion(itk.DataObject*)">
Set the requested region from this data object to match the requested
   * region of the data object passed in as a parameter.  For
   * DataObject's that do not support Regions, this method does
   * nothing. Subclasses of DataObject that do support Regions,
   * provide an alternative implementation. 
</member>
        <member name="M:itk.DataObject.CopyInformation(itk.DataObject!System.Runtime.CompilerServices.IsConst*)">
Copy information from the specified data set.  This method is
   * part of the pipeline execution model. By default, a ProcessObject
   * will copy meta-data from the first input to all of its
   * outputs. See ProcessObject::GenerateOutputInformation().  Each
   * subclass of DataObject is responsible for being able to copy
   * whatever meta-data it needs from from another DataObject.
   * The default implementation of this method is empty. If a subclass
   * overrides this method, it should always call its superclass'
   * version. 
</member>
        <member name="M:itk.DataObject.VerifyRequestedRegion">
Verify that the RequestedRegion is within the LargestPossibleRegion.  
   *
   * If the RequestedRegion is not within the LargestPossibleRegion,
   * then the filter cannot possibly satisfy the request. This method
   * returns true if the request can be satisfied (even if it will be
   * necessary to process the entire LargestPossibleRegion) and
   * returns false otherwise.  This method is used by
   * PropagateRequestedRegion().  PropagateRequestedRegion() throws a
   * InvalidRequestedRegionError exception if the requested region is
   * not within the LargestPossibleRegion. Default implementation
   * simply returns true in order to support DataObjects that do not
   * need regions (for instance itk::EquivalencyTable). 
</member>
        <member name="M:itk.DataObject.RequestedRegionIsOutsideOfTheBufferedRegion">
Determine whether the RequestedRegion is outside of the
   * BufferedRegion. This method returns true if the RequestedRegion
   * is outside the BufferedRegion (true if at least one pixel is
   * outside). This is used by the pipeline mechanism to determine
   * whether a filter needs to re-execute in order to satisfy the
   * current request.  If the current RequestedRegion is already
   * inside the BufferedRegion from the previous execution (and the
   * current filter is up to date), then a given filter does not need
   * to re-execute 
</member>
        <member name="M:itk.DataObject.SetRequestedRegionToLargestPossibleRegion">
Set the RequestedRegion to the LargestPossibleRegion.  This
   * forces a filter to produce all of the output in one execution
   * (i.e. not streaming) on the next call to Update(). 
</member>
        <member name="M:itk.DataObject.DataHasBeenGenerated">
Inform the pipeline mechanism that data has been generated.  This
   * method is called by ProcessObject::UpdateOutputData() once the
   * process object has finished generating its data. This essentially
   * marks the DataObject as being updated and ready for use. 
</member>
        <member name="M:itk.DataObject.PrepareForNewData">
Setup a DataObject to receive new data.  This method is called
   * by the pipeline mechanism on each output of filter that needs
   * to execute.  The default implementation is to return a DataObject
   * to its initial state.  This may involve releasing previously
   * allocated bulk data.  Subclasses of DataObject may want to
   * override this method and/or the Initialize() method if they
   * want a different default behavior (for instance a DataObject
   * might want finer control over its bulk data memory management). 
</member>
        <member name="M:itk.DataObject.GetUpdateMTime">
MTime for the last time this DataObject was generated. 
</member>
        <member name="M:itk.DataObject.SetPipelineMTime(System.UInt32!System.Runtime.CompilerServices.IsLong)">
The maximum MTime of all upstream filters and data objects.
   * This does not include the MTime of this data object. 
</member>
        <member name="M:itk.DataObject.ResetPipeline">
Reset the pipeline. If an exception is thrown during an Update(),
   * the pipeline may be in an inconsistent state.  This method clears
   * the internal state of the pipeline so Update() can be called. 
</member>
        <member name="M:itk.DataObject.PropagateRequestedRegion">
Methods to update the pipeline. Called internally by the
   * pipeline mechanism. 
</member>
        <member name="M:itk.DataObject.UpdateOutputInformation">
Update the information for this DataObject so that it can be used
   * as an output of a ProcessObject.  This method is used in the pipeline
   * mechanism to propagate information and initialize the meta data
   * associated with a DataObject.  Any implementation of this method in
   * a derived class is assumed to call its source's
   * ProcessObject::UpdateOutputInformation() which determines modified
   * times, LargestPossibleRegions, and any extra meta data like spacing,
   * origin, etc. Default implementation simply call's it's source's
   * UpdateOutputInformation(). 
</member>
        <member name="M:itk.DataObject.Update">
Provides opportunity for the data object to insure internal
   * consistency before access. Also causes owning source/filter (if
   * any) to update itself. The Update() method is composed of
   * UpdateOutputInformation(), PropagateRequestedRegion(), and
   * UpdateOutputData(). This method may call methods that throw an
   * InvalidRequestedRegionError exception. This exception will leave
   * the pipeline in an inconsistent state.  You will need to call
   * ResetPipeline() on the last ProcessObject in your pipeline in
   * order to restore the pipeline to a state where you can call
   * Update() again. 
</member>
        <member name="M:itk.DataObject.GetDataReleased">
Get the flag indicating the data has been released.  
</member>
        <member name="M:itk.DataObject.ShouldIReleaseData">
Return flag indicating whether data should be released after use  
   * by a filter.  
</member>
        <member name="M:itk.DataObject.ReleaseData">
Release data back to system to conserve memory resource. Used during
   * pipeline execution.  Releasing this data does not make
   * down-stream data invalid, so it does not modify the MTime of this data
   * object.   
</member>
        <member name="M:itk.DataObject.SetGlobalReleaseDataFlag(System.Boolean)">
Turn on/off a flag to control whether every object releases its data
   * after being used by a filter. Being a global flag, it controls the
   * behavior of all DataObjects and ProcessObjects. 
</member>
        <member name="M:itk.DataObject.SetReleaseDataFlag(System.Boolean)">
Turn on/off a flag to control whether this object's data is released
   * after being used by a filter.  
</member>
        <member name="M:itk.DataObject.Initialize">
Restore the data object to its initial state. This means releasing
   * memory. 
</member>
        <member name="M:itk.DataObject.GetSourceOutputIndex">
Which of the source's outputs corresponds to this data object? 
</member>
        <member name="M:itk.DataObject.GetSource">
Get the process object that generated this data object.
   * If there is no process object, then the data object has
   * been disconnected from the pipeline, or the data object
   * was created manually. (Note: we cannot use the GetObjectMacro()
   * defined in itkMacro because the mutual dependency of
   * DataObject and ProcessObject causes compile problems. Also,
   * a forward reference smart pointer is returned, not a smart pointer, 
   * because of the circular dependency between the process and data object.)
   *
   * GetSource() returns a SmartPointerForwardReference and not a WeakPointer
   * because it is assumed the code calling GetSource() wants to hold a
   * long term reference to the source. 
</member>
        <member name="M:itk.DataObject.DisconnectPipeline">
Separate this data object from the pipeline.  This routine disconnects
   * a data object from the upstream pipeline. Hence an Update() from
   * downstream will not propagate back past this data object.  To completely
   * isolate this data object from the pipeline, the application must remove
   * this data object from any filters which it is connected as the input. 
</member>
        <member name="M:itk.DataObject.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="D:itk.DataObject.Self">
Standard class typedefs. 
</member>
        <member name="M:itk.InvalidRequestedRegionError.PrintSelf(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Print exception information.  This method can be overridden by
   * specific exception subtypes.  The default is to print out the
   * location where the exception was first thrown and any description
   * provided by the ``thrower''.   
</member>
        <member name="M:itk.InvalidRequestedRegionError.GetNameOfClass">
Standard type macro 
</member>
        <member name="M:itk.InvalidRequestedRegionError.op_Assign(itk.InvalidRequestedRegionError!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Operator=.  Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.InvalidRequestedRegionError.#ctor(itk.InvalidRequestedRegionError!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor.  Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.InvalidRequestedRegionError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.InvalidRequestedRegionError.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.InvalidRequestedRegionError.Dispose">
Destructor. Need to specify empty throw() to avoid warnings. 
</member>
        <member name="M:itk.InvalidRequestedRegionError.#ctor">
Default constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="T:itk.InvalidRequestedRegionError">
\class InvalidRequestRegionError
 * Exception object for invalid requested region

</member>
        <member name="M:itk.DataObjectError.PrintSelf(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Print exception information.  This method can be overridden by
   * specific exception subtypes.  The default is to print out the
   * location where the exception was first thrown and any description
   * provided by the ``thrower''.   
</member>
        <member name="M:itk.DataObjectError.GetDataObject">
Get the data object that is throwing this exception. 
</member>
        <member name="M:itk.DataObjectError.SetDataObject(itk.DataObject*)">
Set the data object that is throwing this exception. 
</member>
        <member name="M:itk.DataObjectError.GetNameOfClass">
Standard type macro 
</member>
        <member name="M:itk.DataObjectError.op_Assign(itk.DataObjectError!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Operator=.  Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.DataObjectError.#ctor(itk.DataObjectError!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.DataObjectError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.DataObjectError.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.DataObjectError.Dispose">
Destructor. Need to specify empty throw() to avoid warnings. 
</member>
        <member name="M:itk.DataObjectError.#ctor">
Default constructor.  Needed to ensure the exception object can be
   * copied. 
</member>
        <member name="T:itk.DataObjectError">
\class DataObjectError
 * \brief Exception object for DataObject exceptions 
</member>
        <member name="F:itk.Object.m_MetaDataDictionary">
Implementation for holding Object MetaData
@see itk::MetaDataDictionary
@see itk::MetaDataObjectBase
@see itk::MetaDataObject
This is only allocated if used.

</member>
        <member name="F:itk.Object.m_SubjectImplementation">
Implementation class for Subject/Observer Pattern.
   * This is only allocated if used. 
</member>
        <member name="F:itk.Object.m_GlobalWarningDisplay">
Global object debug flag. 
</member>
        <member name="F:itk.Object.m_MTime">
Keep track of modification time. 
</member>
        <member name="F:itk.Object.m_Debug">
Enable/Disable debug messages. 
</member>
        <member name="M:itk.Object.PrintSelf(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Methods invoked by Print() to print information about the object
   * including superclasses. Typically not called by the user (use Print()
   * instead) but used in the hierarchical print process to combine the
   * output of several classes.  
</member>
        <member name="M:itk.Object.SetMetaDataDictionary(itk.MetaDataDictionary!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\return Set the MetaDataDictionary

</member>
        <member name="M:itk.Object.GetMetaDataDictionary">
\return A reference to this objects MetaDataDictionary.
\warning This reference may be changed.


\return A constant reference to this objects MetaDataDictionary.

</member>
        <member name="M:itk.Object.HasObserver(itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Return true if an observer is registered for this event. 
</member>
        <member name="M:itk.Object.RemoveAllObservers">
Remove all observers . 
</member>
        <member name="M:itk.Object.RemoveObserver(System.UInt32!System.Runtime.CompilerServices.IsLong)">
Remove the observer with this tag value. 
</member>
        <member name="M:itk.Object.InvokeEvent(itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Call Execute on all the Commands observing this event id. 

Call Execute on all the Commands observing this event id.
   * The actions triggered by this call doesn't modify this object. 
</member>
        <member name="M:itk.Object.GetCommand(System.UInt32!System.Runtime.CompilerServices.IsLong)">
Get the command associated with the given tag.  NOTE: This returns
   * a pointer to a Command, but it is safe to asign this to a
   * Command::Pointer.  Since Command inherits from LightObject, at this
   * point in the code, only a pointer or a reference to the Command can
   * be used.   
</member>
        <member name="M:itk.Object.AddObserver(itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Command*)">
Allow people to add/remove/invoke observers (callbacks) to any ITK
   * object. This is an implementation of the subject/observer design
   * pattern. An observer is added by specifying an event to respond to
   * and an itk::Command to execute. It returns an unsigned long tag
   * which can be used later to remove the event or retrieve the
   * command.  The memory for the Command becomes the responsibility of
   * this object, so don't pass the same instance of a command to two
   * different objects  
</member>
        <member name="M:itk.Object.SetGlobalWarningDisplay(System.Boolean)">
This is a global flag that controls whether any debug, warning
   *  or error messages are displayed.  
</member>
        <member name="M:itk.Object.SetReferenceCount(System.Int32)">
Sets the reference count (use with care)  
</member>
        <member name="M:itk.Object.UnRegister">
Decrease the reference count (release by another object).  
</member>
        <member name="M:itk.Object.Register">
Increase the reference count (mark as used by another object).  
</member>
        <member name="M:itk.Object.Modified">
Update the modification time for this object. Many filters rely on the
   * modification time to determine if they need to recompute their data.  
</member>
        <member name="M:itk.Object.GetMTime">
Return this objects modified time.  
</member>
        <member name="M:itk.Object.SetDebug(System.Boolean)">
Set the value of the debug flag. A non-zero value turns debugging on. 
</member>
        <member name="M:itk.Object.GetDebug">
Get the value of the debug flag.  
</member>
        <member name="M:itk.Object.DebugOff">
Turn debugging output off.  
</member>
        <member name="M:itk.Object.DebugOn">
Turn debugging output on.  
</member>
        <member name="M:itk.Object.GetNameOfClass">
Standard part of all itk objects. 
</member>
        <member name="M:itk.Object.CreateAnother">
Create an object from an instance, potentially deferring to a
   * factory.  This method allows you to create an instance of an
   * object that is exactly the same type as the referring object.
   * This is useful in cases where an object has been cast back to a
   * base class. 
</member>
        <member name="M:itk.Object.New">
Method for creation through the object factory. 
</member>
        <member name="D:itk.Object.Self">
Smart pointer typedef support. 
</member>
        <member name="T:itk.Object">
\class Object
 * \brief Base class for most itk classes.
 *
 * Object is the second-highest level base class for most itk objects.
 * It extends the base object functionality of LightObject by
 * implementing callbacks (via object/observer), debug flags/methods,
 * and modification time tracking. Most ITK classes should be a subclas
 * of Object due to the need to keep track of modified time.
 *
 * \ingroup ITKSystemObjects
 * \ingroup DataRepresentation

</member>
        <member name="M:itk.MetaDataDictionary.Find(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns an iterator matching the string key 
</member>
        <member name="M:itk.MetaDataDictionary.End">
Returns an iterator to the end of the map 
</member>
        <member name="M:itk.MetaDataDictionary.Begin">
\warning the following functions SHOULD NOT be used with 
   * the visual studio 6 compiler since iterator outside of the dll
   * context cannot be dereferenced safely 
Returns an iterator to the beginning of the map 
</member>
        <member name="M:itk.MetaDataDictionary.GetKeys">
Returns a vector of keys to the key/value entries in the
   * dictionary.  Iterate through the dictionary using these keys.

</member>
        <member name="M:itk.MetaDataDictionary.Print(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Defines the default behavior for printing out this element
\param os An output stream

</member>
        <member name="T:itk.MetaDataDictionary">
\class MetaDataDictionary
 * \author Hans J. Johnson
 * The MetaDataDictionary, along with the MetaDataObject derived template
 * classes, is designed to provide a mechanism for storing a collection of
 * arbitrary data types. The main motivation for such a collection is to
 * associate arbitrary data elements with itk DataObjects.

</member>
        <member name="M:itk.MetaDataObjectBase.Dispose">
Method for creation through the object factory.   
Default destructor

</member>
        <member name="M:itk.MetaDataObjectBase.Print(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Defines the default behavior for printing out this element
\param os An output stream

</member>
        <member name="M:itk.MetaDataObjectBase.GetMetaDataObjectTypeInfo">
\author Hans J. Johnson
\return A constant reference to a std::type_info object

</member>
        <member name="M:itk.MetaDataObjectBase.GetMetaDataObjectTypeName">
\author Hans J. Johnson
\return A pointer to a const char array containing the unique type name.

</member>
        <member name="M:itk.MetaDataObjectBase.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="D:itk.MetaDataObjectBase.Self">
Smart pointer typedef support. 
</member>
        <member name="T:itk.MetaDataObjectBase">
\class MetaDataObjectBase
 * \brief
 * The MetaDataObjectBase class is designed as the
 * common interface for MetaDataObject's.
 * This class is intended as the value part
 * of the (key,value) pair to be stored in
 * a MetaDataDictionary
 * 
 * \author Hans J. Johnson

</member>
        <member name="T:itk.NoEvent">
Macro for creating new Events

Define some common ITK events

</member>
        <member name="M:itk.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.EventObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Generic inserter operator for EventObject and its subclasses. 
</member>
        <member name="M:itk.EventObject.PrintSelf(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Methods invoked by Print() to print information about the object
   * including superclasses. Typically not called by the user (use Print()
   * instead) but used in the hierarchical print process to combine the
   * output of several classes.  
</member>
        <member name="M:itk.EventObject.CheckEvent(itk.EventObject!System.Runtime.CompilerServices.IsConst*)">
Check if given event matches or derives from this event. 
</member>
        <member name="M:itk.EventObject.GetEventName">
Return the StringName associated with the event. 
</member>
        <member name="M:itk.EventObject.Print(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Print Event information.  This method can be overridden by
   * specific Event subtypes.  The default is to print out the type of
   * the event. 
</member>
        <member name="M:itk.EventObject.MakeObject">
Create an Event of this type This method work as a Factory for
  *  creating events of each particular type. 
</member>
        <member name="M:itk.EventObject.Dispose">
Virtual destructor needed  
</member>
        <member name="M:itk.EventObject.#ctor">
Constructor and copy constructor.  Note that these functions will be
   * called when children are instantiated. 
</member>
        <member name="T:itk.EventObject">
\class EventObject
 * \brief Abstraction of the Events used to communicating among filters
    and with GUIs.
 *
 * EventObject provides a standard coding for sending and receiving messages
 * indicating things like the initiation of processes, end of processes,
 * modification of filters.
 *
 * EventObjects form a hierarchy similar to the itk::ExceptionObject allowing
 * to factorize common events in a tree-like structure. Higher detail can
 * be assigned by users by subclassing existing itk::EventObjects.
 *
 * EventObjects are used by itk::Command and itk::Object for implementing the
 * Observer/Subject design pattern. Observers register their interest in 
 * particular kinds of events produced by a specific itk::Object. This 
 * mechanism decouples classes among them.
 *
 * As opposed to itk::Exception, itk::EventObject does not represent error 
 * states, but simply flow of information allowing to trigger actions 
 * as a consequence of changes occurring in state on some itk::Objects.
 *
 * itk::EventObject carries information in its own type, it relies on the 
 * appropiate use of the RTTI (Run Time Type Information).
 *
 * A set of standard EventObjects is defined near the end of itkEventObject.h.
 *
 * \sa itk::Command
 * \sa itk::ExceptionObject
 *
 * \ingroup ITKSystemObjects 

</member>
        <member name="F:itk.LightObject.m_ReferenceCountLock">
Mutex lock to protect modification to the reference count 
</member>
        <member name="F:itk.LightObject.m_ReferenceCount">
Number of uses of this object by other objects. 
</member>
        <member name="D:itk.LightObject.InternalReferenceCountType">
Define the type of the reference count according to the
      target. This allows the use of atomic operations 
</member>
        <member name="M:itk.LightObject.PrintSelf(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Methods invoked by Print() to print information about the object
   * including superclasses. Typically not called by the user (use Print()
   * instead) but used in the hierarchical print process to combine the
   * output of several classes.  
</member>
        <member name="M:itk.LightObject.SetReferenceCount(System.Int32)">
Sets the reference count on this object. This is a dangerous
   * method, use it with care. 
</member>
        <member name="M:itk.LightObject.GetReferenceCount">
Gets the reference count on this object. 
</member>
        <member name="M:itk.LightObject.UnRegister">
Decrease the reference count (release by another object).  
</member>
        <member name="M:itk.LightObject.Register">
Increase the reference count (mark as used by another object).  
</member>
        <member name="M:itk.LightObject.BreakOnError">
This method is called when itkExceptionMacro executes. It allows 
   * the debugger to break on error.  
</member>
        <member name="M:itk.LightObject.Print(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Cause the object to print itself out. 
</member>
        <member name="M:itk.LightObject.new(System.UInt32)">
Used to avoid dll boundary problems.  
</member>
        <member name="M:itk.LightObject.GetNameOfClass">
Return the name of this class as a string. Used by the object factory
   * (implemented in New()) to instantiate objects of a named type. Also
   * used for debugging and other output information.  
</member>
        <member name="M:itk.LightObject.Delete">
Delete an itk object.  This method should always be used to delete an
   * object when the new operator was used to create it. Using the C
   *  delete method will not work with reference counting.  
</member>
        <member name="M:itk.LightObject.CreateAnother">
Create an object from an instance, potentially deferring to a
   * factory.  This method allows you to create an instance of an
   * object that is exactly the same type as the referring object.
   * This is useful in cases where an object has been cast back to a
   * base class. 
</member>
        <member name="M:itk.LightObject.New">
Method for creation through the object factory. 
</member>
        <member name="D:itk.LightObject.Self">
Standard clas typedefs. 
</member>
        <member name="T:itk.LightObject">
\class LightObject
 * \brief Light weight base class for most itk classes.
 * 
 * LightObject is the highest level base class for most itk objects. It
 * implements reference counting and the API for object printing.
 * It can be used as a lightweight base class in preference to Object.
 * (LightObject does not support callbacks or modified time as Object
 * does.) All ITK objects should be a subclass of LightObject or Object
 * with few exceptions (due to performance concerns).
 *
 * \sa Object
 * \ingroup ITKSystemObjects
 * \ingroup DataRepresentation

</member>
        <member name="M:itk.SimpleFastMutexLock.Unlock">
Unlock access. 
</member>
        <member name="M:itk.SimpleFastMutexLock.Lock">
Lock access. 
</member>
        <member name="M:itk.SimpleFastMutexLock.#ctor">
Constructor and destructor left public purposely because of stack allocation. 
</member>
        <member name="D:itk.SimpleFastMutexLock.Self">
Standard class typedefs.  
</member>
        <member name="T:itk.SimpleFastMutexLock">
\class SimpleFastMutexLock
 * \brief Critical section locking class that can be allocated on the stack.
 * 
 * SimpleFastMutexLock is used by FastMutexLock to perform mutex locking.
 * SimpleFastMutexLock is not a subclass of Object and is designed to be
 * allocated on the stack.
 *
 * \ingroup OSSystemObjects

</member>
        <member name="T:_EXCEPTION_DISPOSITION">
itkMacro.h defines standard system-wide macros, constants, and other
parameters. One of its most important functions is to define macros used
to interface to instance variables in a standard fashion. For example,
these macros manage modified time, debugging information, and provide a
standard interface to set and get instance variables.  Macros are
available for built-in types; for string classe; vector arrays;
object pointers; and debug, warning, and error printout information. 

This file is used to create the smallest windows.h possible.
 * Also it removes a few annoying #define's in windows.h. 
</member>
        <member name="M:itk.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Print out the indentation. Basically output a bunch of spaces.  
</member>
        <member name="M:itk.Indent.GetNextIndent">
Determine the next indentation level. Keep indenting by two until the 
   * a maximum of forty spaces is reached.  
</member>
        <member name="M:itk.Indent.GetNameOfClass">
Return the name of the class. 
</member>
        <member name="M:itk.Indent.#ctor(System.Int32)">
Construct the object with an initial indentation level. 
</member>
        <member name="M:itk.Indent.Delete">
Destroy this instance. 
</member>
        <member name="M:itk.Indent.New">
Method for creation through the object factory. 
</member>
        <member name="D:itk.Indent.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.Indent">
\class Indent
 * \brief Control indentation during Print() invocation.
 *
 * Indent is used to control indentation during the chaining print 
 * process. This way nested objects can correctly indent themselves.
 * This class works with the print methods defined in Object (i.e.,
 * the public method Print() and the protected methods PrintSelf(),
 * PrintHeader(), and PrintTrailer().
 *
 * \ingroup OSSystemObjects

</member>
        <member name="M:itk.TimeStamp.op_Implicit~System.UInt32!System.Runtime.CompilerServices.IsLong">
Allow for typcasting to unsigned long.  
</member>
        <member name="M:itk.TimeStamp.op_GreaterThan(itk.TimeStamp*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Support comparisons of time stamp objects directly.  
</member>
        <member name="M:itk.TimeStamp.GetMTime">
Return this object's Modified time.  
</member>
        <member name="M:itk.TimeStamp.Modified">
Set this objects time to the current time. The current time is just a
   * monotonically increasing unsigned long integer. It is possible for this
   * number to wrap around back to zero.  This should only happen for
   * processes that have been running for a very long time, while constantly
   * changing objects within the program. When this does occur, the typical
   * consequence should be that some filters will update themselves when
   * really they don't need to.   
</member>
        <member name="M:itk.TimeStamp.GetNameOfClass">
The class name as a string.  
</member>
        <member name="M:itk.TimeStamp.Delete">
Destoy this instance. 
</member>
        <member name="M:itk.TimeStamp.#ctor">
Constructor must remain public because classes instantiate
   * TimeStamps implicitly in their construction.  
</member>
        <member name="M:itk.TimeStamp.New">
Create an instance of this class. We don't want to use reference
   * counting. 
</member>
        <member name="D:itk.TimeStamp.Self">
Standard class typedefs. 
</member>
        <member name="M:itk.ProcessAborted.Dispose">
Virtual destructor needed for subclasses. Has to have empty throw(). 
</member>
        <member name="M:itk.ProcessAborted.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.ProcessAborted.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.ProcessAborted.#ctor">
Default constructor.  Needed to ensure the exception object can be
   * copied. 
</member>
        <member name="T:itk.ProcessAborted">
\class ProcessAborted
 * Exception thrown when a filter (actually a ProcessObject) has been aborted.
 * \ingroup ITKSystemObjects 

</member>
        <member name="M:itk.IncompatibleOperandsError.Dispose">
Virtual destructor needed for subclasses. Has to have empty throw(). 
</member>
        <member name="M:itk.IncompatibleOperandsError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.IncompatibleOperandsError.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.IncompatibleOperandsError.#ctor">
Default constructor.  Needed to ensure the exception object can be
   * copied. 
</member>
        <member name="T:itk.IncompatibleOperandsError">
\class IncompatibleOperandsError
 * Exception thrown when two operands are incompatible.
 * \ingroup ITKSystemObjects 

</member>
        <member name="M:itk.InvalidArgumentError.Dispose">
Virtual destructor needed for subclasses. Has to have empty throw(). 
</member>
        <member name="M:itk.InvalidArgumentError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied.

</member>
        <member name="M:itk.InvalidArgumentError.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied.

</member>
        <member name="M:itk.InvalidArgumentError.#ctor">
Default constructor.  Needed to ensure the exception object can be
copied.

</member>
        <member name="T:itk.InvalidArgumentError">
\class InvalidArgumentError
 * Exception thrown when invalid argument is given to a method
 * or function.
 * \ingroup ITKSystemObjects 

</member>
        <member name="M:itk.RangeError.Dispose">
Virtual destructor needed for subclasses. Has to have empty throw(). 
</member>
        <member name="M:itk.RangeError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.RangeError.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.RangeError.#ctor">
Default constructor.  Needed to ensure the exception object can be
   * copied. 
</member>
        <member name="T:itk.RangeError">
\class RangeError
 * Exception thrown when accessing memory out of range.
 * \ingroup ITKSystemObjects 

</member>
        <member name="M:itk.MemoryAllocationError.Dispose">
Virtual destructor needed for subclasses. Has to have empty throw(). 
</member>
        <member name="M:itk.MemoryAllocationError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!S">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.MemoryAllocationError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.MemoryAllocationError.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.MemoryAllocationError.#ctor">
Default constructor.  Needed to ensure the exception object can be
   * copied. 
</member>
        <member name="T:itk.MemoryAllocationError">
Specific exception types that are subclasses of ExceptionObject follow

\class MemoryAllocationError
 * Exception thrown when image memory allocation fails.
 * \ingroup ITKSystemObjects

</member>
        <member name="M:itk.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.ExceptionObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Generic inserter operator for ExceptionObject and its subclasses. 
</member>
        <member name="T:itk.ExceptionObject.ReferenceCounterInterface">
\class ReferenceCounterInterface
   *
   *  Exception data.  Location of the error and description of the error.
   *
   *  Class hierarchy
   *
   *
   *           ReferenceCounterInterface (Register/UnRegister)
   *                     ^
   *                     |
   *               ExceptionData       LightObject (Register/UnRegister)
   *                     ^                  ^
   *                     |                  |
   *                   ReferenceCountedExceptionData (Register/UnRegister)
   *
   *
   *
   *  The ReferenceCounterInterface is an abstract class providing
   *  the API interface expected by the SmartPointer. Its second derived
   *  class, the ReferenceCountedExceptionData, double inherits from LightObject
   *  and ExceptionData, and overloads the Register()/UnRegister() methods to
   *  delegate them to its second parent, the LightObject.
   *

</member>
        <member name="M:itk.ExceptionObject.what">
Provide std::exception::what() implementation. 
</member>
        <member name="M:itk.ExceptionObject.GetLine">
What line did the exception occur in? 
</member>
        <member name="M:itk.ExceptionObject.GetFile">
What file did the exception occur in? 
</member>
        <member name="M:itk.ExceptionObject.SetLocation(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Methods to get and set the Location and Description fields. The Set
   * methods are overloaded to support both std::string and const char 
   * array types. Get methods return const char arrays. 
</member>
        <member name="M:itk.ExceptionObject.Print(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Print exception information.  This method can be overridden by
   * specific exception subtypes.  The default is to print out the
   * location where the exception was first thrown and any description
   * provided by the ``thrower''.   
</member>
        <member name="M:itk.ExceptionObject.op_Equality(itk.ExceptionObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Equivalence operator. 
</member>
        <member name="M:itk.ExceptionObject.op_Assign(itk.ExceptionObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator. 
</member>
        <member name="M:itk.ExceptionObject.Dispose">
Virtual destructor needed for subclasses. Has to have empty throw(). 
</member>
        <member name="M:itk.ExceptionObject.#ctor">
Various types of constructors.  Note that these functions will be
  * called when children are instantiated.  The default constructor and
  * the copy constructor of ExceptionObject never throw an exception. 
</member>
        <member name="T:itk.ExceptionObject">
\class ExceptionObject
 * \brief Standard exception handling object.
 *
 * ExceptionObject provides standard methods for throwing
 * and managing exceptions in itk. Specific exceptions should be
 * derived from this class. Note that this class is derived from
 * std::exception, so an application can catch ITK exceptions as
 * std::exception if desired.
 *
 * ExceptionObject maintains two types of information: a location
 * and description (both of which are strings). The location is the
 * point in the code where the exception was thrown; the description
 * is an error message that describes the exception. The ExceptionObject
 * can be thrown explicitly in code, or more conveniently, the 
 * itkExceptionMacro (found in Common/itkMacro.h) can be used.
 *
 * \ingroup ITKSystemObjects 

</member>
        <member name="T:itk.OStringStream">
itk::OStringStream wrapper to hide differences between
std::ostringstream and the old ostrstream.  Necessary for
portability.

</member>
        <member name="M:itk.OutputWindowDisplayText(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
The following is used to output debug, warning, and error messages.
Use a global function which actually calls:
OutputWindow::GetInstance()-&gt;DisplayText();
This is to avoid Object #include of OutputWindow
while OutputWindow #includes Object. 
</member>
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkImageSource.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkImageSource.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkImageSource.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkImageSource.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkImageSource.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkImageSource.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMeshSource.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMeshSource.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkImageSource.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkImageSource.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMeshSource.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMeshSource.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkPathSource.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkPathSource.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkImageSource.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkImageSource.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMeshSource.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMeshSource.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkPathSource.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkPathSource.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.InternalHeader'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.FilenamesContainer'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
    </members>
</doc>