<?xml version="1.0"?>
<doc>
    <assembly>
        "ManagedITK.MorphologicalFilters"
    </assembly>
    <members>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByErosionImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::ReconstructionByErosionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedFromMarkersImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::GrayscaleMorphologicalClosingImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalGradientImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::MorphologicalGradientImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS2ISS2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS2ISS2.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConcaveImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::HConcaveImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleErodeImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::GrayscaleErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF2IF2.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF2IF2.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF2IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryErodeImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::BinaryErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::GrayscaleMorphologicalOpeningImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF3IF3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF3IF3.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMinimaImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::HMinimaImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleErodeImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::GrayscaleErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanDilateImageFilter_IUC2">
            <summary>
This class is a managed type instance for itk::VanHerkGilWermanDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedFromMarkersImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS2ISS2.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS2ISS2.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS2ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryDilateImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::BinaryDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF2IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBlackTopHatImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::BlackTopHatImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF2IF2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF2IF2.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMaximaImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::HMaximaImageFilter .
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanErodeImageFilter_ISS3">
            <summary>
This class is a managed type instance for itk::VanHerkGilWermanErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.SafeBorder">
            <summary>Get/set whether a safe border is added to input image to avoid borders effects and removed it once the closing is done.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::BinaryMorphologicalClosingImageFilter .
</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByErosionImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::ReconstructionByErosionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF3.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanDilateImageFilter_IF3">
            <summary>
This class is a managed type instance for itk::VanHerkGilWermanDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF3IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleDilateImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::GrayscaleDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC3.Level">
            <summary>Get/set the flood level for generating the merge tree from the initial segmentation.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC3.Threshold">
            <summary>Get/set the input thresholding parameter. Units are a percentage of the maximum depth in the image.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWatershedImageFilter_IUC3">
            <summary>
This class is a managed type instance for itk::WatershedImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF3IF3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF3IF3.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConcaveImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::HConcaveImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.Level">
            <summary>Get/set the flood level.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC3IUC3.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC3IUC3.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC3IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryDilateImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::BinaryDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalGradientImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::MorphologicalGradientImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC3IUC3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC3IUC3.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMinimaImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::HMinimaImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::BinaryMorphologicalOpeningImageFilter .
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanDilateImageFilter_IUC3">
            <summary>
This class is a managed type instance for itk::VanHerkGilWermanDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS2ISS2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS2ISS2.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMaximaImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::HMaximaImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedFromMarkersImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::BinaryMorphologicalOpeningImageFilter .
</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS3.Level">
            <summary>Get/set the flood level for generating the merge tree from the initial segmentation.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS3.Threshold">
            <summary>Get/set the input thresholding parameter. Units are a percentage of the maximum depth in the image.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWatershedImageFilter_ISS3">
            <summary>
This class is a managed type instance for itk::WatershedImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS3ISS3.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS3ISS3.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS3ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryErodeImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::BinaryErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF2IF2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF2IF2.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConcaveImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::HConcaveImageFilter .
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF3.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanErodeImageFilter_IF3">
            <summary>
This class is a managed type instance for itk::VanHerkGilWermanErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS3ISS3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS3ISS3.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConcaveImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::HConcaveImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC3IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBlackTopHatImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::BlackTopHatImageFilter .
</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByDilationImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::ReconstructionByDilationImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF3IF3.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF3IF3.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF3IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryErodeImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::BinaryErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF2IF2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF2IF2.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConvexImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::HConvexImageFilter .
</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS2ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWhiteTopHatImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::WhiteTopHatImageFilter .
</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::OpeningByReconstructionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.SafeBorder">
            <summary>Get/set whether a safe border is added to input image to avoid borders effects and removed it once the closing is done.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::BinaryMorphologicalClosingImageFilter .
</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF3IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWhiteTopHatImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::WhiteTopHatImageFilter .
</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF3IF3.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF3IF3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF3IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkOpeningByReconstructionImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::OpeningByReconstructionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF2IF2.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF2IF2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF2IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkClosingByReconstructionImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::ClosingByReconstructionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::GrayscaleFillholeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.SafeBorder">
            <summary>Get/set whether a safe border is added to input image to avoid borders effects and removed it once the closing is done.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::BinaryMorphologicalClosingImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC2IUC2.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC2IUC2.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC2IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryDilateImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::BinaryDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.Level">
            <summary>Get/set the flood level.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF3IF3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF3IF3.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConvexImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::HConvexImageFilter .
</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL3.Level">
            <summary>Get/set the flood level for generating the merge tree from the initial segmentation.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL3.Threshold">
            <summary>Get/set the input thresholding parameter. Units are a percentage of the maximum depth in the image.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWatershedImageFilter_IUL3">
            <summary>
This class is a managed type instance for itk::WatershedImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::GrayscaleGrindPeakImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::GrayscaleGrindPeakImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::GrayscaleMorphologicalClosingImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC2IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBlackTopHatImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::BlackTopHatImageFilter .
</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkClosingByReconstructionImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::ClosingByReconstructionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::OpeningByReconstructionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleDilateImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::GrayscaleDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::GrayscaleGrindPeakImageFilter .
</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF2IF2.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF2IF2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF2IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkOpeningByReconstructionImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::OpeningByReconstructionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF3IF3.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF3IF3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF3IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkClosingByReconstructionImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::ClosingByReconstructionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkClosingByReconstructionImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::ClosingByReconstructionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF3IF3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleFillholeImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::GrayscaleFillholeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::GrayscaleMorphologicalClosingImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::GrayscaleMorphologicalClosingImageFilter .
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanErodeImageFilter_IUC2">
            <summary>
This class is a managed type instance for itk::VanHerkGilWermanErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::GrayscaleMorphologicalOpeningImageFilter .
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanErodeImageFilter_ISS2">
            <summary>
This class is a managed type instance for itk::VanHerkGilWermanErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL2.Level">
            <summary>Get/set the flood level for generating the merge tree from the initial segmentation.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL2.Threshold">
            <summary>Get/set the input thresholding parameter. Units are a percentage of the maximum depth in the image.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUL2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUL2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWatershedImageFilter_IUL2">
            <summary>
This class is a managed type instance for itk::WatershedImageFilter .
</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC2IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWhiteTopHatImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::WhiteTopHatImageFilter .
</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC2.Level">
            <summary>Get/set the flood level for generating the merge tree from the initial segmentation.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC2.Threshold">
            <summary>Get/set the input thresholding parameter. Units are a percentage of the maximum depth in the image.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWatershedImageFilter_IUC2">
            <summary>
This class is a managed type instance for itk::WatershedImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF3IF3.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF3IF3.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF3IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryDilateImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::BinaryDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::GrayscaleMorphologicalOpeningImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS2ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBlackTopHatImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::BlackTopHatImageFilter .
</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS3ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWhiteTopHatImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::WhiteTopHatImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF2IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleErodeImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::GrayscaleErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.Level">
            <summary>Get/set the flood level.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC2IUC2.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC2IUC2.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC2IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryErodeImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::BinaryErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF2.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanErodeImageFilter_IF2">
            <summary>
This class is a managed type instance for itk::VanHerkGilWermanErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF2IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleDilateImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::GrayscaleDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS2.Level">
            <summary>Get/set the flood level for generating the merge tree from the initial segmentation.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS2.Threshold">
            <summary>Get/set the input thresholding parameter. Units are a percentage of the maximum depth in the image.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter_ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter_ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWatershedImageFilter_ISS2">
            <summary>
This class is a managed type instance for itk::WatershedImageFilter .
</summary>
        </member>
        <member name="M:itk.WatershedMiniPipelineProgressCommand.SetNumberOfFilters(System.Double!System.Runtime.CompilerServices.IsConst)">
Set/Get the number of filters that this command will expect to be
   * observing 
</member>
        <member name="M:itk.WatershedMiniPipelineProgressCommand.SetCount(System.Double!System.Runtime.CompilerServices.IsConst)">
Set/Get the base count for stepping through filter progress values 
</member>
        <member name="M:itk.WatershedMiniPipelineProgressCommand.SetFilter(itk.ProcessObject*)">
Set/Get the filter whose UpdateProgress will be set by this
   * command object 
</member>
        <member name="M:itk.WatershedMiniPipelineProgressCommand.Execute(itk.Object*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Standard Command virtual methods 
</member>
        <member name="D:itk.WatershedMiniPipelineProgressCommand.Self">
Smart pointer declaration methods 
</member>
        <member name="T:itk.WatershedMiniPipelineProgressCommand">
\class WatershedMiniPipelineProgressCommand
 * A specialized Command object for updating the progress of a
 *  MiniPipeline.  Follows the progress of a series of filters
 *  and calls UpdateProgress on another filter (i.e. the filter
 * implementing the mini-pipeline). 
</member>
        <member name="M:itk.EquivalencyTable.#ctor">
Convenience method for debugging.   
</member>
        <member name="M:itk.EquivalencyTable.End">
Returns and iterator pointing to one position past the last
   * element of the (unordered) table.  
</member>
        <member name="M:itk.EquivalencyTable.Begin">
Returns an iterator pointing to the first element of the (unordered)
   *  table.   
</member>
        <member name="M:itk.EquivalencyTable.Size">
Returns the number of entries in the table.   
</member>
        <member name="M:itk.EquivalencyTable.Empty">
Returns TRUE if the table is empty, FALSE if it is not empty.   
</member>
        <member name="M:itk.EquivalencyTable.Clear">
Erases all the entries in the table.   
</member>
        <member name="M:itk.EquivalencyTable.Erase(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
Erases the entry with key a.  
</member>
        <member name="M:itk.EquivalencyTable.IsEntry(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
Returns TRUE if the label is found in the table and FALSE is the label is
   * not found in the table.   
</member>
        <member name="M:itk.EquivalencyTable.RecursiveLookup(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
Lookup an equivalency in the table by recursing through all
   * successive equivalencies.  For example, if the follow entries
   * exist in the table {8=7, 7=6, 6=5}, then RecursiveLookup(8)
   * returns 5.  
</member>
        <member name="M:itk.EquivalencyTable.Lookup(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
Lookup an equivalency in the table.  If no entry is found in the
   * table, the method returns its the value of the argument.  Does
   * not recursively descent through equivalencies.  
</member>
        <member name="M:itk.EquivalencyTable.AddAndFlatten(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Insert an equivalency into the table and flatten that
   * equivalency. A return value of TRUE indicates that the
   * equivalency did not previously exist in the table and was
   * successfully added.  A FALSE return value indicates that the
   * equivalency was not added to the table because a conflict with an
   * existing entry occurred (most likely, the equivalency was already
   * recorded directly or indirectly). 
</member>
        <member name="M:itk.EquivalencyTable.Add(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Insert an equivalency into the table.  A return value of TRUE
   * indicates that the equivalency did not previously exist in the
   * table and was successfully added.  A FALSE return value indicates
   * that the equivalency was not added to the table because a
   * conflict with an existing entry occurred (most likely, the
   * equivalency was already recorded directly or indirectly).  
</member>
        <member name="M:itk.EquivalencyTable.Flatten">
``Flattens'' the equivalency table by eliminating all redundant
   * and recursive equivalencies.  I.e. the set { 2=1; 3=2; 4=3 } is
   * converted to {4=1; 3=1; 2=1}.  
</member>
        <member name="D:itk.EquivalencyTable.HashTableType">
Define the container type for the table. 
</member>
        <member name="D:itk.EquivalencyTable.Self">
Standard smart pointer declarations 
</member>
        <member name="T:itk.EquivalencyTable">
\class EquivalencyTable
 * \brief Hash table to manage integral label equivalencies
 *
 * EquivalencyTable is a hash table for recording equivalencies among
 * unsigned long integer values. EquivalencyTable can store recursive
 * relationships (8=7, 7=6, 6=5, ...) or be ``flattened'' to eliminate
 * recursion.  The table uses an efficient algorithm for eliminating
 * redundancy and preventing circular dependencies.
 *
 * \par
 * In the context of the watershed segmentation algorithm
 * (itk::WatershedImageFilter), this table is used to store connections
 * identified among image segments and as the input to
 * itk::watershed::Relabeler.
 * \ingroup WatershedSegmentation

</member>
        <member name="M:itk.OneWayEquivalencyTable.#ctor">
Convenience method for debugging.   
</member>
        <member name="M:itk.OneWayEquivalencyTable.End">
Returns and iterator pointing to one position past the last
   * element of the (unordered) table.  
</member>
        <member name="M:itk.OneWayEquivalencyTable.Begin">
Returns an iterator pointing to the first element of the (unordered)
      table.    
</member>
        <member name="M:itk.OneWayEquivalencyTable.Empty">
Returns TRUE if the table is empty, FALSE if it is not empty.   
</member>
        <member name="M:itk.OneWayEquivalencyTable.Clear">
Erases all the entries in the table.   
</member>
        <member name="M:itk.OneWayEquivalencyTable.Erase(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
Erases the entry with key a.   
</member>
        <member name="M:itk.OneWayEquivalencyTable.IsEntry(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
Returns TRUE if the label is found in the table and FALSE is the
   * label is not found in the table.  
</member>
        <member name="M:itk.OneWayEquivalencyTable.RecursiveLookup(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
Lookup an equivalency in the table by recursing through all
   * successive equivalencies.  For example, if the follow entries
   * exist in the table {8=7, 7=6, 6=5}, then RecursiveLookup(8)
   * returns 5.  
</member>
        <member name="M:itk.OneWayEquivalencyTable.Lookup(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst)">
Lookup an equivalency in the table.  If no entry is found in the
   * table, the method returns its the value of the argument.  Does
   * not recursively descent through equivalencies.  
</member>
        <member name="M:itk.OneWayEquivalencyTable.Add(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Insert an equivalency into the table.  A return value of TRUE
  * indicates that the equivalency did not previously exist in the
  * table and was successfully added.  A FALSE return value indicates
  * that the equivalency was not added to the table because a conflict
  * with an existing entry occurred (most likely, the equivalency was
  * already recorded directly or indirectly).

</member>
        <member name="M:itk.OneWayEquivalencyTable.Flatten">
``Flattens'' the equivalency table by eliminating all redundant
   * and recursive equivalencies.  I.e. the set { 2=1; 3=2; 4=3 } is
   * converted to {4=1; 3=1; 2=1}.  
</member>
        <member name="D:itk.OneWayEquivalencyTable.HashTableType">
Define the container type for this table 
</member>
        <member name="D:itk.OneWayEquivalencyTable.Self">
Standard typedefs and smart pointer declarations.   
</member>
        <member name="T:itk.OneWayEquivalencyTable">
\class OneWayEquivalencyTable
 * \brief Hash table to manage integral label equivalencies that are order dependent.
 *
 * OneWayEquivalencyTable is a variation on itk::EquivalencyTable that
 * preserves the order of equivalencies.  For example, the entries { 5
 * = 4 } and {4 = 5} are not equivalent in this table, yet are the
 * treated as the same entry in EquivalencyTable.  Because of the
 * one-way logic of the table, reflexive equivalencies will result in
 * cycling from recursive lookups or flattening of the table.  The
 * responsibility is on the user for preventing recursive cycling.
 *
 * \par
 * See itk::EquivalencyTable for more information
 * \ingroup WatershedSegmentation
 *
 * \sa EquivalencyTable  
</member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF2IF2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByErosionImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::ReconstructionByErosionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF2IF2.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF2IF2.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF2IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryDilateImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::BinaryDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::GrayscaleGrindPeakImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF3IF3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF3IF3.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMaximaImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::HMaximaImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF3IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBlackTopHatImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::BlackTopHatImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF3IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalGradientImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::MorphologicalGradientImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::GrayscaleFillholeImageFilter .
</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByDilationImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::ReconstructionByDilationImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalGradientImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::MorphologicalGradientImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS3ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBlackTopHatImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::BlackTopHatImageFilter .
</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkBlackTopHatImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBlackTopHatImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBlackTopHatImageFilter">
            <summary>
This class is a managed wrapper for itk::BlackTopHatImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IBlackTopHatImageFilter">
            <summary>
This class is a managed interface for itk::BlackTopHatImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::OpeningByReconstructionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS2ISS2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS2ISS2.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConvexImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::HConvexImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::GrayscaleFillholeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleDilateImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::GrayscaleDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::GrayscaleGrindPeakImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.SafeBorder">
            <summary>Get/set whether a safe border is added to input image to avoid borders effects and removed it once the closing is done.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::BinaryMorphologicalClosingImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.Level">
            <summary>Get/set the flood level.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC2IUC2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC2IUC2.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMinimaImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::HMinimaImageFilter .
</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByDilationImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::ReconstructionByDilationImageFilter .
</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC3IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWhiteTopHatImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::WhiteTopHatImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF2IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalGradientImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::MorphologicalGradientImageFilter .
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanDilateImageFilter_ISS2">
            <summary>
This class is a managed type instance for itk::VanHerkGilWermanDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.Level">
            <summary>Get/set the flood level.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedFromMarkersImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF3IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleErodeImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::GrayscaleErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::GrayscaleMorphologicalOpeningImageFilter .
</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByDilationImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::ReconstructionByDilationImageFilter .
</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF3IF3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByErosionImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::ReconstructionByErosionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkClosingByReconstructionImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::ClosingByReconstructionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedFromMarkersImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC3IUC3.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC3IUC3.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC3IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryErodeImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::BinaryErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF2IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWhiteTopHatImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::WhiteTopHatImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::GrayscaleFillholeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::BinaryMorphologicalOpeningImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::BinaryMorphologicalOpeningImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::BinaryMorphologicalOpeningImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::GrayscaleMorphologicalOpeningImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF2IF2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF2IF2.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMinimaImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::HMinimaImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedFromMarkersImageFilter .
</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter.Level">
            <summary>Get/set the flood level for generating the merge tree from the initial segmentation.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter.Threshold">
            <summary>Get/set the input thresholding parameter. Units are a percentage of the maximum depth in the image.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWatershedImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkWatershedImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkWatershedImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWatershedImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWatershedImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkWatershedImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWatershedImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWatershedImageFilter">
            <summary>
This class is a managed wrapper for itk::WatershedImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IWatershedImageFilter">
            <summary>
This class is a managed interface for itk::WatershedImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanErodeImageFilter_IUC3">
            <summary>
This class is a managed type instance for itk::VanHerkGilWermanErodeImageFilter .
</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkVanHerkGilWermanErodeImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanErodeImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanErodeImageFilter">
            <summary>
This class is a managed wrapper for itk::VanHerkGilWermanErodeImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IVanHerkGilWermanErodeImageFilter">
            <summary>
This class is a managed interface for itk::VanHerkGilWermanErodeImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC2IUC2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC2IUC2.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConcaveImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::HConcaveImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF2IF2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleFillholeImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::GrayscaleFillholeImageFilter .
</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkGrayscaleFillholeImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleFillholeImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleFillholeImageFilter">
            <summary>
This class is a managed wrapper for itk::GrayscaleFillholeImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IGrayscaleFillholeImageFilter">
            <summary>
This class is a managed interface for itk::GrayscaleFillholeImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::GrayscaleMorphologicalOpeningImageFilter .
</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalOpeningImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalOpeningImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalOpeningImageFilter">
            <summary>
This class is a managed wrapper for itk::GrayscaleMorphologicalOpeningImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IGrayscaleMorphologicalOpeningImageFilter">
            <summary>
This class is a managed interface for itk::GrayscaleMorphologicalOpeningImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.SafeBorder">
            <summary>Get/set whether a safe border is added to input image to avoid borders effects and removed it once the closing is done.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::BinaryMorphologicalClosingImageFilter .
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanDilateImageFilter_ISS3">
            <summary>
This class is a managed type instance for itk::VanHerkGilWermanDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS2ISS2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS2ISS2.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMinimaImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::HMinimaImageFilter .
</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::OpeningByReconstructionImageFilter .
</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkOpeningByReconstructionImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkOpeningByReconstructionImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkOpeningByReconstructionImageFilter">
            <summary>
This class is a managed wrapper for itk::OpeningByReconstructionImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IOpeningByReconstructionImageFilter">
            <summary>
This class is a managed interface for itk::OpeningByReconstructionImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::GrayscaleGrindPeakImageFilter .
</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkGrayscaleGrindPeakImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleGrindPeakImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleGrindPeakImageFilter">
            <summary>
This class is a managed wrapper for itk::GrayscaleGrindPeakImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IGrayscaleGrindPeakImageFilter">
            <summary>
This class is a managed interface for itk::GrayscaleGrindPeakImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleDilateImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::GrayscaleDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.SafeBorder">
            <summary>Get/set whether a safe border is added to input image to avoid borders effects and removed it once the closing is done.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::BinaryMorphologicalClosingImageFilter .
</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter.SafeBorder">
            <summary>Get/set whether a safe border is added to input image to avoid borders effects and removed it once the closing is done.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkBinaryMorphologicalClosingImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalClosingImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalClosingImageFilter">
            <summary>
This class is a managed wrapper for itk::BinaryMorphologicalClosingImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IBinaryMorphologicalClosingImageFilter">
            <summary>
This class is a managed interface for itk::BinaryMorphologicalClosingImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC3IUC3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC3IUC3.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMaximaImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::HMaximaImageFilter .
</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF3IF3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF3IF3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF3IF3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF3IF3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF3IF3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF3IF3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF3IF3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF3IF3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByDilationImageFilter_IF3IF3">
            <summary>
This class is a managed type instance for itk::ReconstructionByDilationImageFilter .
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.Level">
            <summary>Get/set the flood level.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedImageFilter .
</summary>
        </member>
        <member name="M:itk.Barrier.Wait">
A thread calling this method waits until m_NumberOfThreads have called
   *  Wait() on the barrier.  When the final expected thread calls Wait(), all
   *  threads are released. 
</member>
        <member name="M:itk.Barrier.Initialize(System.UInt32)">
Creates a new system variable used to implement the barrier.  The
      argument to this method is the number of threads that must Wait() on the
      barrier before it is cleared. 
</member>
        <member name="M:itk.Barrier.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="M:itk.Barrier.New">
Method for creation through the object factory. 
</member>
        <member name="D:itk.Barrier.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.Barrier">
 \class Barrier
 \brief Standard barrier class implementation for synchronizing the execution
 of threads.

 A barrier class is used to synchronize threaded execution by allowing
 threads to block until each has reached a desired state.  As each thread
 enters the barrier it blocks. When all threads have entered the barrier,
 all released and continue to execute.

 A thread enters the barrier by calling Wait() on the barrier class.
 To set up a barrier class, call Initialize(n) where n is the number of
 waiting threads that will trigger a release of the barrier.

 \par NOTE FOR SGI USERS. You may optionally enable a fetchop library
 implementation of barriers that will give significantly faster performance
 over the sproc barrier class.  With the fetchop implementation, you are
 limited to Barrier::m_MaxBarriers separate barrier instantiations, although
 this limit can be safely raised if necessary.  To enable the fetchop
 implementation, set ITK_USE_FETCHOP_BARRIERS and link applications against
 -lfetchop.

</member>
        <member name="M:itk.ConditionVariable.Broadcast">
Signal that the condition is true and release all waiting threads 
</member>
        <member name="M:itk.ConditionVariable.Signal">
Signal that the condition is true and release one waiting thread 
</member>
        <member name="M:itk.ConditionVariable.Wait(itk.SimpleMutexLock*)">
Suspend execution of this thread until the condition is signaled. The
   *  argument is a SimpleMutex object that must be locked prior to calling
   *  this method.  
</member>
        <member name="M:itk.ConditionVariable.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="M:itk.ConditionVariable.New">
Method for creation through the object factory. 
</member>
        <member name="D:itk.ConditionVariable.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.ConditionVariable">
\class ConditionVariable
 * \brief A thread synchronization object used to suspend execution until some
 * condition on shared data is met.
 *
 * A thread calls Wait() to suspend its execution until the condition is
 * met. Each call to Signal() from an executing thread will then cause a single
 * waiting thread to be released.  A call to Signal() means, "signal
 * that the condition is true."  Broadcast() releases all threads waiting on
 * the condition variable.
 *
 * The ITK ConditionVariable implementation is consistent with the standard
 * definition and use of condition variables in pthreads and other common
 * thread libraries.
 *
 * IMPORTANT: A condition variable always requires an associated SimpleMutexLock
 * object.  The mutex object is used to avoid a dangerous race condition when
 * Wait() and Signal() are called simultaneously from two different
 * threads.
 *
 * On systems using pthreads, this implementation abstract the
 * standard calls to the pthread condition variable.  On Win32
 * systems, there is no system provided condition variable.  This
 * class implements a condition variable using a critical section, a
 * semphore, an event and a number of counters.  The implementation is
 * almost an extract translation of the implementation presented by
 * Douglas C Schmidt and Irfan Pyarali in "Strategies for Implementing
 * POSIX Condition Variables on Win32". This article can be found at
 * http://www.cs.wustl.edu/~schmidt/win32-cv-1.html
 *

</member>
        <member name="P:itk.itkHMaximaImageFilter_ISS3ISS3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS3ISS3.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMaximaImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::HMaximaImageFilter .
</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter.Level">
            <summary>Get/set the flood level.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkMorphologicalWatershedImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedImageFilter">
            <summary>
This class is a managed wrapper for itk::MorphologicalWatershedImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IMorphologicalWatershedImageFilter">
            <summary>
This class is a managed interface for itk::MorphologicalWatershedImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::BinaryMorphologicalOpeningImageFilter .
</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkBinaryMorphologicalOpeningImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryMorphologicalOpeningImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryMorphologicalOpeningImageFilter">
            <summary>
This class is a managed wrapper for itk::BinaryMorphologicalOpeningImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IBinaryMorphologicalOpeningImageFilter">
            <summary>
This class is a managed interface for itk::BinaryMorphologicalOpeningImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalGradientImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::MorphologicalGradientImageFilter .
</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkMorphologicalGradientImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalGradientImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalGradientImageFilter">
            <summary>
This class is a managed wrapper for itk::MorphologicalGradientImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IMorphologicalGradientImageFilter">
            <summary>
This class is a managed interface for itk::MorphologicalGradientImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedFromMarkersImageFilter .
</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByErosionImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::ReconstructionByErosionImageFilter .
</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS3ISS3.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS3ISS3.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS3ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryDilateImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::BinaryDilateImageFilter .
</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkBinaryDilateImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryDilateImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryDilateImageFilter">
            <summary>
This class is a managed wrapper for itk::BinaryDilateImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IBinaryDilateImageFilter">
            <summary>
This class is a managed interface for itk::BinaryDilateImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF2.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter_IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanDilateImageFilter_IF2">
            <summary>
This class is a managed type instance for itk::VanHerkGilWermanDilateImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC2IUC2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC2IUC2.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConvexImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::HConvexImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS3ISS3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS3ISS3.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConvexImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::HConvexImageFilter .
</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC3IUC3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC3IUC3.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConcaveImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::HConcaveImageFilter .
</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkHConcaveImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConcaveImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConcaveImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkHConcaveImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConcaveImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConcaveImageFilter">
            <summary>
This class is a managed wrapper for itk::HConcaveImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IHConcaveImageFilter">
            <summary>
This class is a managed interface for itk::HConcaveImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleDilateImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::GrayscaleDilateImageFilter .
</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkGrayscaleDilateImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleDilateImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleDilateImageFilter">
            <summary>
This class is a managed wrapper for itk::GrayscaleDilateImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IGrayscaleDilateImageFilter">
            <summary>
This class is a managed interface for itk::GrayscaleDilateImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter.Boundary">
            <summary>Get/set the boundary.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkVanHerkGilWermanDilateImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkVanHerkGilWermanDilateImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkVanHerkGilWermanDilateImageFilter">
            <summary>
This class is a managed wrapper for itk::VanHerkGilWermanDilateImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IVanHerkGilWermanDilateImageFilter">
            <summary>
This class is a managed interface for itk::VanHerkGilWermanDilateImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleErodeImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::GrayscaleErodeImageFilter .
</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkClosingByReconstructionImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::ClosingByReconstructionImageFilter .
</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter.PreserveIntensities">
            <summary>Get/set whether the original intensities of the image retained for those pixels unaffected by the opening by reconstrcution. If Off, the output pixel contrast will be reduced.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkClosingByReconstructionImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkClosingByReconstructionImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkClosingByReconstructionImageFilter">
            <summary>
This class is a managed wrapper for itk::ClosingByReconstructionImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IClosingByReconstructionImageFilter">
            <summary>
This class is a managed interface for itk::ClosingByReconstructionImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS3ISS3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS3ISS3.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMinimaImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::HMinimaImageFilter .
</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkHMinimaImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMinimaImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMinimaImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkHMinimaImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMinimaImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMinimaImageFilter">
            <summary>
This class is a managed wrapper for itk::HMinimaImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IHMinimaImageFilter">
            <summary>
This class is a managed interface for itk::HMinimaImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2">
            <summary>
This class is a managed type instance for itk::MorphologicalWatershedFromMarkersImageFilter .
</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter.MarkWatershedLine">
            <summary>Get/set whether the watershed pixel must be marked or not. Default is true. Set to false to avoid writing watershed pixels, it also decreases algorithm complexity.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter.FullyConnected">
            <summary>Get/set the neighbourhood connectivity for the algorithm. For example: with 2D images, FullyConnected=True means 8-neighbourhood connectivity and FullyConnected=False means 4-neighbourhood connectivity.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkMorphologicalWatershedFromMarkersImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkMorphologicalWatershedFromMarkersImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkMorphologicalWatershedFromMarkersImageFilter">
            <summary>
This class is a managed wrapper for itk::MorphologicalWatershedFromMarkersImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IMorphologicalWatershedFromMarkersImageFilter">
            <summary>
This class is a managed interface for itk::MorphologicalWatershedFromMarkersImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleErodeImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::GrayscaleErodeImageFilter .
</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkGrayscaleErodeImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleErodeImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleErodeImageFilter">
            <summary>
This class is a managed wrapper for itk::GrayscaleErodeImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IGrayscaleErodeImageFilter">
            <summary>
This class is a managed interface for itk::GrayscaleErodeImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkWhiteTopHatImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkWhiteTopHatImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkWhiteTopHatImageFilter">
            <summary>
This class is a managed wrapper for itk::WhiteTopHatImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IWhiteTopHatImageFilter">
            <summary>
This class is a managed interface for itk::WhiteTopHatImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByErosionImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::ReconstructionByErosionImageFilter .
</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is eroded by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkReconstructionByErosionImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByErosionImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByErosionImageFilter">
            <summary>
This class is a managed wrapper for itk::ReconstructionByErosionImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IReconstructionByErosionImageFilter">
            <summary>
This class is a managed interface for itk::ReconstructionByErosionImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS2ISS2.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS2ISS2.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS2ISS2.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS2ISS2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS2ISS2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS2ISS2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS2ISS2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS2ISS2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter_ISS2ISS2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter_ISS2ISS2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryErodeImageFilter_ISS2ISS2">
            <summary>
This class is a managed type instance for itk::BinaryErodeImageFilter .
</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter.BackgroundValue">
            <summary>Get/set the value considered as background.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter.ForegroundValue">
            <summary>Get/set the value considered as foreground.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkBinaryErodeImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkBinaryErodeImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkBinaryErodeImageFilter">
            <summary>
This class is a managed wrapper for itk::BinaryErodeImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IBinaryErodeImageFilter">
            <summary>
This class is a managed interface for itk::BinaryErodeImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC2IUC2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC2IUC2.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC2IUC2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC2IUC2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC2IUC2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC2IUC2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC2IUC2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter_IUC2IUC2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter_IUC2IUC2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMaximaImageFilter_IUC2IUC2">
            <summary>
This class is a managed type instance for itk::HMaximaImageFilter .
</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkHMaximaImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHMaximaImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHMaximaImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkHMaximaImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHMaximaImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHMaximaImageFilter">
            <summary>
This class is a managed wrapper for itk::HMaximaImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IHMaximaImageFilter">
            <summary>
This class is a managed interface for itk::HMaximaImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::GrayscaleMorphologicalClosingImageFilter .
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3">
            <summary>
This class is a managed type instance for itk::GrayscaleMorphologicalClosingImageFilter .
</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter.Kernel">
            <summary>Set the structuring element.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkGrayscaleMorphologicalClosingImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkGrayscaleMorphologicalClosingImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkGrayscaleMorphologicalClosingImageFilter">
            <summary>
This class is a managed wrapper for itk::GrayscaleMorphologicalClosingImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IGrayscaleMorphologicalClosingImageFilter">
            <summary>
This class is a managed interface for itk::GrayscaleMorphologicalClosingImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC3IUC3.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC3IUC3.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC3IUC3.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC3IUC3.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC3IUC3.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC3IUC3.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC3IUC3.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter_IUC3IUC3.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter_IUC3IUC3.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConvexImageFilter_IUC3IUC3">
            <summary>
This class is a managed type instance for itk::HConvexImageFilter .
</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter.Height">
            <summary>Get/set the height that a local maximum must be above the local background (local contrast) in order to survive the processing. Local maxima below this value are replaced with an estimate of the local background.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkHConvexImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkHConvexImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkHConvexImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkHConvexImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkHConvexImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkHConvexImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkHConvexImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkHConvexImageFilter">
            <summary>
This class is a managed wrapper for itk::HConvexImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IHConvexImageFilter">
            <summary>
This class is a managed interface for itk::HConvexImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="F:itk.ProgressAccumulator.m_CallbackCommand">
The callback command 
</member>
        <member name="F:itk.ProgressAccumulator.m_FilterRecord">
A list of progress proportions of the different filters in the 
pipeline 

</member>
        <member name="F:itk.ProgressAccumulator.m_BaseAccumulatedProgress">
The total accumulated progress for multiple runs of the mini-pipeline 
</member>
        <member name="F:itk.ProgressAccumulator.m_AccumulatedProgress">
The total accumulated progress 
</member>
        <member name="D:itk.ProgressAccumulator.FilterRecordVector">
An array of record structures 
</member>
        <member name="F:itk.ProgressAccumulator.m_MiniPipelineFilter">
The client mini-pipeline filter 
</member>
        <member name="M:itk.ProgressAccumulator.ReportProgress(itk.Object*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
A callback function that is called by the progressing filters 
</member>
        <member name="T:itk.ProgressAccumulator.FilterRecord">
Structure associated with each filter in the pipeline 
</member>
        <member name="D:itk.ProgressAccumulator.CommandType">
Command for observing progress of pipeline filters 
</member>
        <member name="M:itk.ProgressAccumulator.ResetProgress">
Reset the progress accumulator.  This method should be called in
the beginning of the GenerateData() method in the mini-pipeline
filter.

</member>
        <member name="M:itk.ProgressAccumulator.UnregisterAllFilters">
Unregister all filters that have been registered with this object

</member>
        <member name="M:itk.ProgressAccumulator.RegisterInternalFilter(itk.ProcessObject*,System.Single)">
Register a filter with the progress accumulator and specify the
fraction of the overall progress associated with this filter

</member>
        <member name="M:itk.ProgressAccumulator.GetMiniPipelineFilter">
Set the mini-pipeline filter 
</member>
        <member name="M:itk.ProgressAccumulator.SetMiniPipelineFilter(itk.ProcessObject*)">
Set the mini-pipeline filter 
</member>
        <member name="M:itk.ProgressAccumulator.GetAccumulatedProgress">
Get the total progress accumulated by this object 
</member>
        <member name="M:itk.ProgressAccumulator.GetNameOfClass">
Runtime information support. 
</member>
        <member name="M:itk.ProgressAccumulator.New">
Standard New method. 
</member>
        <member name="D:itk.ProgressAccumulator.GenericFilterType">
Typedef for inputting filters 
</member>
        <member name="D:itk.ProgressAccumulator.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.ProgressAccumulator">
 \class ProgressAccumulator
 \brief Facilitates progress reporting for filters that wrap around
        multiple other filters.

 This object allows a mini-pipeline filters to easily keep track of the 
 progress performed by the internal filters.  
 See DiscreteGaussianImageFilter.txx for an implementation example.

 \sa DiscreteGaussianImageFilter


</member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF2IF2.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.New">
            <summary>Create an instance of the underlying native itk object.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF2IF2.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF2IF2.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF2IF2.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF2IF2.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF2IF2.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter_IF2IF2.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter_IF2IF2.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByDilationImageFilter_IF2IF2">
            <summary>
This class is a managed type instance for itk::ReconstructionByDilationImageFilter .
</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.Instance_ProgressHandler(itk.itkProcessObject,itk.itkProgressEventArgs)">
            <summary>Handle the Progress event.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.Instance_ModifiedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Modified event.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.Instance_IterationHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Iteration event.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.Instance_AbortedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Aborted event.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.Instance_EndedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Ended event.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.Instance_StartedHandler(itk.itkObject,itk.itkEventArgs)">
            <summary>Handle the Started event.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.PassEventsFromTypeToWrapper">
            <summary>Pass managed events from the type instance to this wrapper instance.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.GetMaskImage(itk.itkImageBase)">
            <summary>Get the mask image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.SetMaskImage(System.IntPtr)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.SetMaskImage(itk.itkImageBase)">
            <summary>Set the mask image. The mask image is used to ;mask" the dilated marker image. The mask operation is a pixelwise minimum."</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.GetMarkerImage(itk.itkImageBase)">
            <summary>Get the marker image.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.SetMarkerImage(System.IntPtr)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.SetMarkerImage(itk.itkImageBase)">
            <summary>Set the marker image. The marker image must be pixelwise less than or equal to the mask image. The marker image is image that is dilated by this filter.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter.FullyConnected">
            <summary>Get/set whether the connected components are defined strictly by face connectivity or by face+edge+vertex connectivity. Default is FullyConnectedOff. For objects that are 1 pixel wide, use FullyConnectedOn.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.SetInput(System.IntPtr)">
            <summary>Set the first input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.SetInput(System.UInt32,System.IntPtr)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="itkDataObjectPtr">The input as an IntPtr.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.GetOutput(itk.itkDataObject)">
            <summary>Get the first output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.GetOutput(System.UInt32,itk.itkDataObject)">
            <summary>Get the specified output of the filter object.</summary>
            <param name="output">The itkDataObject to make as the output.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.SetInput(itk.itkDataObject)">
            <summary>Set the first input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.SetInput(System.UInt32,itk.itkDataObject)">
            <summary>Set the specified input of the filter object.</summary>
            <param name="input">The input as an itkDataObject.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.AbortGenerateData">
            <summary>
Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
</summary>
            <remarks>
Process objects may handle premature termination of execution in different ways.
Eg. many filters totally ignore this flag.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.UpdateLargestPossibleRegion">
            <summary>
Bring the largest possible region of this filter up-to-date.
</summary>
            <remarks>
Like Update(), but sets the output requested region to the
largest possible region for the output. This is the method users
should call if they want the entire dataset to be processed. If
a user wants to update the same output region as a previous call
to Update() or a previous call to UpdateLargestPossibleRegion(), 
then they should call the method Update().
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.Update">
            <summary>
Bring this filter up-to-date.
</summary>
            <remarks>
Update() checks modified times against last execution times, and
re-executes objects if necessary. A side effect of this method
ss that the whole pipeline may execute in order to bring this filter
up-to-date. This method updates the currently prescribed requested region.
If no requested region has been set on the output, then the requested
region will be set to the largest possible region. Once the requested
region is set, Update() will make sure the specified requested region 
is up-to-date. To have a filter always to produce its largest possible
region, users should call UpdateLargestPossibleRegion() instead.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.AddAnyEventObserver">
            <summary>
Adds a native observer watching for any event.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method adds a single native observer for any event. This
observer invokes the managed events. Therefore, calling this
method more than once, or calling it without first calling
RemoveAllObservers(), may cause the managed events to be
invoked more than once.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.RemoveAllObservers">
            <summary>
Remove all observers watching this object.
</summary>
            <remarks>
By default, observers are created for all events. Calling this
method removes all native observers, and therefore prevents
the firing of managed events. Call AddAnyEventObserver() to
reset the default observers which enable the managed events.
</remarks>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.ToString">
            <summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.New(System.String)">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.New(itk.INativePointer[])">
            <summary>Create a specific type instance using the given types.</summary>
            <param name="types">An array of types specifying which instance to create.</param>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter.NumberOfThreads">
            <summary>Get/set the number of threads to create when executing.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter.NumberOfOutputs">
            <summary>Return the length of the output array.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter.NumberOfValidRequiredInputs">
            <summary>
Get the number of valid inputs.  This is the number of non-null entries in the
input array in the first NumberOfRequiredInputs slots. This method is used
to determine whether the necessary required inputs have been set.
</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter.NumberOfInputs">
            <summary>
Get the size of the input array. This is merely the size of the input array,
not the number of inputs that have valid DataObject's assigned.
</summary>
            <remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter.MTime">
            <summary>Get the last modified time.</summary>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter.NativePointer">
            <summary>
Get/set the pointer to the native ITK object associated with
this wrapper instance.
</summary>
            <returns>The pointer to the native ITK object.</returns>
        </member>
        <member name="P:itk.itkReconstructionByDilationImageFilter.DisposeNativeObjectOnFinalize">
            <summary>
Gets/sets if the underlying native object should be disposed when the managed object is finalized.
The default is true.
</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.Finalize">
            <summary>Finalize the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.Dispose">
            <summary>Dispose of the managed object.</summary>
        </member>
        <member name="M:itk.itkReconstructionByDilationImageFilter.#ctor">
            <summary>Protected constructor.</summary>
        </member>
        <member name="T:itk.itkReconstructionByDilationImageFilter">
            <summary>
This class is a managed wrapper for itk::ReconstructionByDilationImageFilter.
</summary>
            <remarks>
The actual type instance can be specified by calling the New()
method with the desired input and output image types.
</remarks>
        </member>
        <member name="T:itk.IReconstructionByDilationImageFilter">
            <summary>
This class is a managed interface for itk::ReconstructionByDilationImageFilter.
</summary>
            <remarks>
Both the wrapper and type classes derive from this interface.
</remarks>
        </member>
        <member name="M:itk.itkProcessObjectCommand.Execute(itk.Object*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when the native ITK event is raised. 
</member>
        <member name="M:itk.itkProcessObjectCommand.SetManagedObject(msclr.gcroot&lt;itk.itkProcessObject&gt;)">
Method: Set the managed object for which the events should be 
    * passed along to. 

</member>
        <member name="T:itk.itkProcessObjectCommand">
            <summary>
A native itk::Command which raises managed events on the internal
managed itkProcessObject.
</summary>
        </member>
        <member name="M:itk.CStyleCommand.Execute(itk.Object!System.Runtime.CompilerServices.IsConst*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Execute the callback function with a const Object 
</member>
        <member name="M:itk.CStyleCommand.Execute(itk.Object*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Execute the callback function. 
</member>
        <member name="M:itk.CStyleCommand.SetClientDataDeleteCallback(=FUNC:System.Void(System.Void*))">
Set the callback to delete the client data. 
</member>
        <member name="M:itk.CStyleCommand.SetCallback(=FUNC:System.Void(itk.Object*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*))">
Set the C callback function pointer to be called at Execute time. 
</member>
        <member name="M:itk.CStyleCommand.SetClientData(System.Void*)">
Set the client data that will be passed into the C function when 
   * it is called. 
</member>
        <member name="M:itk.CStyleCommand.New">
Method for creation through the object factory. 
</member>
        <member name="M:itk.CStyleCommand.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="D:itk.CStyleCommand.Self">
Standard class typedefs. 
</member>
        <member name="D:itk.CStyleCommand.FunctionPointer">
Typedefs for C-style callbacks. 
</member>
        <member name="T:itk.CStyleCommand">
\class CStyleCommand
 *  \brief Command subclass that calls a pointer to a C function
 *
 *  CStyleCommand calls a pointer to a C function with the following
 *  arguments void func(Object *,void *clientdata)
 *  The clientdata is data that the command wants passed to itself
 *  each time.
 * 
 * \ingroup ITKSystemObjects

</member>
        <member name="M:itk.Command.Execute(itk.Object!System.Runtime.CompilerServices.IsConst*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Abstract method that defines the action to be taken by the command.
   * This variant is expected to be used when requests comes from a 
   * const Object 
</member>
        <member name="M:itk.Command.Execute(itk.Object*,itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Abstract method that defines the action to be taken by the command. 
</member>
        <member name="M:itk.Command.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="D:itk.Command.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.Command">
\class Command
 * \brief superclass for callback/observer methods
 *
 * Command is an implementation of the command design pattern that is used
 * in callbacks (such as StartMethod(), ProgressMethod(), and EndMethod()) in
 * ITK. itkObject implements a Subject/Observer pattern. When a subject 
 * needs to notify a observer, it does so using a itkCommand.  The Execute 
 * method is called to run the command.
 *
 * \ingroup ITKSystemObjects

</member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.VariableLengthVector&lt;System.Double&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.VariableLengthVector&lt;System.Single&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.VariableLengthVector&lt;System.Int16&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.VariableLengthVector&lt;System.UInt16&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.VariableLengthVector&lt;System.SByte&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.VariableLengthVector&lt;System.Byte&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Double,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Double,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Single,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Single,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Int16,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Int16,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.UInt16,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.UInt16,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.SByte,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.SByte,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Byte,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.CovariantVector&lt;System.Byte,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Double,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Double,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Single,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Single,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Int16,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Int16,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.UInt16,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.UInt16,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.SByte,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.SByte,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Byte,0x3&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.Vector&lt;System.Byte,0x2&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.RGBAPixel&lt;System.UInt16&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.RGBAPixel&lt;System.Byte&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.RGBPixel&lt;System.UInt16&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToNativePixel{itk.RGBPixel&lt;System.Byte&gt;}(itk.itkPixel)">
            <summary>Convert the given managed pixel to a native pixel.</summary>
            <param name="managedPixel">The managed pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.RGBAPixel&lt;System.UInt16&gt;}(itk.RGBAPixel&lt;System.UInt16&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.RGBAPixel&lt;System.Byte&gt;}(itk.RGBAPixel&lt;System.Byte&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.RGBPixel&lt;System.UInt16&gt;}(itk.RGBPixel&lt;System.UInt16&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.RGBPixel&lt;System.Byte&gt;}(itk.RGBPixel&lt;System.Byte&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.VariableLengthVector&lt;System.Double&gt;}(itk.VariableLengthVector&lt;System.Double&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.VariableLengthVector&lt;System.Single&gt;}(itk.VariableLengthVector&lt;System.Single&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.VariableLengthVector&lt;System.Int16&gt;}(itk.VariableLengthVector&lt;System.Int16&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.VariableLengthVector&lt;System.UInt16&gt;}(itk.VariableLengthVector&lt;System.UInt16&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.VariableLengthVector&lt;System.Byte&gt;}(itk.VariableLengthVector&lt;System.Byte&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Double,0x3&gt;}(itk.CovariantVector&lt;System.Double,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Double,0x2&gt;}(itk.CovariantVector&lt;System.Double,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Single,0x3&gt;}(itk.CovariantVector&lt;System.Single,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Single,0x2&gt;}(itk.CovariantVector&lt;System.Single,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Int16,0x3&gt;}(itk.CovariantVector&lt;System.Int16,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Int16,0x2&gt;}(itk.CovariantVector&lt;System.Int16,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.UInt16,0x3&gt;}(itk.CovariantVector&lt;System.UInt16,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.UInt16,0x2&gt;}(itk.CovariantVector&lt;System.UInt16,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.SByte,0x3&gt;}(itk.CovariantVector&lt;System.SByte,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.SByte,0x2&gt;}(itk.CovariantVector&lt;System.SByte,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Byte,0x3&gt;}(itk.CovariantVector&lt;System.Byte,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.CovariantVector&lt;System.Byte,0x2&gt;}(itk.CovariantVector&lt;System.Byte,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Double,0x3&gt;}(itk.Vector&lt;System.Double,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Double,0x2&gt;}(itk.Vector&lt;System.Double,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Single,0x3&gt;}(itk.Vector&lt;System.Single,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Single,0x2&gt;}(itk.Vector&lt;System.Single,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Int16,0x3&gt;}(itk.Vector&lt;System.Int16,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Int16,0x2&gt;}(itk.Vector&lt;System.Int16,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.UInt16,0x3&gt;}(itk.Vector&lt;System.UInt16,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.UInt16,0x2&gt;}(itk.Vector&lt;System.UInt16,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.SByte,0x3&gt;}(itk.Vector&lt;System.SByte,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.SByte,0x2&gt;}(itk.Vector&lt;System.SByte,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Byte,0x3&gt;}(itk.Vector&lt;System.Byte,0x3&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{itk.Vector&lt;System.Byte,0x2&gt;}(itk.Vector&lt;System.Byte,0x2&gt;)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.Boolean}(System.Boolean)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.Double}(System.Double)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.Single}(System.Single)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.Int32!System.Runtime.CompilerServices.IsLong}(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.UInt32!System.Runtime.CompilerServices.IsLong}(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.Int16}(System.Int16)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.UInt16}(System.UInt16)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.SByte}(System.SByte)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedPixel{System.Byte}(System.Byte)">
            <summary>Convert the given native pixel to a managed pixel.</summary>
            <param name="nativeValue">The native pixel to convert from.</param>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedQuaternion(vnl_quaternion&lt;System.Double&gt;)">
            <summary>Convert a native Quaternion to a managed Quaternion.</summary>
        </member>
        <member name="M:itk.ManagedTypes.ToNativeQuaternion(itk.itkQuaternion)">
            <summary>Convert a managed Quaternion to a native Quaternion.</summary>
        </member>
        <member name="M:itk.ManagedTypes.ToManagedVersor(itk.Versor&lt;System.Double&gt;)">
            <summary>Convert a native Versor to a managed Versor.</summary>
        </member>
        <member name="M:itk.ManagedTypes.ToNativeVersor(itk.itkVersor)">
            <summary>Convert a managed Versor to a native Versor.</summary>
        </member>
        <member name="M:itk.ManagedTypes.ToNativeString(System.String,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Convert a managed string to a native std::string.</summary>
        </member>
        <member name="M:itk.QuadEdge.IsHalfEdge">
Queries. 
</member>
        <member name="M:itk.QuadEdge.GetInvRot">
Inverse operators 
</member>
        <member name="M:itk.QuadEdge.GetDprev">
Returns the previous edge with same Right face and same Destination.
   *  The first edge encountered when moving clockwise from e around e-&gt;Dest.
   *  (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetRprev">
Returns the previous edge with same Right face. The first edge
   *  encountered when moving clockwise from e around e-&gt;Right.
   *  (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetLprev">
Returns previous edge with same Left face. The first edge
   *  encountered when moving clockwise from e around e-&gt;Left.  
   * (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetOprev">
Returns previous edge with same Origin
   *  (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetDnext">
Returns next edge with same right face and same Destination. The
   *  first edge encountered when moving counter-clockwise from e
   *  (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetRnext">
Returns next edge with same Right face. The first edge
   * encountered when moving counter-clockwise from e around e-&gt;Right.
   * (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetLnext">
Returns next edge with same Left face
   * (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.GetSym">
Returns the symetric edge
   * (see "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.Splice(itk.QuadEdge*)">
 \brief Basic quad-edge topological method.

 This method describes all possible topological operations on an edge.

 It is its own inverse. It works in two ways:

   1. If this-&gt;GetOrg() != b-&gt;GetOrg(), it slice a face in two.
   2. If this-&gt;GetOrg() == b-&gt;GetOrg(), it unifies two faces.

 \warning This class only handles of the connectivity and is not aware
    of the geometry that lies at the \ref GeometricalQuadEdge level.
    It is strongly discouraged to use this method. Instead you should
    use itk::QuadEdgeMesh::Splice it's geometry aware version.


</member>
        <member name="M:itk.QuadEdge.GetOnext">
Sub-algebra Get methods. 
   *  Returns edge with same Origin (see 
   *  "Accessing adjacent edges"). 
</member>
        <member name="M:itk.QuadEdge.SetOnext(itk.QuadEdge*)">
Sub-algebra Set methods. 
</member>
        <member name="M:itk.QuadEdge.#ctor">
Object creation methods. 
</member>
        <member name="M:itk.QuadEdge.BeginOnext">
Basic iterators methods. 
</member>
        <member name="D:itk.QuadEdge.Iterator">
Iterator types. 
</member>
        <member name="T:itk.QuadEdge">
\class QuadEdge
 * \brief Base class for the implementation of a quad-edge data structure as
 * proposed in "Guibas and Stolfi 1985"
 *
 * \author Alexandre Gouaillard, Leonardo Florez-Valencia, Eric Boix
 *
 * This implementation was contributed as a paper to the Insight Journal
 * http://insight-journal.org/midas/handle.php?handle=1926/306
 *
 * \sa "Accessing adjacent edges."
 *
 * \ingroup MeshObjects

</member>
        <member name="M:itk.ProgressReporter.CompletedPixel">
Called by a filter once per pixel.  
</member>
        <member name="M:itk.ProgressReporter.Dispose">
Destructor sets progress to 1 because the filter has finished.  
</member>
        <member name="M:itk.ProgressReporter.#ctor(itk.ProcessObject*,System.Int32,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
Constructor sets progress to 0 because the filter is starting.  
</member>
        <member name="T:itk.ProgressReporter">
\class ProgressReporter
 * \brief Implements progress tracking for a filter.
 *
 * This is a utility class for use by filter implementations in
 * GenerateData() and ThreadedGenerateData().
 *
 * The class constructor sets the progress to 0, and the destructor
 * sets it to 1.  In between, there should be one call to
 * CompletedPixel() per pixel.  The reporter will automatically update
 * the filter's progress at an interval resulting in the specified
 * number of updates.  The default number of updates is 100.
 *
 * Example usage:
 *
 * \code
 *   ProgressReporter progress(this, threadId,
 *                             threadRegion.GetNumberOfPixels(), 100);
 *   for( each pixel )
 *     {
 *     ...
 *     progress.CompletedPixel();
 *     }
 * \endcode
 *
 * When used in a non-threaded filter, the threadId argument should be 0.
 *
 * \sa
 * This class is a tool for filter implementers to equip a filter to
 * report on its progress.  For information on how to acquire this
 * progress information, see:
 *  - ProcessObject::ReportProgress()
 *  - Object::AddObserver()

</member>
        <member name="T:itk.ImageToImageFilterDetail.DispatchBase">
\struct  DispatchBase
 * \brief Base class for a class used to dispatch to dimension specific implementations.
 *
 * DispatchBase is base class used as the default case when implementations
 * are dispatched to overloaded routines based on dimension.
 *
 * \sa Dispatch

</member>
        <member name="T:itk.DataObject">
Friends of ProcessObject 
</member>
        <member name="F:itk.ProcessObject.m_ReleaseDataBeforeUpdateFlag">
Memory management ivars 
</member>
        <member name="F:itk.ProcessObject.m_Threader">
Support processing data in multiple threads. Used by subclasses
   * (e.g., ImageSource). 
</member>
        <member name="F:itk.ProcessObject.m_AbortGenerateData">
These support the progress method and aborting filter execution. 
</member>
        <member name="F:itk.ProcessObject.m_Outputs">
An array of the outputs to the filter. 
</member>
        <member name="F:itk.ProcessObject.m_CachedInputReleaseDataFlags">
An array that caches the ReleaseDataFlags of the inputs 
</member>
        <member name="F:itk.ProcessObject.m_Inputs">
An array of the inputs to the filter. 
</member>
        <member name="F:itk.ProcessObject.m_OutputInformationMTime">
Time when GenerateOutputInformation was last called. 
</member>
        <member name="F:itk.ProcessObject.m_Updating">
These ivars are made protected so filters like itkStreamingImageFilter
   * can access them directly. 
This flag indicates when the pipeline is executing.
   * It prevents infinite recursion when pipelines have loops. 
</member>
        <member name="M:itk.ProcessObject.RestoreInputReleaseDataFlags">
Restore the cached input ReleaseDataFlags.

</member>
        <member name="M:itk.ProcessObject.CacheInputReleaseDataFlags">
Cache the state of any ReleaseDataFlag's on the inputs. While the
filter is executing, we need to set the ReleaseDataFlag's on the
inputs to false in case the current filter is implemented using a
mini-pipeline (which will try to release the inputs).  After the
filter finishes, we restore the state of the ReleaseDataFlag's
before the call to ReleaseInputs().

</member>
        <member name="M:itk.ProcessObject.ReleaseInputs">
A filter may need to release its input's bulk data after it has
   * finished calculating a new output. The filter may need to release
   * the inputs because the user has turned on the ReleaseDataFlag or
   * it may need to release the inputs because the filter is an "in
   * place" filter and it has overwritten its input with its output
   * data.  The implementation here simply checks the ReleaseDataFlag
   * of the inputs.  InPlaceImageFilter overrides this method so
   * release the input it has overwritten.
   *
   * \sa InPlaceImageFilter::ReleaseInputs()

</member>
        <member name="M:itk.ProcessObject.PropagateResetPipeline">
Called to allocate the input array.  Copies old inputs. 
Propagate a call to ResetPipeline() up the pipeline. Called only from
   * DataObject. 
</member>
        <member name="M:itk.ProcessObject.GenerateData">
This method causes the filter to generate its output. 
</member>
        <member name="M:itk.ProcessObject.GenerateOutputInformation">
Generate the information decribing the output data. The default 
   * implementation of this method will copy information from the input to
   * the output.  A filter may override this method if its output will have
   * different information than its input.  For instance, a filter that 
   * shrinks an image will need to provide an implementation for this 
   * method that changes the spacing of the pixels. Such filters should call
   * their superclass' implementation of this method prior to changing the
   * information values they need (i.e. GenerateOutputInformation() should
   * call Superclass::GenerateOutputInformation() prior to changing the
   * information. 
</member>
        <member name="M:itk.ProcessObject.GenerateOutputRequestedRegion(itk.DataObject*)">
Given one output whose requested region has been set, how should
   * the requested regions for the remaining outputs of the process object
   * be set?  By default, all the outputs are set to the same requested
   * region.  If a filter needs to produce different requested regions
   * for each output, for instance an image processing filter producing
   * several outputs at different resolutions, then that filter may
   * override this method and set the requested regions appropriatedly.
   *
   * Note that a filter producing multiple outputs of different types is
   * required to override this method.  The default implementation
   * can only correctly handle multiple outputs of the same type. 
</member>
        <member name="M:itk.ProcessObject.GenerateInputRequestedRegion">
What is the input requested region that is required to produce the
   * output requested region? By default, the largest possible region is
   * always required but this is overridden in many subclasses. For instance,
   * for an image processing filter where an output pixel is a simple function
   * of an input pixel, the input requested region will be set to the output
   * requested region.  For an image processing filter where an output pixel
   * is a function of the pixels in a neighborhood of an input pixel, then
   * the input requested region will need to be larger than the output
   * requested region (to avoid introducing artificial boundary conditions).
   * This function should never request an input region that is outside the
   * the input largest possible region (i.e. implementations of this method
   * should crop the input requested region at the boundaries of the input
   * largest possible region). 
</member>
        <member name="M:itk.ProcessObject.GetOutput(System.UInt32)">
Method used internally for getting an output. 
</member>
        <member name="M:itk.ProcessObject.SetNumberOfOutputs(System.UInt32)">
Called to allocate the output array.  Copies old outputs. 
</member>
        <member name="M:itk.ProcessObject.SetNthOutput(System.UInt32,itk.DataObject*)">
Protected methods for setting outputs.
   * Subclasses make use of them for getting output. 
</member>
        <member name="M:itk.ProcessObject.GetInput(System.UInt32)">
Method used internally for getting an input. 
</member>
        <member name="M:itk.ProcessObject.SetNumberOfInputs(System.UInt32)">
Called to allocate the input array. Copies old inputs. 
</member>
        <member name="M:itk.ProcessObject.PushBackInput(itk.DataObject!System.Runtime.CompilerServices.IsConst*)">
Push/Pop an input of this process object. These methods allow a
   * filter to model its input vector as a queue or stack.  These
   * routines may not be appropriate for all filters, especially
   * filters with different types of inputs.  These routines follow
   * the semantics of STL. 
</member>
        <member name="M:itk.ProcessObject.SetNthInput(System.UInt32,itk.DataObject*)">
Protected methods for setting inputs.
   * Subclasses make use of them for setting input. 
</member>
        <member name="M:itk.ProcessObject.PrepareOutputs">
An opportunity to deallocate a ProcessObject's bulk data
   *  storage. Some filters may wish to reuse existing bulk data
   *  storage to avoid unnecessary deallocation/allocation
   *  sequences. The default implementation calls Initialize() on each
   *  output. DataObject::Initialize() frees its bulk data by default.

</member>
        <member name="M:itk.ProcessObject.GetMultiThreader">
Return the multithreader used by this class. 
</member>
        <member name="M:itk.ProcessObject.SetNumberOfThreads(System.Int32)">
Get/Set the number of threads to create when executing. 
</member>
        <member name="M:itk.ProcessObject.SetReleaseDataBeforeUpdateFlag(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Turn on/off the flags to control whether the bulk data belonging
   * to the outputs of this ProcessObject are released/reallocated
   * during an Update().  In limited memory scenarios, a user may want
   * to force the elements of a pipeline to release any bulk data that
   * is going to be regenerated anyway during an Update() in order to
   * control peak memory allocation. Note that this flag is different
   * from the ReleaseDataFlag. ReleaseDataFlag manages the
   * deallocation of a ProcessObject's bulk output data once that data
   * has been consumed by a downstream ProcessObject.  The
   * ReleaseDataBeforeUpdateFlag manages the deallocation/reallocation
   * of bulk data during a pipeline update to control peak memory
   * utilization. Default value is on. 
</member>
        <member name="M:itk.ProcessObject.SetReleaseDataFlag(System.Boolean)">
Turn on/off the flags to control whether the bulk data belonging
   * to the outputs of this ProcessObject are released after being
   * used by a downstream ProcessObject. Default value is off. Another
   * options for controlling memory utilization is the
   * ReleaseDataBeforeUpdateFlag. 
</member>
        <member name="M:itk.ProcessObject.MakeOutput(System.UInt32)">
Make a DataObject of the correct type to used as the specified
   * output.  Every ProcessObject subclass must be able to create a
   * DataObject that can be used as a specified output. This method
   * is automatically called when DataObject::DisconnectPipeline() is
   * called.  DataObject::DisconnectPipeline, disconnects a data object
   * from being an output of its current source.  When the data object
   * is disconnected, the ProcessObject needs to construct a replacement
   * output data object so that the ProcessObject is in a valid state.
   * So DataObject::DisconnectPipeline eventually calls
   * ProcessObject::MakeOutput. Note that MakeOutput always returns a
   * itkSmartPointer to a DataObject. ImageSource and MeshSource override
   * this method to create the correct type of image and mesh respectively.
   * If a filter has multiple outputs of different types, then that
   * filter must provide an implementation of MakeOutput(). 
</member>
        <member name="M:itk.ProcessObject.ResetPipeline">
Reset the pipeline. If an exception is thrown during an Update(),
   * the pipeline may be in an inconsistent state.  This method clears
   * the internal state of the pipeline so Update() can be called. 
</member>
        <member name="M:itk.ProcessObject.EnlargeOutputRequestedRegion(itk.DataObject*)">
Give the process object a chance to indictate that it will produce more
   * output than it was requested to produce. For example, many imaging
   * filters must compute the entire output at once or can only produce output
   * in complete slices. Such filters cannot handle smaller requested regions.
   * These filters must provide an implementation of this method, setting
   * the output requested region to the size they will produce.  By default,
   * a process object does not modify the size of the output requested region. 
</member>
        <member name="M:itk.ProcessObject.UpdateOutputData(itk.DataObject*)">
Actually generate new output  
</member>
        <member name="M:itk.ProcessObject.PropagateRequestedRegion(itk.DataObject*)">
Send the requested region information back up the pipeline (to the
   * filters that preceed this one). 
</member>
        <member name="M:itk.ProcessObject.UpdateOutputInformation">
Update the information decribing the output data. This method
   * transverses up the pipeline gathering modified time information.
   * On the way back down the pipeline, this method calls
   * GenerateOutputInformation() to set any necessary information
   * about the output data objects.  For instance, a filter that
   * shrinks an image will need to provide an implementation for
   * GenerateOutputInformation() that changes the spacing of the
   * pixels. Such filters should call their superclass' implementation
   * of GenerateOutputInformation prior to changing the information
   * values they need (i.e. GenerateOutputInformation() should call
   * Superclass::GenerateOutputInformation() prior to changing the
   * information. 
</member>
        <member name="M:itk.ProcessObject.UpdateLargestPossibleRegion">
Like Update(), but sets the output requested region to the
   * largest possible region for the output.  This is the method users
   * should call if they want the entire dataset to be processed.  If
   * a user wants to update the same output region as a previous call
   * to Update() or a previous call to UpdateLargestPossibleRegion(), 
   * then they should call the method Update(). 
</member>
        <member name="M:itk.ProcessObject.Update">
Bring this filter up-to-date. Update() checks modified times against
   * last execution times, and re-executes objects if necessary. A side
   * effect of this method is that the whole pipeline may execute
   * in order to bring this filter up-to-date. This method updates the
   * currently prescribed requested region.  If no requested region has
   * been set on the output, then the requested region will be set to the
   * largest possible region. Once the requested region is set, Update()
   * will make sure the specified requested region is up-to-date. This
   * is a confusing side effect to users who are just calling Update() on
   * a filter.  A first call to Update() will cause the largest possible
   * region to be updated.  A second call to Update() will update that
   * same region.  If a modification to the upstream pipeline cause a
   * filter to have a different largest possible region, this second
   * call to Update() will not cause the output requested region to be
   * reset to the new largest possible region.  Instead, the output requested
   * region will be the same as the last time Update() was called. To have
   * a filter always to produce its largest possible region, users should
   * call UpdateLargestPossibleRegion() instead. 
</member>
        <member name="M:itk.ProcessObject.UpdateProgress(System.Single)">
Update the progress of the process object.
   *
   * Sets the Progress ivar to amount and invokes any observers for
   * the ProgressEvent. The parameter amount should be in [0,1] and is
   * the cumulative (not incremental) progress. 
</member>
        <member name="M:itk.ProcessObject.GetProgress">
Get the execution progress of a process object. The progress is
   * a floating number in [0,1] with 0 meaning no progress and 1 meaning
   * the filter has completed execution. 
</member>
        <member name="M:itk.ProcessObject.SetProgress(System.Single)">
Set the execution progress of a process object. The progress is
   * a floating number in [0,1] with 0 meaning no progress and 1 meaning
   * the filter has completed execution.  The ProgressEvent is NOT
   * invoked. 
</member>
        <member name="M:itk.ProcessObject.AbortGenerateDataOn">
Turn on and off the AbortGenerateData flag. 
</member>
        <member name="M:itk.ProcessObject.GetAbortGenerateData">
Get the AbortGenerateData flag for the process object. Process objects
   *  may handle premature termination of execution in different ways.  
</member>
        <member name="M:itk.ProcessObject.SetAbortGenerateData(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Set the AbortGenerateData flag for the process object. Process objects
   *  may handle premature termination of execution in different ways.  
</member>
        <member name="M:itk.ProcessObject.GetOutputs">
Return an array with all the outputs of this process object.
   * This is useful for tracing forward in the pipeline to contruct
   * graphs etc.  
</member>
        <member name="M:itk.ProcessObject.GetNumberOfValidRequiredInputs">
Get the number of valid inputs.  This is the number of non-null
   * entries in the input vector in the first NumberOfRequiredInputs
   * slots. This method is used to determine whether the necessary
   * required inputs have been set. Subclasses of ProcessObject may
   * override this implementation if the required inputs are not
   * the first slots in input vector.

</member>
        <member name="M:itk.ProcessObject.GetNumberOfInputs">
Get the size of the input vector.  This is merely the size of
   * the input vector, not the number of inputs that have valid
   * DataObject's assigned. Use GetNumberOfValidRequiredInputs() to
   * determine how many inputs are non-null. 
</member>
        <member name="D:itk.ProcessObject.DataObjectPointerArraySizeType">
Size type of an std::vector 
</member>
        <member name="M:itk.ProcessObject.GetInputs">
Return an array with all the inputs of this process object.
   * This is useful for tracing back in the pipeline to construct
   * graphs etc.  
</member>
        <member name="D:itk.ProcessObject.DataObjectPointerArray">
STL Array of SmartPointers to DataObjects 
</member>
        <member name="D:itk.ProcessObject.DataObjectPointer">
Smart Pointer type to a DataObject. 
</member>
        <member name="M:itk.ProcessObject.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="D:itk.ProcessObject.Self">
Standard class typedefs. 
</member>
        <member name="M:itk.MultiThreader.WaitForSingleMethodThread(System.Void*)">
Wait for a thread running the prescribed SingleMethod. A similar
   * abstraction needs to be added for MultipleMethod (SpawnThread
   * already has a routine to do this. 
</member>
        <member name="M:itk.MultiThreader.DispatchSingleMethodThread(itk.MultiThreader.ThreadInfoStruct*)">
Spawn a thread for the prescribed SingleMethod.  This routine
   * spawns a thread to the SingleMethodProxy which runs the
   * prescribed SingleMethod.  The SingleMethodProxy allows for
   * exceptions within a thread to be naively handled. A similar
   * abstraction needs to be added for MultipleMethod and
   * SpawnThread. 
</member>
        <member name="M:itk.MultiThreader.SingleMethodProxy(System.Void*)">
Static function used as a "proxy callback" by the MultiThreader.  The
   * threading library will call this routine for each thread, which
   * will delegate the control to the prescribed SingleMethod. This
   * routine acts as an intermediary between the MultiThreader and the
   * user supplied callback (SingleMethod) in order to catch any
   * exceptions thrown by the threads. 
</member>
        <member name="F:itk.MultiThreader.m_NumberOfThreads">
The number of threads to use. 
   *  The m_NumberOfThreads must always be less than or equal to
   *  the m_GlobalMaximumNumberOfThreads before it is used during the execution
   *  of a threaded method. Its value is clamped in the SingleMethodExecute()
   *  and MultipleMethodExecute(). Its value is initialized to
   *  m_GlobalDefaultNumberOfThreads at construction time. Its value is clamped
   *  to the current m_GlobalMaximumNumberOfThreads in the
   *  SingleMethodExecute() and MultipleMethodExecute() methods. 

</member>
        <member name="F:itk.MultiThreader.m_GlobalMaximumNumberOfThreads">
Global variable defining the maximum number of threads that can be used.
   *  The m_GlobalMaximumNumberOfThreads must always be less than or equal to
   *  ITK_MAX_THREADS and greater than zero. 
</member>
        <member name="F:itk.MultiThreader.m_SingleData">
Internal storage of the data. 
</member>
        <member name="F:itk.MultiThreader.m_SpawnedThreadActiveFlag">
Storage of MutexFunctions and ints used to control spawned 
   *  threads and the spawned thread ids. 
</member>
        <member name="F:itk.MultiThreader.m_SingleMethod">
The methods to invoke. 
</member>
        <member name="F:itk.MultiThreader.m_ThreadInfoArray">
An array of thread info containing a thread id
   *  (0, 1, 2, .. ITK_MAX_THREADS-1), the thread count, and a pointer
   *  to void so that user data can be passed to each thread. 
</member>
        <member name="T:itk.MultiThreader.ThreadInfoStruct">
This is the structure that is passed to the thread that is
   * created from the SingleMethodExecute, MultipleMethodExecute or
   * the SpawnThread method. It is passed in as a void *, and it is up
   * to the method to cast correctly and extract the information.  The
   * ThreadID is a number between 0 and NumberOfThreads-1 that
   * indicates the id of this thread. The NumberOfThreads is
   * this-&gt;NumberOfThreads for threads created from
   * SingleMethodExecute or MultipleMethodExecute, and it is 1 for
   * threads created from SpawnThread.  The UserData is the (void
   * *)arg passed into the SetSingleMethod, SetMultipleMethod, or
   * SpawnThread method. 
</member>
        <member name="M:itk.MultiThreader.TerminateThread(System.Int32)">
Terminate the thread that was created with a SpawnThreadExecute() 
</member>
        <member name="M:itk.MultiThreader.SpawnThread(=FUNC:System.UInt32!System.Runtime.CompilerServices.IsLong(System.Void*),System.Void*)">
Create a new thread for the given function. Return a thread id
     * which is a number between 0 and ITK_MAX_THREADS - 1. This
   * id should be used to kill the thread at a later time. 
</member>
        <member name="M:itk.MultiThreader.SetMultipleMethod(System.Int32,=FUNC:System.UInt32!System.Runtime.CompilerServices.IsLong(System.Void*),System.Void*)">
Set the MultipleMethod at the given index to f() and the UserData 
   * field of the ThreadInfoStruct that is passed to it will be data. 
</member>
        <member name="M:itk.MultiThreader.SetSingleMethod(=FUNC:System.UInt32!System.Runtime.CompilerServices.IsLong(System.Void*),System.Void*)">
Set the SingleMethod to f() and the UserData field of the
   * ThreadInfoStruct that is passed to it will be data.
   * This method (and all the methods passed to SetMultipleMethod)
   * must be of type itkThreadFunctionType and must take a single argument of
   * type void *. 
</member>
        <member name="M:itk.MultiThreader.MultipleMethodExecute">
Execute the MultipleMethods (as define by calling SetMultipleMethod for
   * each of the required m_NumberOfThreads methods) using m_NumberOfThreads
   * threads. As a side effect the m_NumberOfThreads will be checked against the
   * current m_GlobalMaximumNumberOfThreads and clamped if necessary. 
</member>
        <member name="M:itk.MultiThreader.SingleMethodExecute">
Execute the SingleMethod (as define by SetSingleMethod) using
   * m_NumberOfThreads threads. As a side effect the m_NumberOfThreads will be
   * checked against the current m_GlobalMaximumNumberOfThreads and clamped if
   * necessary. 
</member>
        <member name="M:itk.MultiThreader.SetGlobalDefaultNumberOfThreads(System.Int32)">
Set/Get the value which is used to initialize the NumberOfThreads in the
   * constructor.  It will be clamped to the range [1, m_GlobalMaximumNumberOfThreads ].
   * Therefore the caller of this method should check that the requested number
   * of threads was accepted. 
</member>
        <member name="M:itk.MultiThreader.SetGlobalMaximumNumberOfThreads(System.Int32)">
Set/Get the maximum number of threads to use when multithreading.  It
   * will be clamped to the range [ 1, ITK_MAX_THREADS ] because several arrays
   * are already statically allocated using the ITK_MAX_THREADS number.
   * Therefore the caller of this method should check that the requested number
   * of threads was accepted. 
</member>
        <member name="M:itk.MultiThreader.SetNumberOfThreads(System.Int32)">
Get/Set the number of threads to create. It will be clamped to the range
   * [ 1, m_GlobalMaximumNumberOfThreads ], so the caller of this method should
   * check that the requested number of threads was accepted. 
</member>
        <member name="M:itk.MultiThreader.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="M:itk.MultiThreader.New">
Method for creation through the object factory. 
</member>
        <member name="D:itk.MultiThreader.Self">
Standard class typedefs. 
</member>
        <member name="D:itk.ThreadFunctionType">
\class MultiThreader
 * \brief A class for performing multithreaded execution
 *
 * Multithreader is a class that provides support for multithreaded
 * execution using sproc() on an SGI, or pthread_create on any platform
 * supporting POSIX threads.  This class can be used to execute a single
 * method on multiple threads, or to specify a method per thread.
 *
 * \ingroup OSSystemObejcts
 *
 * \par Note
 * If ITK_USE_SPROC is defined, then sproc() will be used to create
 * multiple threads on an SGI. If ITK_USE_PTHREADS is defined, then
 * pthread_create() will be used to create multiple threads (on
 * a sun, for example).

\par Note
 * If ITK_USE_PTHREADS is defined, then the multithreaded
 * function is of type void *, and returns NULL
 * Otherwise the type is void which is correct for WIN32
 * and SPROC. 
</member>
        <member name="M:itk.MutexLock.Unlock">
Unlock the MutexLock. 
</member>
        <member name="M:itk.MutexLock.Lock">
Lock the itkMutexLock. 
</member>
        <member name="M:itk.MutexLock.GetNameOfClass">
Run-time information. 
</member>
        <member name="M:itk.MutexLock.New">
Method for creation. 
</member>
        <member name="D:itk.MutexLock.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.MutexLock">
\class MutexLock 
 * \brief Mutual exclusion locking class.
 *
 * MutexLock allows the locking of variables which are accessed 
 * through different threads.  This header file also defines 
 * SimpleMutexLock which is not a subclass of itkObject.
 * 
 * \ingroup OSSystemObjects

</member>
        <member name="M:itk.SimpleMutexLock.GetMutexLock">
Access the MutexType member variable from outside this class 
</member>
        <member name="M:itk.SimpleMutexLock.Unlock">
Unlock the MutexLock. 
</member>
        <member name="M:itk.SimpleMutexLock.Lock">
Lock the MutexLock. 
</member>
        <member name="M:itk.SimpleMutexLock.GetNameOfClass">
Used for debugging and other run-time purposes. 
</member>
        <member name="M:itk.SimpleMutexLock.New">
Methods for creation and destruction through the object factory. 
</member>
        <member name="M:itk.SimpleMutexLock.#ctor">
Constructor and destructor left public purposely. 
</member>
        <member name="D:itk.SimpleMutexLock.Self">
Standard class typedefs.  
</member>
        <member name="T:itk.SimpleMutexLock">
\class SimpleMutexLock 
 * \brief Simple mutual exclusion locking class.
 
 * SimpleMutexLock allows the locking of variables which are accessed 
 * through different threads.  This header file also defines 
 * SimpleMutexLock which is not a subclass of Object.
 * 
 * \ingroup OSSystemObjects

</member>
        <member name="M:itk.FastMutexLock.Unlock">
Unlock the FastMutexLock. 
</member>
        <member name="M:itk.FastMutexLock.Lock">
Lock the itkFastMutexLock. 
</member>
        <member name="M:itk.FastMutexLock.GetNameOfClass">
Run-time type information. 
</member>
        <member name="M:itk.FastMutexLock.New">
Method for creation. 
</member>
        <member name="D:itk.FastMutexLock.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.FastMutexLock">
\class FastMutexLock
 * \brief Critical section locking class.
 * 
 * FastMutexLock allows the locking of variables which are accessed 
 * through different threads.  This header file also defines 
 * SimpleFastMutexLock which is not a subclass of Object.
 * The API is identical to that of MutexLock, and the behavior is
 * identical as well, except on Windows 9x/NT platforms. The only difference
 * on these platforms is that MutexLock is more flexible, in that
 * it works across processes as well as across threads, but also costs
 * more, in that it evokes a 600-cycle x86 ring transition. The 
 * FastMutexLock provides a higher-performance equivalent (on 
 * Windows) but won't work across processes. Since it is unclear how,
 * in itk, an object at the itk level can be shared across processes
 * in the first place, one should use FastMutexLock unless one has
 * a very good reason to use MutexLock. If higher-performance equivalents
 * for non-Windows platforms (Irix, SunOS, etc) are discovered, they
 * should replace the implementations in this class
 *
 * \ingroup OSSystemObjects

</member>
        <member name="F:itk.ObjectFactoryBase.m_LibraryHandle">
Member variables for a factory set by the base class
   * at load or register time 
</member>
        <member name="F:itk.ObjectFactoryBase.m_RegisteredFactories">
list of registered factories 
</member>
        <member name="M:itk.ObjectFactoryBase.LoadLibrariesInPath(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Load all dynamic libraries in the given path 
</member>
        <member name="M:itk.ObjectFactoryBase.LoadDynamicFactories">
Load dynamic factories from the ITK_AUTOLOAD_PATH 
</member>
        <member name="M:itk.ObjectFactoryBase.RegisterDefaults">
Register default factories which are not loaded at run time. 
</member>
        <member name="M:itk.ObjectFactoryBase.Initialize">
Initialize the static members of ObjectFactoryBase.   RegisterDefaults
   * is called here. 
</member>
        <member name="M:itk.ObjectFactoryBase.CreateAllObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
This method creates all the objects with the class overide of
   * itkclass name, which are provide by this object 

</member>
        <member name="M:itk.ObjectFactoryBase.CreateObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
This method is provided by sub-classes of ObjectFactoryBase.
   * It should create the named itk object or return 0 if that object
   * is not supported by the factory implementation. 
</member>
        <member name="M:itk.ObjectFactoryBase.RegisterOverride(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,itk.CreateObjectFunctionBase*)">
Register object creation information with the factory. 
</member>
        <member name="T:itk.ObjectFactoryBase.OverrideInformation">
\class OverrideInformation
   * \brief Internal implementation class for ObjectFactorBase. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetLibraryPath">
This returns the path to a dynamically loaded factory. 
</member>
        <member name="M:itk.ObjectFactoryBase.Disable(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Set all enable flags for the given class to 0.  This will
   * mean that the factory will stop producing class with the given
   * name. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetEnableFlag(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Get the Enable flag for the specific override of className. 
</member>
        <member name="M:itk.ObjectFactoryBase.SetEnableFlag(System.Boolean,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Set the Enable flag for the specific override of className. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetEnableFlags">
Return a list of enable flags. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetClassOverrideDescriptions">
Return a list of descriptions for class overrides. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetClassOverrideWithNames">
Return a list of the names of classes that override classes. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetClassOverrideNames">
Return a list of classes that this factory overrides. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetDescription">
Return a descriptive string describing the factory. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetITKSourceVersion">
All sub-classes of ObjectFactoryBase should must return the version of 
   * ITK they were built with.  This should be implemented with the macro
   * ITK_SOURCE_VERSION and NOT a call to Version::GetITKSourceVersion.
   * As the version needs to be compiled into the file as a string constant.
   * This is critical to determine possible incompatible dynamic factory loads. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetRegisteredFactories">
Return the list of all registered factories.  This is NOT a copy,
   * do not remove items from this list! 
</member>
        <member name="M:itk.ObjectFactoryBase.UnRegisterAllFactories">
Unregister all factories. 
</member>
        <member name="M:itk.ObjectFactoryBase.UnRegisterFactory(itk.ObjectFactoryBase*)">
Remove a factory from the list of registered factories. 
</member>
        <member name="M:itk.ObjectFactoryBase.RegisterFactory(itk.ObjectFactoryBase*)">
Register a factory so it can be used to create itk objects. 
</member>
        <member name="M:itk.ObjectFactoryBase.ReHash">
Re-check the ITK_AUTOLOAD_PATH for new factory libraries.
   * This calls UnRegisterAll before re-loading. 
</member>
        <member name="M:itk.ObjectFactoryBase.CreateAllInstance(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Create and return all possible instances of the named itk object.
   * Each loaded ObjectFactoryBase will be asked in the order
   * the factory was in the ITK_AUTOLOAD_PATH.  All created objects
   * will be returned in the list. 
</member>
        <member name="M:itk.ObjectFactoryBase.CreateInstance(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Create and return an instance of the named itk object.
   * Each loaded ObjectFactoryBase will be asked in the order
   * the factory was in the ITK_AUTOLOAD_PATH.  After the
   * first factory returns the object no other factories are asked. 
</member>
        <member name="M:itk.ObjectFactoryBase.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="D:itk.ObjectFactoryBase.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.OverRideMap">
\class ObjectFactoryBase
 * \brief Create instances of classes using an object factory.
 *
 * ObjectFactoryBase is used to create itk objects. The base class
 * ObjectFactoryBase contains a static method CreateInstance() that is
 * used to create itk objects from the list of registerd ObjectFactoryBase
 * sub-classes.  The first time CreateInstance() is called, all dll's or
 * shared libraries in the environment variable ITK_AUTOLOAD_PATH are loaded
 * into the current process.  The C function itkLoad is called on each dll.
 * itkLoad should return an instance of the factory sub-class implemented in
 * the shared library. ITK_AUTOLOAD_PATH is an environment variable
 * containing a colon separated (semi-colon on win32) list of paths.
 *
 * This can be use to overide the creation of any object in ITK. 
 *
 * \ingroup ITKSystemObjects

</member>
        <member name="M:itk.CreateObjectFunctionBase.CreateObject">
Create an object and return a pointer to it as an
   * itk::LightObject. 
</member>
        <member name="D:itk.CreateObjectFunctionBase.Self">
Standard typedefs. 
</member>
        <member name="T:itk.CreateObjectFunctionBase">
\class CreateObjectFunctionBase
 * \brief Define API for object creation callback functions.
 *
 * \ingroup ITKSystemObjects

</member>
        <member name="D:itk.int_fast8_t">
Types which are at least a certain size but may be greater if
 *  performace benifits, these are prefered over fixed width. 
</member>
        <member name="D:itk.int_least8_t">
Types which are at least a certain size, these are prefered over
 *  fixed width. 
</member>
        <member name="D:itk.int8_t">
Fixed width interger types. 
</member>
        <member name="D:ITK_UINTPTR">
\deprecated This type have been deprecated due to erroneous
   *  value, please use itk::uintptr_t instead. 
</member>
        <member name="D:ITK_INTPTR">
\deprecated This type have been deprecated due to erroneous
   *  value, please use itk::intptr_t instead. 
</member>
        <member name="D:ITK_UINT32">
\deprecated This type have been deprecated due to erroneous
   * value, please use itk::uint32_t instead. 
</member>
        <member name="D:ITK_UINT16">
\deprecated This type have been deprecated due to erroneous
   * value, please use itk::uint16_t instead. 
</member>
        <member name="D:ITK_UINT8">
\deprecated This type have been deprecated due to erroneous
   *  value, please use itk::uint8_t instead. 
</member>
        <member name="D:ITK_INT32">
\deprecated This type have been deprecated due to erroneous
   *  value, please use itk::int32_8 instead. 
</member>
        <member name="D:ITK_INT8">
\deprecated This type have been deprecated due to erroneous
   *  value, please use itk::int8_t instead. 
</member>
        <member name="M:itk.Region.PrintSelf(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Methods invoked by Print() to print information about the object
   * including superclasses. Typically not called by the user (use Print()
   * instead) but used in the hierarchical print process to combine the
   * output of several classes.  
</member>
        <member name="M:itk.Region.Print(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Print the region. 
</member>
        <member name="M:itk.Region.GetRegionType">
Subclasses must return a region type describing whether the region
   * is structured or unstructured. 
</member>
        <member name="M:itk.Region.GetNameOfClass">
Standard part of all itk objects. 
</member>
        <member name="T:itk.Region.RegionType">
Enums used to describe the extent types. 
</member>
        <member name="D:itk.Region.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.Region">
\class Region
 * \brief A region represents some portion or piece of data.
 *
 * Region is an abstract class that represents some portion or
 * piece of a DataObject. A region is used by the pipeline when
 * processing just a portion of the data, either because 1) memory
 * limits dictate that the pipeline cannot fit the entire dataset
 * into memory; 2) the user has requested that only a piece of the
 * dataset is to be processed; or 3) parallel (multi-threaded)
 * processing of the data is required.
 *
 * There are two types of regions in itk: a structured region that
 * specifies a rectangular piece of an image (ImageRegion), and a
 * unstructured region that specifies piece i of N total pieces
 * (MeshRegion). Depending on the filter (its input and output
 * types, and its position in the pipeline), ImageRegion or MeshRegion
 * will be used to describe the region.
 *
 * Region is a light-weight object and not reference counted. This 
 * means that is behaves differently than ITK classes that are
 * reference counted. For example, smart pointer access is not
 * provided, and the (subclasses') constructor, destructor, 
 * copy constructor and operator= are all public.
 *
 * \sa ImageRegion
 * \sa MeshRegion
 * \ingroup DataRepresentation

</member>
        <member name="T:itk.ProcessObject">
Friends of DataObject 

Friends of Multithreader.
   * ProcessObject is a friend so that it can call PrintSelf() on its
   * Multithreader. 

\class ProcessObject
 * \brief ProcessObject is the base class for all process objects (source,
 *        filters, mappers) in the Insight data processing pipeline.
 *
 * ProcessObject is an abstract object that specifies behavior and
 * interface of network process objects (sources, filters,
 * mappers). Source objects are creators of visualization data;
 * filters input, process, and output image data; and mappers
 * transform data into another form (like transforming coordinates or
 * writing data to a file).
 *
 * A major role of ProcessObject is to define the inputs and outputs
 * of a filter. More than one input and/or output may exist for a given
 * filter. Some classes (e.g., source objects or mapper objects) will
 * not use inputs (the source) or outputs (mappers). In this case, the
 * inputs or outputs is just ignored.
 *
 * ProcessObject invokes the following events: 
 * Command::StartEvent, Command::EndEvent
 * These are convenience events you can use for any purpose
 * (e.g., debugging info, highlighting/notifying user interface, etc.) 
 * See Command and LightObject for information on using AddObserver.
 *
 * Another event Command::ProgressEvent can be observed. Some filters invoke
 * this event periodically during their execution (with the progress,
 * parameter, the fraction of work done). The use is similar to that of
 * StartEvent and EndEvent. Filters may also check their
 * AbortGenerateData flag to determine whether to prematurally end their
 * execution.
 *
 * An important feature of subclasses of ProcessObject is that it is
 * possible to control the memory-management model (i.e., retain
 * output versus delete output data). The ReleaseDataFlag enables the
 * deletion of the output data once the downstream process object
 * finishes processing the data (please see text). The
 * ReleaseDataBeforeUpdateFlag enables the deletion of the
 * ProcessObject's output data from a previous update if that output
 * data is slated to be regenerated by the pipeline process.  Setting
 * this flag can control peak memory usage during a subsequent
 * pipeline update.  For a ProcessObject, the ReleaseDataFlag defaults
 * to false and the ReleaseDataBeforeUpdateFlag defaults to true.
 * Some subclasses of ProcessObject, for example ImageSource, use a
 * default setting of false for the ReleaseDataBeforeUpdateFlag.
 *
 * Subclasses of ProcessObject may override 4 of the methods of this class
 * to control how a given filter may interact with the pipeline (dataflow).
 * These methods are: GenerateOutputInformation(),
 * EnlargeOutputRequestedRegion(), GenerateInputRequestedRegion(), and
 * GenerateOutputRequestedRegion(). By overriding these methods, a filter
 * can deviate from the base assumptions of the pipeline execution model.
 *
 * \ingroup ITKSystemObjects
 * \ingroup DataProcessing 
 *

</member>
        <member name="M:itk.DataObject.DisconnectSource(itk.ProcessObject*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Disconnect the specified process object from the data
   * object. This should only be called from a process object. An
   * application should call DataObject::DisconnectPipeline() if it
   * wants to disconnect a data object from a pipeline. The second
   * parameter indicates which of the source's outputs corresponds to
   * this data object. If the specified source output index does not
   * match the index cached when the data object was connected to the
   * pipeline (see ConnectSource), then nothing is done. 
</member>
        <member name="M:itk.DataObject.ConnectSource(itk.ProcessObject*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Connect the specified process object to the data object. This
   * should only be called from a process object. The second parameter
   * indicates which of the source's outputs corresponds to this data
   * object. 
</member>
        <member name="F:itk.DataObject.m_GlobalReleaseDataFlag">
Static member that controls global data release after use by filter. 
</member>
        <member name="F:itk.DataObject.m_PipelineMTime">
The maximum MTime of all upstream filters and data objects.
   * This does not include the MTime of this data object. 
</member>
        <member name="F:itk.DataObject.m_UpdateMTime">
When was this data last generated? 
</member>
        <member name="F:itk.DataObject.m_Source">
Who generated this data? 
</member>
        <member name="M:itk.DataObject.PropagateResetPipeline">
Propagate a call to ResetPipeline(). Called only from ProcessObject. 
</member>
        <member name="M:itk.DataObject.Graft(itk.DataObject!System.Runtime.CompilerServices.IsConst*)">
Method for grafting the content of one data object into another one.
   * This method is intended to be overloaded by derived classes. Each one of
   * them should use dynamic_casting in order to verify that the grafted 
   * object is actually of the same type as the class on which the Graft()
   * method was invoked. 
</member>
        <member name="M:itk.DataObject.SetRequestedRegion(itk.DataObject*)">
Set the requested region from this data object to match the requested
   * region of the data object passed in as a parameter.  For
   * DataObject's that do not support Regions, this method does
   * nothing. Subclasses of DataObject that do support Regions,
   * provide an alternative implementation. 
</member>
        <member name="M:itk.DataObject.CopyInformation(itk.DataObject!System.Runtime.CompilerServices.IsConst*)">
Copy information from the specified data set.  This method is
   * part of the pipeline execution model. By default, a ProcessObject
   * will copy meta-data from the first input to all of its
   * outputs. See ProcessObject::GenerateOutputInformation().  Each
   * subclass of DataObject is responsible for being able to copy
   * whatever meta-data it needs from from another DataObject.
   * The default implementation of this method is empty. If a subclass
   * overrides this method, it should always call its superclass'
   * version. 
</member>
        <member name="M:itk.DataObject.VerifyRequestedRegion">
Verify that the RequestedRegion is within the LargestPossibleRegion.  
   *
   * If the RequestedRegion is not within the LargestPossibleRegion,
   * then the filter cannot possibly satisfy the request. This method
   * returns true if the request can be satisfied (even if it will be
   * necessary to process the entire LargestPossibleRegion) and
   * returns false otherwise.  This method is used by
   * PropagateRequestedRegion().  PropagateRequestedRegion() throws a
   * InvalidRequestedRegionError exception if the requested region is
   * not within the LargestPossibleRegion. Default implementation
   * simply returns true in order to support DataObjects that do not
   * need regions (for instance itk::EquivalencyTable). 
</member>
        <member name="M:itk.DataObject.RequestedRegionIsOutsideOfTheBufferedRegion">
Determine whether the RequestedRegion is outside of the
   * BufferedRegion. This method returns true if the RequestedRegion
   * is outside the BufferedRegion (true if at least one pixel is
   * outside). This is used by the pipeline mechanism to determine
   * whether a filter needs to re-execute in order to satisfy the
   * current request.  If the current RequestedRegion is already
   * inside the BufferedRegion from the previous execution (and the
   * current filter is up to date), then a given filter does not need
   * to re-execute 
</member>
        <member name="M:itk.DataObject.SetRequestedRegionToLargestPossibleRegion">
Set the RequestedRegion to the LargestPossibleRegion.  This
   * forces a filter to produce all of the output in one execution
   * (i.e. not streaming) on the next call to Update(). 
</member>
        <member name="M:itk.DataObject.DataHasBeenGenerated">
Inform the pipeline mechanism that data has been generated.  This
   * method is called by ProcessObject::UpdateOutputData() once the
   * process object has finished generating its data. This essentially
   * marks the DataObject as being updated and ready for use. 
</member>
        <member name="M:itk.DataObject.PrepareForNewData">
Setup a DataObject to receive new data.  This method is called
   * by the pipeline mechanism on each output of filter that needs
   * to execute.  The default implementation is to return a DataObject
   * to its initial state.  This may involve releasing previously
   * allocated bulk data.  Subclasses of DataObject may want to
   * override this method and/or the Initialize() method if they
   * want a different default behavior (for instance a DataObject
   * might want finer control over its bulk data memory management). 
</member>
        <member name="M:itk.DataObject.GetUpdateMTime">
MTime for the last time this DataObject was generated. 
</member>
        <member name="M:itk.DataObject.SetPipelineMTime(System.UInt32!System.Runtime.CompilerServices.IsLong)">
The maximum MTime of all upstream filters and data objects.
   * This does not include the MTime of this data object. 
</member>
        <member name="M:itk.DataObject.ResetPipeline">
Reset the pipeline. If an exception is thrown during an Update(),
   * the pipeline may be in an inconsistent state.  This method clears
   * the internal state of the pipeline so Update() can be called. 
</member>
        <member name="M:itk.DataObject.PropagateRequestedRegion">
Methods to update the pipeline. Called internally by the
   * pipeline mechanism. 
</member>
        <member name="M:itk.DataObject.UpdateOutputInformation">
Update the information for this DataObject so that it can be used
   * as an output of a ProcessObject.  This method is used in the pipeline
   * mechanism to propagate information and initialize the meta data
   * associated with a DataObject.  Any implementation of this method in
   * a derived class is assumed to call its source's
   * ProcessObject::UpdateOutputInformation() which determines modified
   * times, LargestPossibleRegions, and any extra meta data like spacing,
   * origin, etc. Default implementation simply call's it's source's
   * UpdateOutputInformation(). 
</member>
        <member name="M:itk.DataObject.Update">
Provides opportunity for the data object to insure internal
   * consistency before access. Also causes owning source/filter (if
   * any) to update itself. The Update() method is composed of
   * UpdateOutputInformation(), PropagateRequestedRegion(), and
   * UpdateOutputData(). This method may call methods that throw an
   * InvalidRequestedRegionError exception. This exception will leave
   * the pipeline in an inconsistent state.  You will need to call
   * ResetPipeline() on the last ProcessObject in your pipeline in
   * order to restore the pipeline to a state where you can call
   * Update() again. 
</member>
        <member name="M:itk.DataObject.GetDataReleased">
Get the flag indicating the data has been released.  
</member>
        <member name="M:itk.DataObject.ShouldIReleaseData">
Return flag indicating whether data should be released after use  
   * by a filter.  
</member>
        <member name="M:itk.DataObject.ReleaseData">
Release data back to system to conserve memory resource. Used during
   * pipeline execution.  Releasing this data does not make
   * down-stream data invalid, so it does not modify the MTime of this data
   * object.   
</member>
        <member name="M:itk.DataObject.SetGlobalReleaseDataFlag(System.Boolean)">
Turn on/off a flag to control whether every object releases its data
   * after being used by a filter. Being a global flag, it controls the
   * behavior of all DataObjects and ProcessObjects. 
</member>
        <member name="M:itk.DataObject.SetReleaseDataFlag(System.Boolean)">
Turn on/off a flag to control whether this object's data is released
   * after being used by a filter.  
</member>
        <member name="M:itk.DataObject.Initialize">
Restore the data object to its initial state. This means releasing
   * memory. 
</member>
        <member name="M:itk.DataObject.GetSourceOutputIndex">
Which of the source's outputs corresponds to this data object? 
</member>
        <member name="M:itk.DataObject.GetSource">
Get the process object that generated this data object.
   * If there is no process object, then the data object has
   * been disconnected from the pipeline, or the data object
   * was created manually. (Note: we cannot use the GetObjectMacro()
   * defined in itkMacro because the mutual dependency of
   * DataObject and ProcessObject causes compile problems. Also,
   * a forward reference smart pointer is returned, not a smart pointer, 
   * because of the circular dependency between the process and data object.)
   *
   * GetSource() returns a SmartPointerForwardReference and not a WeakPointer
   * because it is assumed the code calling GetSource() wants to hold a
   * long term reference to the source. 
</member>
        <member name="M:itk.DataObject.DisconnectPipeline">
Separate this data object from the pipeline.  This routine disconnects
   * a data object from the upstream pipeline. Hence an Update() from
   * downstream will not propagate back past this data object.  To completely
   * isolate this data object from the pipeline, the application must remove
   * this data object from any filters which it is connected as the input. 
</member>
        <member name="M:itk.DataObject.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="D:itk.DataObject.Self">
Standard class typedefs. 
</member>
        <member name="M:itk.InvalidRequestedRegionError.PrintSelf(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Print exception information.  This method can be overridden by
   * specific exception subtypes.  The default is to print out the
   * location where the exception was first thrown and any description
   * provided by the ``thrower''.   
</member>
        <member name="M:itk.InvalidRequestedRegionError.GetNameOfClass">
Standard type macro 
</member>
        <member name="M:itk.InvalidRequestedRegionError.op_Assign(itk.InvalidRequestedRegionError!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Operator=.  Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.InvalidRequestedRegionError.#ctor(itk.InvalidRequestedRegionError!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor.  Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.InvalidRequestedRegionError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.InvalidRequestedRegionError.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.InvalidRequestedRegionError.Dispose">
Destructor. Need to specify empty throw() to avoid warnings. 
</member>
        <member name="M:itk.InvalidRequestedRegionError.#ctor">
Default constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="T:itk.InvalidRequestedRegionError">
\class InvalidRequestRegionError
 * Exception object for invalid requested region

</member>
        <member name="M:itk.DataObjectError.PrintSelf(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Print exception information.  This method can be overridden by
   * specific exception subtypes.  The default is to print out the
   * location where the exception was first thrown and any description
   * provided by the ``thrower''.   
</member>
        <member name="M:itk.DataObjectError.GetDataObject">
Get the data object that is throwing this exception. 
</member>
        <member name="M:itk.DataObjectError.SetDataObject(itk.DataObject*)">
Set the data object that is throwing this exception. 
</member>
        <member name="M:itk.DataObjectError.GetNameOfClass">
Standard type macro 
</member>
        <member name="M:itk.DataObjectError.op_Assign(itk.DataObjectError!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Operator=.  Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.DataObjectError.#ctor(itk.DataObjectError!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.DataObjectError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.DataObjectError.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.DataObjectError.Dispose">
Destructor. Need to specify empty throw() to avoid warnings. 
</member>
        <member name="M:itk.DataObjectError.#ctor">
Default constructor.  Needed to ensure the exception object can be
   * copied. 
</member>
        <member name="T:itk.DataObjectError">
\class DataObjectError
 * \brief Exception object for DataObject exceptions 
</member>
        <member name="F:itk.Object.m_MetaDataDictionary">
Implementation for holding Object MetaData
@see itk::MetaDataDictionary
@see itk::MetaDataObjectBase
@see itk::MetaDataObject
This is only allocated if used.

</member>
        <member name="F:itk.Object.m_SubjectImplementation">
Implementation class for Subject/Observer Pattern.
   * This is only allocated if used. 
</member>
        <member name="F:itk.Object.m_GlobalWarningDisplay">
Global object debug flag. 
</member>
        <member name="F:itk.Object.m_MTime">
Keep track of modification time. 
</member>
        <member name="F:itk.Object.m_Debug">
Enable/Disable debug messages. 
</member>
        <member name="M:itk.Object.PrintSelf(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Methods invoked by Print() to print information about the object
   * including superclasses. Typically not called by the user (use Print()
   * instead) but used in the hierarchical print process to combine the
   * output of several classes.  
</member>
        <member name="M:itk.Object.SetMetaDataDictionary(itk.MetaDataDictionary!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\return Set the MetaDataDictionary

</member>
        <member name="M:itk.Object.GetMetaDataDictionary">
\return A reference to this objects MetaDataDictionary.
\warning This reference may be changed.


\return A constant reference to this objects MetaDataDictionary.

</member>
        <member name="M:itk.Object.HasObserver(itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Return true if an observer is registered for this event. 
</member>
        <member name="M:itk.Object.RemoveAllObservers">
Remove all observers . 
</member>
        <member name="M:itk.Object.RemoveObserver(System.UInt32!System.Runtime.CompilerServices.IsLong)">
Remove the observer with this tag value. 
</member>
        <member name="M:itk.Object.InvokeEvent(itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Call Execute on all the Commands observing this event id. 

Call Execute on all the Commands observing this event id.
   * The actions triggered by this call doesn't modify this object. 
</member>
        <member name="M:itk.Object.GetCommand(System.UInt32!System.Runtime.CompilerServices.IsLong)">
Get the command associated with the given tag.  NOTE: This returns
   * a pointer to a Command, but it is safe to asign this to a
   * Command::Pointer.  Since Command inherits from LightObject, at this
   * point in the code, only a pointer or a reference to the Command can
   * be used.   
</member>
        <member name="M:itk.Object.AddObserver(itk.EventObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Command*)">
Allow people to add/remove/invoke observers (callbacks) to any ITK
   * object. This is an implementation of the subject/observer design
   * pattern. An observer is added by specifying an event to respond to
   * and an itk::Command to execute. It returns an unsigned long tag
   * which can be used later to remove the event or retrieve the
   * command.  The memory for the Command becomes the responsibility of
   * this object, so don't pass the same instance of a command to two
   * different objects  
</member>
        <member name="M:itk.Object.SetGlobalWarningDisplay(System.Boolean)">
This is a global flag that controls whether any debug, warning
   *  or error messages are displayed.  
</member>
        <member name="M:itk.Object.SetReferenceCount(System.Int32)">
Sets the reference count (use with care)  
</member>
        <member name="M:itk.Object.UnRegister">
Decrease the reference count (release by another object).  
</member>
        <member name="M:itk.Object.Register">
Increase the reference count (mark as used by another object).  
</member>
        <member name="M:itk.Object.Modified">
Update the modification time for this object. Many filters rely on the
   * modification time to determine if they need to recompute their data.  
</member>
        <member name="M:itk.Object.GetMTime">
Return this objects modified time.  
</member>
        <member name="M:itk.Object.SetDebug(System.Boolean)">
Set the value of the debug flag. A non-zero value turns debugging on. 
</member>
        <member name="M:itk.Object.GetDebug">
Get the value of the debug flag.  
</member>
        <member name="M:itk.Object.DebugOff">
Turn debugging output off.  
</member>
        <member name="M:itk.Object.DebugOn">
Turn debugging output on.  
</member>
        <member name="M:itk.Object.GetNameOfClass">
Standard part of all itk objects. 
</member>
        <member name="M:itk.Object.CreateAnother">
Create an object from an instance, potentially deferring to a
   * factory.  This method allows you to create an instance of an
   * object that is exactly the same type as the referring object.
   * This is useful in cases where an object has been cast back to a
   * base class. 
</member>
        <member name="M:itk.Object.New">
Method for creation through the object factory. 
</member>
        <member name="D:itk.Object.Self">
Smart pointer typedef support. 
</member>
        <member name="T:itk.Object">
\class Object
 * \brief Base class for most itk classes.
 *
 * Object is the second-highest level base class for most itk objects.
 * It extends the base object functionality of LightObject by
 * implementing callbacks (via object/observer), debug flags/methods,
 * and modification time tracking. Most ITK classes should be a subclas
 * of Object due to the need to keep track of modified time.
 *
 * \ingroup ITKSystemObjects
 * \ingroup DataRepresentation

</member>
        <member name="M:itk.MetaDataDictionary.Find(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns an iterator matching the string key 
</member>
        <member name="M:itk.MetaDataDictionary.End">
Returns an iterator to the end of the map 
</member>
        <member name="M:itk.MetaDataDictionary.Begin">
\warning the following functions SHOULD NOT be used with 
   * the visual studio 6 compiler since iterator outside of the dll
   * context cannot be dereferenced safely 
Returns an iterator to the beginning of the map 
</member>
        <member name="M:itk.MetaDataDictionary.GetKeys">
Returns a vector of keys to the key/value entries in the
   * dictionary.  Iterate through the dictionary using these keys.

</member>
        <member name="M:itk.MetaDataDictionary.Print(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Defines the default behavior for printing out this element
\param os An output stream

</member>
        <member name="T:itk.MetaDataDictionary">
\class MetaDataDictionary
 * \author Hans J. Johnson
 * The MetaDataDictionary, along with the MetaDataObject derived template
 * classes, is designed to provide a mechanism for storing a collection of
 * arbitrary data types. The main motivation for such a collection is to
 * associate arbitrary data elements with itk DataObjects.

</member>
        <member name="M:itk.MetaDataObjectBase.Dispose">
Method for creation through the object factory.   
Default destructor

</member>
        <member name="M:itk.MetaDataObjectBase.Print(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Defines the default behavior for printing out this element
\param os An output stream

</member>
        <member name="M:itk.MetaDataObjectBase.GetMetaDataObjectTypeInfo">
\author Hans J. Johnson
\return A constant reference to a std::type_info object

</member>
        <member name="M:itk.MetaDataObjectBase.GetMetaDataObjectTypeName">
\author Hans J. Johnson
\return A pointer to a const char array containing the unique type name.

</member>
        <member name="M:itk.MetaDataObjectBase.GetNameOfClass">
Run-time type information (and related methods). 
</member>
        <member name="D:itk.MetaDataObjectBase.Self">
Smart pointer typedef support. 
</member>
        <member name="T:itk.MetaDataObjectBase">
\class MetaDataObjectBase
 * \brief
 * The MetaDataObjectBase class is designed as the
 * common interface for MetaDataObject's.
 * This class is intended as the value part
 * of the (key,value) pair to be stored in
 * a MetaDataDictionary
 * 
 * \author Hans J. Johnson

</member>
        <member name="T:itk.NoEvent">
Macro for creating new Events

Define some common ITK events

</member>
        <member name="M:itk.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.EventObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Generic inserter operator for EventObject and its subclasses. 
</member>
        <member name="M:itk.EventObject.PrintSelf(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Methods invoked by Print() to print information about the object
   * including superclasses. Typically not called by the user (use Print()
   * instead) but used in the hierarchical print process to combine the
   * output of several classes.  
</member>
        <member name="M:itk.EventObject.CheckEvent(itk.EventObject!System.Runtime.CompilerServices.IsConst*)">
Check if given event matches or derives from this event. 
</member>
        <member name="M:itk.EventObject.GetEventName">
Return the StringName associated with the event. 
</member>
        <member name="M:itk.EventObject.Print(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Print Event information.  This method can be overridden by
   * specific Event subtypes.  The default is to print out the type of
   * the event. 
</member>
        <member name="M:itk.EventObject.MakeObject">
Create an Event of this type This method work as a Factory for
  *  creating events of each particular type. 
</member>
        <member name="M:itk.EventObject.Dispose">
Virtual destructor needed  
</member>
        <member name="M:itk.EventObject.#ctor">
Constructor and copy constructor.  Note that these functions will be
   * called when children are instantiated. 
</member>
        <member name="T:itk.EventObject">
\class EventObject
 * \brief Abstraction of the Events used to communicating among filters
    and with GUIs.
 *
 * EventObject provides a standard coding for sending and receiving messages
 * indicating things like the initiation of processes, end of processes,
 * modification of filters.
 *
 * EventObjects form a hierarchy similar to the itk::ExceptionObject allowing
 * to factorize common events in a tree-like structure. Higher detail can
 * be assigned by users by subclassing existing itk::EventObjects.
 *
 * EventObjects are used by itk::Command and itk::Object for implementing the
 * Observer/Subject design pattern. Observers register their interest in 
 * particular kinds of events produced by a specific itk::Object. This 
 * mechanism decouples classes among them.
 *
 * As opposed to itk::Exception, itk::EventObject does not represent error 
 * states, but simply flow of information allowing to trigger actions 
 * as a consequence of changes occurring in state on some itk::Objects.
 *
 * itk::EventObject carries information in its own type, it relies on the 
 * appropiate use of the RTTI (Run Time Type Information).
 *
 * A set of standard EventObjects is defined near the end of itkEventObject.h.
 *
 * \sa itk::Command
 * \sa itk::ExceptionObject
 *
 * \ingroup ITKSystemObjects 

</member>
        <member name="F:itk.LightObject.m_ReferenceCountLock">
Mutex lock to protect modification to the reference count 
</member>
        <member name="F:itk.LightObject.m_ReferenceCount">
Number of uses of this object by other objects. 
</member>
        <member name="D:itk.LightObject.InternalReferenceCountType">
Define the type of the reference count according to the
      target. This allows the use of atomic operations 
</member>
        <member name="M:itk.LightObject.PrintSelf(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Methods invoked by Print() to print information about the object
   * including superclasses. Typically not called by the user (use Print()
   * instead) but used in the hierarchical print process to combine the
   * output of several classes.  
</member>
        <member name="M:itk.LightObject.SetReferenceCount(System.Int32)">
Sets the reference count on this object. This is a dangerous
   * method, use it with care. 
</member>
        <member name="M:itk.LightObject.GetReferenceCount">
Gets the reference count on this object. 
</member>
        <member name="M:itk.LightObject.UnRegister">
Decrease the reference count (release by another object).  
</member>
        <member name="M:itk.LightObject.Register">
Increase the reference count (mark as used by another object).  
</member>
        <member name="M:itk.LightObject.BreakOnError">
This method is called when itkExceptionMacro executes. It allows 
   * the debugger to break on error.  
</member>
        <member name="M:itk.LightObject.Print(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent)">
Cause the object to print itself out. 
</member>
        <member name="M:itk.LightObject.new(System.UInt32)">
Used to avoid dll boundary problems.  
</member>
        <member name="M:itk.LightObject.GetNameOfClass">
Return the name of this class as a string. Used by the object factory
   * (implemented in New()) to instantiate objects of a named type. Also
   * used for debugging and other output information.  
</member>
        <member name="M:itk.LightObject.Delete">
Delete an itk object.  This method should always be used to delete an
   * object when the new operator was used to create it. Using the C
   *  delete method will not work with reference counting.  
</member>
        <member name="M:itk.LightObject.CreateAnother">
Create an object from an instance, potentially deferring to a
   * factory.  This method allows you to create an instance of an
   * object that is exactly the same type as the referring object.
   * This is useful in cases where an object has been cast back to a
   * base class. 
</member>
        <member name="M:itk.LightObject.New">
Method for creation through the object factory. 
</member>
        <member name="D:itk.LightObject.Self">
Standard clas typedefs. 
</member>
        <member name="T:itk.LightObject">
\class LightObject
 * \brief Light weight base class for most itk classes.
 * 
 * LightObject is the highest level base class for most itk objects. It
 * implements reference counting and the API for object printing.
 * It can be used as a lightweight base class in preference to Object.
 * (LightObject does not support callbacks or modified time as Object
 * does.) All ITK objects should be a subclass of LightObject or Object
 * with few exceptions (due to performance concerns).
 *
 * \sa Object
 * \ingroup ITKSystemObjects
 * \ingroup DataRepresentation

</member>
        <member name="M:itk.SimpleFastMutexLock.Unlock">
Unlock access. 
</member>
        <member name="M:itk.SimpleFastMutexLock.Lock">
Lock access. 
</member>
        <member name="M:itk.SimpleFastMutexLock.#ctor">
Constructor and destructor left public purposely because of stack allocation. 
</member>
        <member name="D:itk.SimpleFastMutexLock.Self">
Standard class typedefs.  
</member>
        <member name="T:itk.SimpleFastMutexLock">
\class SimpleFastMutexLock
 * \brief Critical section locking class that can be allocated on the stack.
 * 
 * SimpleFastMutexLock is used by FastMutexLock to perform mutex locking.
 * SimpleFastMutexLock is not a subclass of Object and is designed to be
 * allocated on the stack.
 *
 * \ingroup OSSystemObjects

</member>
        <member name="T:_EXCEPTION_DISPOSITION">
itkMacro.h defines standard system-wide macros, constants, and other
parameters. One of its most important functions is to define macros used
to interface to instance variables in a standard fashion. For example,
these macros manage modified time, debugging information, and provide a
standard interface to set and get instance variables.  Macros are
available for built-in types; for string classe; vector arrays;
object pointers; and debug, warning, and error printout information. 

This file is used to create the smallest windows.h possible.
 * Also it removes a few annoying #define's in windows.h. 
</member>
        <member name="M:itk.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.Indent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Print out the indentation. Basically output a bunch of spaces.  
</member>
        <member name="M:itk.Indent.GetNextIndent">
Determine the next indentation level. Keep indenting by two until the 
   * a maximum of forty spaces is reached.  
</member>
        <member name="M:itk.Indent.GetNameOfClass">
Return the name of the class. 
</member>
        <member name="M:itk.Indent.#ctor(System.Int32)">
Construct the object with an initial indentation level. 
</member>
        <member name="M:itk.Indent.Delete">
Destroy this instance. 
</member>
        <member name="M:itk.Indent.New">
Method for creation through the object factory. 
</member>
        <member name="D:itk.Indent.Self">
Standard class typedefs. 
</member>
        <member name="T:itk.Indent">
\class Indent
 * \brief Control indentation during Print() invocation.
 *
 * Indent is used to control indentation during the chaining print 
 * process. This way nested objects can correctly indent themselves.
 * This class works with the print methods defined in Object (i.e.,
 * the public method Print() and the protected methods PrintSelf(),
 * PrintHeader(), and PrintTrailer().
 *
 * \ingroup OSSystemObjects

</member>
        <member name="M:itk.TimeStamp.op_Implicit~System.UInt32!System.Runtime.CompilerServices.IsLong">
Allow for typcasting to unsigned long.  
</member>
        <member name="M:itk.TimeStamp.op_GreaterThan(itk.TimeStamp*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Support comparisons of time stamp objects directly.  
</member>
        <member name="M:itk.TimeStamp.GetMTime">
Return this object's Modified time.  
</member>
        <member name="M:itk.TimeStamp.Modified">
Set this objects time to the current time. The current time is just a
   * monotonically increasing unsigned long integer. It is possible for this
   * number to wrap around back to zero.  This should only happen for
   * processes that have been running for a very long time, while constantly
   * changing objects within the program. When this does occur, the typical
   * consequence should be that some filters will update themselves when
   * really they don't need to.   
</member>
        <member name="M:itk.TimeStamp.GetNameOfClass">
The class name as a string.  
</member>
        <member name="M:itk.TimeStamp.Delete">
Destoy this instance. 
</member>
        <member name="M:itk.TimeStamp.#ctor">
Constructor must remain public because classes instantiate
   * TimeStamps implicitly in their construction.  
</member>
        <member name="M:itk.TimeStamp.New">
Create an instance of this class. We don't want to use reference
   * counting. 
</member>
        <member name="D:itk.TimeStamp.Self">
Standard class typedefs. 
</member>
        <member name="M:itk.ProcessAborted.Dispose">
Virtual destructor needed for subclasses. Has to have empty throw(). 
</member>
        <member name="M:itk.ProcessAborted.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.ProcessAborted.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.ProcessAborted.#ctor">
Default constructor.  Needed to ensure the exception object can be
   * copied. 
</member>
        <member name="T:itk.ProcessAborted">
\class ProcessAborted
 * Exception thrown when a filter (actually a ProcessObject) has been aborted.
 * \ingroup ITKSystemObjects 

</member>
        <member name="M:itk.IncompatibleOperandsError.Dispose">
Virtual destructor needed for subclasses. Has to have empty throw(). 
</member>
        <member name="M:itk.IncompatibleOperandsError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.IncompatibleOperandsError.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.IncompatibleOperandsError.#ctor">
Default constructor.  Needed to ensure the exception object can be
   * copied. 
</member>
        <member name="T:itk.IncompatibleOperandsError">
\class IncompatibleOperandsError
 * Exception thrown when two operands are incompatible.
 * \ingroup ITKSystemObjects 

</member>
        <member name="M:itk.InvalidArgumentError.Dispose">
Virtual destructor needed for subclasses. Has to have empty throw(). 
</member>
        <member name="M:itk.InvalidArgumentError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied.

</member>
        <member name="M:itk.InvalidArgumentError.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied.

</member>
        <member name="M:itk.InvalidArgumentError.#ctor">
Default constructor.  Needed to ensure the exception object can be
copied.

</member>
        <member name="T:itk.InvalidArgumentError">
\class InvalidArgumentError
 * Exception thrown when invalid argument is given to a method
 * or function.
 * \ingroup ITKSystemObjects 

</member>
        <member name="M:itk.RangeError.Dispose">
Virtual destructor needed for subclasses. Has to have empty throw(). 
</member>
        <member name="M:itk.RangeError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.RangeError.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.RangeError.#ctor">
Default constructor.  Needed to ensure the exception object can be
   * copied. 
</member>
        <member name="T:itk.RangeError">
\class RangeError
 * Exception thrown when accessing memory out of range.
 * \ingroup ITKSystemObjects 

</member>
        <member name="M:itk.MemoryAllocationError.Dispose">
Virtual destructor needed for subclasses. Has to have empty throw(). 
</member>
        <member name="M:itk.MemoryAllocationError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!S">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.MemoryAllocationError.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.MemoryAllocationError.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
Constructor. Needed to ensure the exception object can be copied. 
</member>
        <member name="M:itk.MemoryAllocationError.#ctor">
Default constructor.  Needed to ensure the exception object can be
   * copied. 
</member>
        <member name="T:itk.MemoryAllocationError">
Specific exception types that are subclasses of ExceptionObject follow

\class MemoryAllocationError
 * Exception thrown when image memory allocation fails.
 * \ingroup ITKSystemObjects

</member>
        <member name="M:itk.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,itk.ExceptionObject*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Generic inserter operator for ExceptionObject and its subclasses. 
</member>
        <member name="T:itk.ExceptionObject.ReferenceCounterInterface">
\class ReferenceCounterInterface
   *
   *  Exception data.  Location of the error and description of the error.
   *
   *  Class hierarchy
   *
   *
   *           ReferenceCounterInterface (Register/UnRegister)
   *                     ^
   *                     |
   *               ExceptionData       LightObject (Register/UnRegister)
   *                     ^                  ^
   *                     |                  |
   *                   ReferenceCountedExceptionData (Register/UnRegister)
   *
   *
   *
   *  The ReferenceCounterInterface is an abstract class providing
   *  the API interface expected by the SmartPointer. Its second derived
   *  class, the ReferenceCountedExceptionData, double inherits from LightObject
   *  and ExceptionData, and overloads the Register()/UnRegister() methods to
   *  delegate them to its second parent, the LightObject.
   *

</member>
        <member name="M:itk.ExceptionObject.what">
Provide std::exception::what() implementation. 
</member>
        <member name="M:itk.ExceptionObject.GetLine">
What line did the exception occur in? 
</member>
        <member name="M:itk.ExceptionObject.GetFile">
What file did the exception occur in? 
</member>
        <member name="M:itk.ExceptionObject.SetLocation(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Methods to get and set the Location and Description fields. The Set
   * methods are overloaded to support both std::string and const char 
   * array types. Get methods return const char arrays. 
</member>
        <member name="M:itk.ExceptionObject.Print(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Print exception information.  This method can be overridden by
   * specific exception subtypes.  The default is to print out the
   * location where the exception was first thrown and any description
   * provided by the ``thrower''.   
</member>
        <member name="M:itk.ExceptionObject.op_Equality(itk.ExceptionObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Equivalence operator. 
</member>
        <member name="M:itk.ExceptionObject.op_Assign(itk.ExceptionObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator. 
</member>
        <member name="M:itk.ExceptionObject.Dispose">
Virtual destructor needed for subclasses. Has to have empty throw(). 
</member>
        <member name="M:itk.ExceptionObject.#ctor">
Various types of constructors.  Note that these functions will be
  * called when children are instantiated.  The default constructor and
  * the copy constructor of ExceptionObject never throw an exception. 
</member>
        <member name="T:itk.ExceptionObject">
\class ExceptionObject
 * \brief Standard exception handling object.
 *
 * ExceptionObject provides standard methods for throwing
 * and managing exceptions in itk. Specific exceptions should be
 * derived from this class. Note that this class is derived from
 * std::exception, so an application can catch ITK exceptions as
 * std::exception if desired.
 *
 * ExceptionObject maintains two types of information: a location
 * and description (both of which are strings). The location is the
 * point in the code where the exception was thrown; the description
 * is an error message that describes the exception. The ExceptionObject
 * can be thrown explicitly in code, or more conveniently, the 
 * itkExceptionMacro (found in Common/itkMacro.h) can be used.
 *
 * \ingroup ITKSystemObjects 

</member>
        <member name="T:itk.OStringStream">
itk::OStringStream wrapper to hide differences between
std::ostringstream and the old ostrstream.  Necessary for
portability.

</member>
        <member name="M:itk.OutputWindowDisplayText(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
The following is used to output debug, warning, and error messages.
Use a global function which actually calls:
OutputWindow::GetInstance()-&gt;DisplayText();
This is to avoid Object #include of OutputWindow
while OutputWindow #includes Object. 
</member>
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL2IUL2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter_IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter_IUL2IUL2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter_ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter_IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter_ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter_ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter_ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter_IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter_IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter_IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter_IUL2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter_IUL2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter_ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter_IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter_IUL3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter_IUL3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter_IUL3IUL3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleFillholeImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkClosingByReconstructionImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkOpeningByReconstructionImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWhiteTopHatImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConvexImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByDilationImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter_IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter_ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter_ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleGrindPeakImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter_IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalOpeningImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter_IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkWatershedImageFilter_IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleDilateImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter_IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryMorphologicalClosingImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter_ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMaximaImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBlackTopHatImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryDilateImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanDilateImageFilter_IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter_IUC2IUC2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter_IF3IF3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHMinimaImageFilter_IF3IF3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalOpeningImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkBinaryErodeImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleErodeImageFilter_IUC3IUC3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter_ISS2ISS2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkHConcaveImageFilter_ISS2ISS2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkVanHerkGilWermanErodeImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalGradientImageFilter_ISS3ISS3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkGrayscaleMorphologicalClosingImageFilter_IF2IF2.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkMorphologicalWatershedFromMarkersImageFilter_IUL3IUL3.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.TimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:itk.DataObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.Math.RoundHalfIntegerToEven(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:itk.QuadEdge.Self'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter.GetOutput'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.GetOutput(System.UInt32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:itk.itkReconstructionByErosionImageFilter_IUC2IUC2.GetOutput'. -->
    </members>
</doc>